{"version":3,"sources":["../../../../src/webgpu/api/validation/createBindGroupLayout.spec.ts"],"names":["description","poptions","params","makeTestGroup","kMaxBindingsPerBindGroup","kShaderStages","kShaderStageCombinations","kTextureViewDimensions","allBindingEntries","bindingTypeInfo","bufferBindingTypeInfo","kBufferBindingTypes","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","fn","t","goodDescriptor","entries","binding","visibility","GPUShaderStage","COMPUTE","type","device","createBindGroupLayout","badDescriptor","expectValidationError","cases","subcases","entry","info","success","validStages","combine","undefined","viewDimension","texture","multisampled","desc","maxDynamicBufferCount","perPipelineLimitClass","maxDynamic","maxDynamicBufferBindings","i","push","buffer","hasDynamicOffset","length","pickExtraBindingTypesForPerStage","extraTypeSame","extra","extraInfo","perStageLimitClass","class","sampler","kCasesForMaxResourcesPerStageTests","filter","p","maxedEntry","maxedVisibility","expand","extraEntry","extraVisibility","maxedTypeInfo","maxedCount","max","maxResourceBindings","newDescriptor","shouldError","extraTypeInfo","goodLayout","createPipelineLayout","bindGroupLayouts","extraLayout","newBindingCountsTowardSamePerStageLimit","layoutExceedsPerStageLimit"],"mappings":"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","sourcesContent":["export const description = `\ncreateBindGroupLayout validation tests.\n\nTODO: update for new binding structure, remove eslint-disable.\nTODO: review existing tests, write descriptions, and make sure tests are complete.\n`;\n\nimport { poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport {\n  kMaxBindingsPerBindGroup,\n  kShaderStages,\n  kShaderStageCombinations,\n  kTextureViewDimensions,\n  allBindingEntries,\n  bindingTypeInfo,\n  bufferBindingTypeInfo,\n  kBufferBindingTypes,\n  BGLEntry,\n} from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUBindGroupLayoutDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('some_binding_index_was_specified_more_than_once').fn(async t => {\n  const goodDescriptor = {\n    entries: [\n      { binding: 0, visibility: GPUShaderStage.COMPUTE, type: 'storage-buffer' as const },\n      { binding: 1, visibility: GPUShaderStage.COMPUTE, type: 'storage-buffer' as const },\n    ],\n  };\n\n  // Control case\n  t.device.createBindGroupLayout(goodDescriptor);\n\n  const badDescriptor = clone(goodDescriptor);\n  badDescriptor.entries[1].binding = 0;\n\n  // Binding index 0 can't be specified twice.\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout(badDescriptor);\n  });\n});\n\ng.test('visibility')\n  .cases(poptions('visibility', kShaderStageCombinations))\n  .subcases(() => poptions('entry', allBindingEntries(false)))\n  .fn(async t => {\n    const { visibility, entry } = t.params;\n    const info = bindingTypeInfo(entry);\n\n    const success = (visibility & ~info.validStages) === 0;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [{ binding: 0, visibility, ...entry }],\n      });\n    }, !success);\n  });\n\ng.test('multisample_requires_2d_view_dimension')\n  .params(params().combine(poptions('viewDimension', [undefined, ...kTextureViewDimensions])))\n  .fn(async t => {\n    const { viewDimension } = t.params;\n\n    const success = viewDimension === '2d' || viewDimension === undefined;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            texture: { multisampled: true, viewDimension },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('number_of_dynamic_buffers_exceeds_the_maximum_value')\n  .desc(\n    `TODO: describe\n\nTODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .cases(poptions('type', kBufferBindingTypes))\n  .fn(async t => {\n    const { type } = t.params;\n    const info = bufferBindingTypeInfo({ type });\n\n    const maxDynamicBufferCount = info.perPipelineLimitClass.maxDynamic;\n\n    const maxDynamicBufferBindings = [];\n    for (let i = 0; i < maxDynamicBufferCount; i++) {\n      maxDynamicBufferBindings.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type, hasDynamicOffset: true },\n      });\n    }\n\n    const goodDescriptor = {\n      entries: [\n        ...maxDynamicBufferBindings,\n        {\n          binding: maxDynamicBufferBindings.length,\n          visibility: GPUShaderStage.COMPUTE,\n          buffer: { type, hasDynamicOffset: false },\n        },\n      ],\n    };\n\n    // Control case\n    t.device.createBindGroupLayout(goodDescriptor);\n\n    // Dynamic buffers exceed maximum in a bind group layout.\n    const badDescriptor = clone(goodDescriptor);\n    badDescriptor.entries[maxDynamicBufferCount].buffer.hasDynamicOffset = true;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(badDescriptor);\n    });\n  });\n\n/**\n * One bind group layout will be filled with kPerStageBindingLimit[...] of the type |type|.\n * For each item in the array returned here, a case will be generated which tests a pipeline\n * layout with one extra bind group layout with one extra binding. That extra binding will have:\n *\n *   - If extraTypeSame, any of the binding types which counts toward the same limit as |type|.\n *     (i.e. 'storage-buffer' <-> 'readonly-storage-buffer').\n *   - Otherwise, an arbitrary other type.\n */\nfunction* pickExtraBindingTypesForPerStage(\n  entry: BGLEntry,\n  extraTypeSame: boolean\n): IterableIterator<BGLEntry> {\n  if (extraTypeSame) {\n    const info = bindingTypeInfo(entry);\n    for (const extra of allBindingEntries(false)) {\n      const extraInfo = bindingTypeInfo(extra);\n      if (info.perStageLimitClass.class === extraInfo.perStageLimitClass.class) {\n        yield extra;\n      }\n    }\n  } else {\n    return entry.sampler ? { texture: {} } : { sampler: {} };\n  }\n}\n\nconst kCasesForMaxResourcesPerStageTests = params()\n  .combine(poptions('maxedEntry', allBindingEntries(false)))\n  .combine(poptions('maxedVisibility', kShaderStages))\n  .filter(p => (bindingTypeInfo(p.maxedEntry).validStages & p.maxedVisibility) !== 0)\n  .expand(function* (p) {\n    yield* poptions('extraEntry', pickExtraBindingTypesForPerStage(p.maxedEntry, true));\n    yield* poptions('extraEntry', pickExtraBindingTypesForPerStage(p.maxedEntry, false));\n  })\n  .combine(poptions('extraVisibility', kShaderStages))\n  .filter(p => (bindingTypeInfo(p.extraEntry).validStages & p.extraVisibility) !== 0);\n\n// Should never fail unless kMaxBindingsPerBindGroup is exceeded, because the validation for\n// resources-of-type-per-stage is in pipeline layout creation.\ng.test('max_resources_per_stage,in_bind_group_layout')\n  .desc(\n    `TODO: describe\n\nTODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .params(kCasesForMaxResourcesPerStageTests)\n  .fn(async t => {\n    const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        ...maxedEntry,\n      });\n    }\n\n    const goodDescriptor = { entries: maxResourceBindings };\n\n    // Control\n    t.device.createBindGroupLayout(goodDescriptor);\n\n    const newDescriptor = clone(goodDescriptor);\n    newDescriptor.entries.push({\n      binding: maxedCount,\n      visibility: extraVisibility,\n      ...extraEntry,\n    });\n\n    const shouldError = maxedCount >= kMaxBindingsPerBindGroup;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(newDescriptor);\n    }, shouldError);\n  });\n\n// One pipeline layout can have a maximum number of each type of binding *per stage* (which is\n// different for each type). Test that the max works, then add one more binding of same-or-different\n// type and same-or-different visibility.\ng.test('max_resources_per_stage,in_pipeline_layout')\n  .params(kCasesForMaxResourcesPerStageTests)\n  .fn(async t => {\n    const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n    const extraTypeInfo = bindingTypeInfo(extraEntry);\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        ...maxedEntry,\n      });\n    }\n\n    const goodLayout = t.device.createBindGroupLayout({ entries: maxResourceBindings });\n\n    // Control\n    t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout] });\n\n    const extraLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: extraVisibility,\n          ...extraEntry,\n        },\n      ],\n    });\n\n    // Some binding types use the same limit, e.g. 'storage-buffer' and 'readonly-storage-buffer'.\n    const newBindingCountsTowardSamePerStageLimit =\n      (maxedVisibility & extraVisibility) !== 0 &&\n      maxedTypeInfo.perStageLimitClass.class === extraTypeInfo.perStageLimitClass.class;\n    const layoutExceedsPerStageLimit = newBindingCountsTowardSamePerStageLimit;\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout, extraLayout] });\n    }, layoutExceedsPerStageLimit);\n  });\n"],"file":"createBindGroupLayout.spec.js"}