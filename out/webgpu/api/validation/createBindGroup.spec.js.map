{"version":3,"sources":["../../../../src/webgpu/api/validation/createBindGroup.spec.ts"],"names":["description","poptions","params","makeTestGroup","unreachable","allBindingEntries","bindingTypeInfo","kBindableResources","kTextureUsages","sampledAndStorageBindingEntries","texBindingTypeInfo","GPUConst","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","fn","t","bindGroupLayout","device","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","buffer","type","goodDescriptor","resource","getStorageBuffer","layout","createBindGroup","badDescriptor","expectValidationError","combine","resourceType","entry","info","getBindingResource","resourceBindingMatches","unless","usage","TextureUsage","STORAGE","FRAGMENT","size","width","height","depthOrArrayLayers","format","sampleCount","createTexture","createView","shouldError","subcases","sampleType","texture","GPUTextureUsage","SAMPLED","mismatchedTextureFormats","mismatchedTextureFormat","desc","offset","_success","undefined","createBuffer","GPUBufferUsage","expand","minBindingSize","storageBuffer"],"mappings":"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","sourcesContent":["export const description = `\ncreateBindGroup validation tests.\n\nTODO: review existing tests, write descriptions, and make sure tests are complete.\n`;\n\nimport { poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { unreachable } from '../../../common/framework/util/util.js';\nimport {\n  allBindingEntries,\n  bindingTypeInfo,\n  kBindableResources,\n  kTextureUsages,\n  sampledAndStorageBindingEntries,\n  texBindingTypeInfo,\n} from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUTextureDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('binding_count_mismatch').fn(async t => {\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    entries: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }],\n  });\n\n  const goodDescriptor = {\n    entries: [{ binding: 0, resource: { buffer: t.getStorageBuffer() } }],\n    layout: bindGroupLayout,\n  };\n\n  // Control case\n  t.device.createBindGroup(goodDescriptor);\n\n  // Another binding is not expected.\n  const badDescriptor = {\n    entries: [\n      { binding: 0, resource: { buffer: t.getStorageBuffer() } },\n      // Another binding is added.\n      { binding: 1, resource: { buffer: t.getStorageBuffer() } },\n    ],\n    layout: bindGroupLayout,\n  };\n\n  t.expectValidationError(() => {\n    t.device.createBindGroup(badDescriptor);\n  });\n});\n\ng.test('binding_must_be_present_in_layout').fn(async t => {\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    entries: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }],\n  });\n\n  const goodDescriptor = {\n    entries: [{ binding: 0, resource: { buffer: t.getStorageBuffer() } }],\n    layout: bindGroupLayout,\n  };\n\n  // Control case\n  t.device.createBindGroup(goodDescriptor);\n\n  // Binding index 0 must be present.\n  const badDescriptor = {\n    entries: [{ binding: 1, resource: { buffer: t.getStorageBuffer() } }],\n    layout: bindGroupLayout,\n  };\n\n  t.expectValidationError(() => {\n    t.device.createBindGroup(badDescriptor);\n  });\n});\n\ng.test('buffer_binding_must_contain_exactly_one_buffer_of_its_type')\n  .params(\n    params()\n      .combine(poptions('resourceType', kBindableResources))\n      .combine(poptions('entry', allBindingEntries(false)))\n  )\n  .fn(t => {\n    const { resourceType, entry } = t.params;\n    const info = bindingTypeInfo(entry);\n\n    const layout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, ...entry }],\n    });\n\n    const resource = t.getBindingResource(resourceType);\n\n    const resourceBindingMatches = info.resource === resourceType;\n    t.expectValidationError(() => {\n      t.device.createBindGroup({ layout, entries: [{ binding: 0, resource }] });\n    }, !resourceBindingMatches);\n  });\n\ng.test('texture_binding_must_have_correct_usage')\n  .params(\n    params()\n      .combine(poptions('entry', sampledAndStorageBindingEntries(false)))\n      .combine(poptions('usage', kTextureUsages))\n      .unless(({ entry, usage }) => {\n        const info = texBindingTypeInfo(entry);\n        // Can't create the texture for this (usage=STORAGE and sampleCount=4), so skip.\n        return usage === GPUConst.TextureUsage.STORAGE && info.resource === 'sampledTexMS';\n      })\n  )\n  .fn(async t => {\n    const { entry, usage } = t.params;\n    const info = texBindingTypeInfo(entry);\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.FRAGMENT, ...entry }],\n    });\n\n    const descriptor = {\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm' as const,\n      usage,\n      sampleCount: info.resource === 'sampledTexMS' ? 4 : 1,\n    };\n    const resource = t.device.createTexture(descriptor).createView();\n\n    const shouldError = usage !== info.usage;\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource }],\n        layout: bindGroupLayout,\n      });\n    }, shouldError);\n  });\n\ng.test('texture_must_have_correct_component_type')\n  .subcases(() => poptions('sampleType', ['float', 'sint', 'uint'] as const))\n  .fn(async t => {\n    const { sampleType } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          texture: { sampleType },\n        },\n      ],\n    });\n\n    let format: GPUTextureFormat;\n    if (sampleType === 'float') {\n      format = 'r8unorm';\n    } else if (sampleType === 'sint') {\n      format = 'r8sint';\n    } else if (sampleType === 'uint') {\n      format = 'r8uint';\n    } else {\n      unreachable('Unexpected texture component type');\n    }\n\n    const goodDescriptor = {\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    // Control case\n    t.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource: t.device.createTexture(goodDescriptor).createView(),\n        },\n      ],\n      layout: bindGroupLayout,\n    });\n\n    function* mismatchedTextureFormats(): Iterable<GPUTextureFormat> {\n      if (sampleType !== 'float') {\n        yield 'r8unorm';\n      }\n      if (sampleType !== 'sint') {\n        yield 'r8sint';\n      }\n      if (sampleType !== 'uint') {\n        yield 'r8uint';\n      }\n    }\n\n    // Mismatched texture binding formats are not valid.\n    for (const mismatchedTextureFormat of mismatchedTextureFormats()) {\n      const badDescriptor: GPUTextureDescriptor = clone(goodDescriptor);\n      badDescriptor.format = mismatchedTextureFormat;\n\n      t.expectValidationError(() => {\n        t.device.createBindGroup({\n          entries: [{ binding: 0, resource: t.device.createTexture(badDescriptor).createView() }],\n          layout: bindGroupLayout,\n        });\n      });\n    }\n  });\n\n// TODO: Write test for all dimensions.\ng.test('texture_must_have_correct_dimension').fn(async t => {\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        texture: {},\n      },\n    ],\n  });\n\n  const goodDescriptor = {\n    size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n    format: 'rgba8unorm' as const,\n    usage: GPUTextureUsage.SAMPLED,\n  };\n\n  // Control case\n  t.device.createBindGroup({\n    entries: [{ binding: 0, resource: t.device.createTexture(goodDescriptor).createView() }],\n    layout: bindGroupLayout,\n  });\n\n  // Mismatched texture binding formats are not valid.\n  const badDescriptor = clone(goodDescriptor);\n  badDescriptor.size.depthOrArrayLayers = 2;\n\n  t.expectValidationError(() => {\n    t.device.createBindGroup({\n      entries: [{ binding: 0, resource: t.device.createTexture(badDescriptor).createView() }],\n      layout: bindGroupLayout,\n    });\n  });\n});\n\ng.test('buffer_offset_and_size_for_bind_groups_match')\n  .desc(\n    `TODO: describe\n\nTODO(#234): disallow zero-sized bindings`\n  )\n  .params([\n    { offset: 0, size: 512, _success: true }, // offset 0 is valid\n    { offset: 256, size: 256, _success: true }, // offset 256 (aligned) is valid\n\n    // Touching the end of the buffer\n    { offset: 0, size: 1024, _success: true },\n    { offset: 0, size: undefined, _success: true },\n    { offset: 256 * 3, size: 256, _success: true },\n    { offset: 256 * 3, size: undefined, _success: true },\n\n    // Zero-sized bindings\n    { offset: 0, size: 0, _success: true },\n    { offset: 256, size: 0, _success: true },\n    { offset: 1024, size: 0, _success: true },\n    { offset: 1024, size: undefined, _success: true },\n\n    // Unaligned buffer offset is invalid\n    { offset: 1, size: 256, _success: false },\n    { offset: 1, size: undefined, _success: false },\n    { offset: 128, size: 256, _success: false },\n    { offset: 255, size: 256, _success: false },\n\n    // Out-of-bounds\n    { offset: 256 * 5, size: 0, _success: false }, // offset is OOB\n    { offset: 0, size: 256 * 5, _success: false }, // size is OOB\n    { offset: 1024, size: 1, _success: false }, // offset+size is OOB\n  ])\n  .fn(async t => {\n    const { offset, size, _success } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }],\n    });\n\n    const buffer = t.device.createBuffer({\n      size: 1024,\n      usage: GPUBufferUsage.STORAGE,\n    });\n\n    const descriptor = {\n      entries: [\n        {\n          binding: 0,\n          resource: { buffer, offset, size },\n        },\n      ],\n      layout: bindGroupLayout,\n    };\n\n    if (_success) {\n      // Control case\n      t.device.createBindGroup(descriptor);\n    } else {\n      // Buffer offset and/or size don't match in bind groups.\n      t.expectValidationError(() => {\n        t.device.createBindGroup(descriptor);\n      });\n    }\n  });\n\ng.test('minBindingSize')\n  .desc('Tests that minBindingSize is correctly enforced.')\n  .subcases(() =>\n    params()\n      .combine(poptions('minBindingSize', [undefined, 4, 256]))\n      .expand(({ minBindingSize }) =>\n        poptions(\n          'size',\n          minBindingSize !== undefined\n            ? [minBindingSize - 1, minBindingSize, minBindingSize + 1]\n            : [4, 256]\n        )\n      )\n  )\n  .fn(t => {\n    const { size, minBindingSize } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          buffer: {\n            type: 'storage',\n            minBindingSize,\n          },\n        },\n      ],\n    });\n\n    const storageBuffer = t.device.createBuffer({\n      size,\n      usage: GPUBufferUsage.STORAGE,\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        layout: bindGroupLayout,\n        entries: [\n          {\n            binding: 0,\n            resource: {\n              buffer: storageBuffer,\n            },\n          },\n        ],\n      });\n    }, minBindingSize !== undefined && size < minBindingSize);\n  });\n"],"file":"createBindGroup.spec.js"}