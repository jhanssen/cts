{"version":3,"sources":["../../../../../src/webgpu/api/validation/image_copy/layout_related.spec.ts"],"names":["description","params","poptions","makeTestGroup","kUncompressedTextureFormatInfo","kSizedTextureFormats","kSizedTextureFormatInfo","align","bytesInACompleteRow","dataBytesForCopyOrOverestimate","dataBytesForCopyOrFail","kImageCopyTypes","ImageCopyTest","texelBlockAlignmentTestExpanderForOffset","texelBlockAlignmentTestExpanderForRowsPerImage","formatCopyableWithMethod","g","test","cases","subcases","combine","undefined","fn","t","rowsPerImage","copyHeightInBlocks","copyDepth","method","format","copyHeight","blockHeight","texture","device","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","COPY_DST","layout","bytesPerRow","copySize","minDataSizeOrOverestimate","copyValid","testRun","dataSize","success","desc","_success","filter","bytesPerRowPadding","rowsPerImagePaddingInBlocks","copyWidthInBlocks","offsetInBlocks","info","selectDeviceOrSkipTestCase","extension","bytesPerRowAlignment","copyWidth","blockWidth","offset","bytesPerBlock","minDataSize","createAlignedTexture","blocksPerRow","additionalPaddingPerRow","dataSizeInBlocks"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAG,EAApB,CAEP,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,gDAAjC;AACA,SAASC,aAAT,QAA8B,4CAA9B;AACA;AACEC,8BADF;AAEEC,oBAFF;AAGEC,uBAHF;AAIO,6BAJP;AAKA,SAASC,KAAT,QAAsB,uBAAtB;AACA;AACEC,mBADF;AAEEC,8BAFF;AAGEC,sBAHF;AAIEC,eAJF;AAKO,qCALP;;AAOA;AACEC,aADF;AAEEC,wCAFF;AAGEC,8CAHF;AAIEC,wBAJF;AAKO,iBALP;;AAOA,OAAO,MAAMC,CAAC,GAAGb,aAAa,CAACS,aAAD,CAAvB;;AAEPI,CAAC,CAACC,IAAF,CAAO,yBAAP;AACGC,KADH,CACShB,QAAQ,CAAC,QAAD,EAAWS,eAAX,CADjB;AAEGQ,QAFH,CAEY;AACRlB,MAAM;AACHmB,OADH,CACWlB,QAAQ,CAAC,cAAD,EAAiB,CAACmB,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,IAArB,CAAjB,CADnB;AAEGD,OAFH,CAEWlB,QAAQ,CAAC,oBAAD,EAAuB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvB,CAFnB;AAGGkB,OAHH,CAGWlB,QAAQ,CAAC,WAAD,EAAc,CAAC,CAAD,EAAI,CAAJ,CAAd,CAHnB,CAHJ;;AAQGoB,EARH,CAQM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,YAAF,EAAgBC,kBAAhB,EAAoCC,SAApC,EAA+CC,MAA/C,KAA0DJ,CAAC,CAACtB,MAAlE;;AAEA,QAAM2B,MAAM,GAAG,YAAf;AACA,QAAMC,UAAU,GAAGJ,kBAAkB,GAAGrB,8BAA8B,CAACwB,MAAD,CAA9B,CAAuCE,WAA/E;;AAEA,QAAMC,OAAO,GAAGR,CAAC,CAACS,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAD+B;AAErCT,IAAAA,MAFqC;AAGrCU,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAHb,EAAvB,CAAhB;;;AAMA,QAAMC,MAAM,GAAG,EAAEC,WAAW,EAAE,IAAf,EAAqBnB,YAArB,EAAf;AACA,QAAMoB,QAAQ,GAAG,EAAET,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAEP,UAApB,EAAgCQ,kBAAkB,EAAEX,SAApD,EAAjB;AACA,QAAM,EAAEmB,yBAAF,EAA6BC,SAA7B,KAA2CrC,8BAA8B,CAAC;AAC9EiC,IAAAA,MAD8E;AAE9Ed,IAAAA,MAF8E;AAG9EgB,IAAAA,QAH8E;AAI9EjB,IAAAA,MAJ8E,EAAD,CAA/E;;;AAOAJ,EAAAA,CAAC,CAACwB,OAAF,CAAU,EAAEhB,OAAF,EAAV,EAAuBW,MAAvB,EAA+BE,QAA/B,EAAyC;AACvCI,IAAAA,QAAQ,EAAEH,yBAD6B;AAEvClB,IAAAA,MAFuC;AAGvCsB,IAAAA,OAAO,EAAEH,SAH8B,EAAzC;;AAKD,CAlCH;;AAoCA9B,CAAC,CAACC,IAAF,CAAO,wBAAP;AACGiC,IADH,CACS,wEADT;AAEGhC,KAFH,CAEShB,QAAQ,CAAC,QAAD,EAAWS,eAAX,CAFjB;AAGGQ,QAHH,CAGY,MAAM;AACd,EAAEwB,WAAW,EAAE,KAAK,EAApB,EAAwBnB,YAAY,EAAE,KAAK,EAA3C,EAA+Ca,kBAAkB,EAAE,CAAnE,EAAsEc,QAAQ,EAAE,IAAhF,EADc,EAC0E;AACxF,EAAER,WAAW,EAAE,KAAK,EAApB,EAAwBnB,YAAY,EAAE,KAAK,EAA3C,EAA+Ca,kBAAkB,EAAE,EAAnE,EAAuEc,QAAQ,EAAE,KAAjF,EAFc,CAE4E;AAF5E,CAHlB;AAOG7B,EAPH,CAOM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEI,MAAF,EAAUgB,WAAV,EAAuBnB,YAAvB,EAAqCa,kBAArC,EAAyDc,QAAzD,KAAsE5B,CAAC,CAACtB,MAA9E;;AAEA,QAAM8B,OAAO,GAAGR,CAAC,CAACS,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAOG,kBAAP,CAD+B;AAErCT,IAAAA,MAAM,EAAE,YAF6B;AAGrCU,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAHb,EAAvB,CAAhB;;;AAMAlB,EAAAA,CAAC,CAACwB,OAAF;AACE,IAAEhB,OAAF,EADF;AAEE,IAAEY,WAAF,EAAenB,YAAf,EAFF;AAGE,IAAEW,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAvB,EAHF;AAIE;AACEW,IAAAA,QAAQ,EAAE,KADZ;AAEErB,IAAAA,MAFF;AAGEsB,IAAAA,OAAO,EAAEE,QAHX,EAJF;;;AAUD,CA1BH;;AA4BAnC,CAAC,CAACC,IAAF,CAAO,wBAAP;AACGiC,IADH;AAEK;AACL;AACA;AACA;AACA,GANA;;AAQGhC,KARH;AASIjB,MAAM;AACHmB,OADH,CACWlB,QAAQ,CAAC,QAAD,EAAWS,eAAX,CADnB;AAEGS,OAFH,CAEWlB,QAAQ,CAAC,QAAD,EAAWG,oBAAX,CAFnB;AAGG+C,MAHH,CAGUrC,wBAHV,CATJ;;AAcGI,QAdH,CAcY;AACRlB,MAAM;AACHmB,OADH,CACW;AACP,EAAEiC,kBAAkB,EAAE,CAAtB,EAAyBC,2BAA2B,EAAE,CAAtD,EADO,EACoD;AAC3D,EAAED,kBAAkB,EAAE,CAAtB,EAAyBC,2BAA2B,EAAE,CAAtD,EAFO,EAEoD;AAC3D,EAAED,kBAAkB,EAAE,CAAtB,EAAyBC,2BAA2B,EAAE,CAAtD,EAHO,EAGoD;AAC3D,EAAED,kBAAkB,EAAE,EAAtB,EAA0BC,2BAA2B,EAAE,EAAvD,EAJO,CAIsD;AAJtD,CADX;AAOGlC,OAPH,CAOW;AACP,EAAEmC,iBAAiB,EAAE,CAArB,EAAwB9B,kBAAkB,EAAE,CAA5C,EAA+CC,SAAS,EAAE,CAA1D,EAA6D8B,cAAc,EAAE,CAA7E,EADO,EAC2E;AAClF,EAAED,iBAAiB,EAAE,CAArB,EAAwB9B,kBAAkB,EAAE,CAA5C,EAA+CC,SAAS,EAAE,CAA1D,EAA6D8B,cAAc,EAAE,EAA7E,EAFO,EAE4E;AACnF,EAAED,iBAAiB,EAAE,GAArB,EAA0B9B,kBAAkB,EAAE,CAA9C,EAAiDC,SAAS,EAAE,CAA5D,EAA+D8B,cAAc,EAAE,CAA/E,EAHO,EAG6E;AACpF,EAAED,iBAAiB,EAAE,CAArB,EAAwB9B,kBAAkB,EAAE,CAA5C,EAA+CC,SAAS,EAAE,CAA1D,EAA6D8B,cAAc,EAAE,CAA7E,EAJO,EAI2E;AAClF,EAAED,iBAAiB,EAAE,CAArB,EAAwB9B,kBAAkB,EAAE,CAA5C,EAA+CC,SAAS,EAAE,CAA1D,EAA6D8B,cAAc,EAAE,CAA7E,EALO,EAK2E;AAClF,EAAED,iBAAiB,EAAE,CAArB,EAAwB9B,kBAAkB,EAAE,CAA5C,EAA+CC,SAAS,EAAE,CAA1D,EAA6D8B,cAAc,EAAE,EAA7E,EANO,EAM4E;AACnF,EAAED,iBAAiB,EAAE,CAArB,EAAwB9B,kBAAkB,EAAE,CAA5C,EAA+CC,SAAS,EAAE,CAA1D,EAA6D8B,cAAc,EAAE,CAA7E,EAPO,EAO2E;AAClF,EAAED,iBAAiB,EAAE,CAArB,EAAwB9B,kBAAkB,EAAE,CAA5C,EAA+CC,SAAS,EAAE,CAA1D,EAA6D8B,cAAc,EAAE,EAA7E,EARO,EAQ4E;AACnF,EAAED,iBAAiB,EAAE,CAArB,EAAwB9B,kBAAkB,EAAE,CAA5C,EAA+CC,SAAS,EAAE,CAA1D,EAA6D8B,cAAc,EAAE,CAA7E,EATO,EAS2E;AAClF,EAAED,iBAAiB,EAAE,CAArB,EAAwB9B,kBAAkB,EAAE,CAA5C,EAA+CC,SAAS,EAAE,CAA1D,EAA6D8B,cAAc,EAAE,CAA7E,EAVO,CAU2E;AAV3E,CAPX,CAfJ;;AAmCGlC,EAnCH,CAmCM,MAAMC,CAAN,IAAW;AACb,QAAM;AACJiC,IAAAA,cADI;AAEJH,IAAAA,kBAFI;AAGJC,IAAAA,2BAHI;AAIJC,IAAAA,iBAJI;AAKJ9B,IAAAA,kBALI;AAMJC,IAAAA,SANI;AAOJE,IAAAA,MAPI;AAQJD,IAAAA,MARI;AASFJ,EAAAA,CAAC,CAACtB,MATN;AAUA,QAAMwD,IAAI,GAAGnD,uBAAuB,CAACsB,MAAD,CAApC;AACA,QAAML,CAAC,CAACmC,0BAAF,CAA6BD,IAAI,CAACE,SAAlC,CAAN;;AAEA;AACA;AACA;AACA,QAAMC,oBAAoB,GAAGjC,MAAM,KAAK,cAAX,GAA4B,CAA5B,GAAgC,GAA7D;;AAEA,QAAMkC,SAAS,GAAGN,iBAAiB,GAAGE,IAAI,CAACK,UAA3C;AACA,QAAMjC,UAAU,GAAGJ,kBAAkB,GAAGgC,IAAI,CAAC3B,WAA7C;AACA,QAAMiC,MAAM,GAAGP,cAAc,GAAGC,IAAI,CAACO,aAArC;AACA,QAAMxC,YAAY,GAAGK,UAAU,GAAGyB,2BAA2B,GAAGG,IAAI,CAAC3B,WAArE;AACA,QAAMa,WAAW;AACfpC,EAAAA,KAAK,CAACC,mBAAmB,CAACqD,SAAD,EAAYjC,MAAZ,CAApB,EAAyCgC,oBAAzC,CAAL;AACAP,EAAAA,kBAAkB,GAAGO,oBAFvB;AAGA,QAAMhB,QAAQ,GAAG,EAAET,KAAK,EAAE0B,SAAT,EAAoBzB,MAAM,EAAEP,UAA5B,EAAwCQ,kBAAkB,EAAEX,SAA5D,EAAjB;;AAEA,QAAMgB,MAAM,GAAG,EAAEqB,MAAF,EAAUpB,WAAV,EAAuBnB,YAAvB,EAAf;AACA,QAAMyC,WAAW,GAAGvD,sBAAsB,CAAC,EAAEgC,MAAF,EAAUd,MAAV,EAAkBgB,QAAlB,EAA4BjB,MAA5B,EAAD,CAA1C;;AAEA,QAAMI,OAAO,GAAGR,CAAC,CAAC2C,oBAAF,CAAuBtC,MAAvB,EAA+BgB,QAA/B,CAAhB;;AAEArB,EAAAA,CAAC,CAACwB,OAAF,CAAU,EAAEhB,OAAF,EAAV,EAAuB,EAAEgC,MAAF,EAAUpB,WAAV,EAAuBnB,YAAvB,EAAvB,EAA8DoB,QAA9D,EAAwE;AACtEI,IAAAA,QAAQ,EAAEiB,WAD4D;AAEtEtC,IAAAA,MAFsE;AAGtEsB,IAAAA,OAAO,EAAE,IAH6D,EAAxE;;;AAMA,MAAIgB,WAAW,GAAG,CAAlB,EAAqB;AACnB1C,IAAAA,CAAC,CAACwB,OAAF,CAAU,EAAEhB,OAAF,EAAV,EAAuB,EAAEgC,MAAF,EAAUpB,WAAV,EAAuBnB,YAAvB,EAAvB,EAA8DoB,QAA9D,EAAwE;AACtEI,MAAAA,QAAQ,EAAEiB,WAAW,GAAG,CAD8C;AAEtEtC,MAAAA,MAFsE;AAGtEsB,MAAAA,OAAO,EAAE,KAH6D,EAAxE;;AAKD;AACF,CAjFH;;AAmFAjC,CAAC,CAACC,IAAF,CAAO,0BAAP;AACGiC,IADH,CACS,yFADT;AAEGhC,KAFH;AAGIjB,MAAM;AACHmB,OADH,CACWlB,QAAQ,CAAC,QAAD,EAAWS,eAAX,CADnB;AAEGS,OAFH,CAEWlB,QAAQ,CAAC,QAAD,EAAWG,oBAAX,CAFnB;AAGG+C,MAHH,CAGUrC,wBAHV,CAHJ;;AAQGI,QARH,CAQYL,8CARZ;AASGQ,EATH,CASM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,YAAF,EAAgBI,MAAhB,EAAwBD,MAAxB,KAAmCJ,CAAC,CAACtB,MAA3C;AACA,QAAMwD,IAAI,GAAGnD,uBAAuB,CAACsB,MAAD,CAApC;AACA,QAAML,CAAC,CAACmC,0BAAF,CAA6BD,IAAI,CAACE,SAAlC,CAAN;;AAEA,QAAMzB,IAAI,GAAG,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAAb;;AAEA,QAAMN,OAAO,GAAGR,CAAC,CAAC2C,oBAAF,CAAuBtC,MAAvB,EAA+BM,IAA/B,CAAhB;;AAEAX,EAAAA,CAAC,CAACwB,OAAF,CAAU,EAAEhB,OAAF,EAAV,EAAuB,EAAEY,WAAW,EAAE,CAAf,EAAkBnB,YAAlB,EAAvB,EAAyDU,IAAzD,EAA+D;AAC7Dc,IAAAA,QAAQ,EAAE,CADmD;AAE7DrB,IAAAA,MAF6D;AAG7DsB,IAAAA,OAAO,EAAE,IAHoD,EAA/D;;AAKD,CAvBH;;AAyBAjC,CAAC,CAACC,IAAF,CAAO,iCAAP;AACGC,KADH;AAEIjB,MAAM;AACHmB,OADH,CACWlB,QAAQ,CAAC,QAAD,EAAWS,eAAX,CADnB;AAEGS,OAFH,CAEWlB,QAAQ,CAAC,QAAD,EAAWG,oBAAX,CAFnB;AAGG+C,MAHH,CAGUrC,wBAHV,CAFJ;;AAOGI,QAPH,CAOYN,wCAPZ;AAQGS,EARH,CAQM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEK,MAAF,EAAUmC,MAAV,EAAkBpC,MAAlB,KAA6BJ,CAAC,CAACtB,MAArC;AACA,QAAMwD,IAAI,GAAGnD,uBAAuB,CAACsB,MAAD,CAApC;AACA,QAAML,CAAC,CAACmC,0BAAF,CAA6BD,IAAI,CAACE,SAAlC,CAAN;;AAEA,QAAMzB,IAAI,GAAG,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAAb;;AAEA,QAAMN,OAAO,GAAGR,CAAC,CAAC2C,oBAAF,CAAuBtC,MAAvB,EAA+BM,IAA/B,CAAhB;;AAEA,QAAMe,OAAO;AACXtB,EAAAA,MAAM,KAAK,cAAX,IAA6BoC,MAAM,GAAGzD,uBAAuB,CAACsB,MAAD,CAAvB,CAAgCoC,aAAzC,KAA2D,CAD1F;;AAGAzC,EAAAA,CAAC,CAACwB,OAAF,CAAU,EAAEhB,OAAF,EAAV,EAAuB,EAAEgC,MAAF,EAAUpB,WAAW,EAAE,CAAvB,EAAvB,EAAmDT,IAAnD,EAAyD,EAAEc,QAAQ,EAAEe,MAAZ,EAAoBpC,MAApB,EAA4BsB,OAA5B,EAAzD;AACD,CArBH;;AAuBAjC,CAAC,CAACC,IAAF,CAAO,wBAAP;AACGC,KADH;AAEIjB,MAAM;AACHmB,OADH,CACWlB,QAAQ,CAAC,QAAD,EAAWS,eAAX,CADnB;AAEGS,OAFH,CAEWlB,QAAQ,CAAC,QAAD,EAAWG,oBAAX,CAFnB;AAGG+C,MAHH,CAGUrC,wBAHV,CAFJ;;AAOGI,QAPH,CAOY;AACRlB,MAAM;AACHmB,OADH,CACW;AACP,EAAE+C,YAAY,EAAE,CAAhB,EAAmBC,uBAAuB,EAAE,CAA5C,EAA+Cb,iBAAiB,EAAE,CAAlE,EADO,EACgE;AACvE,EAAEY,YAAY,EAAE,CAAhB,EAAmBC,uBAAuB,EAAE,CAA5C,EAA+Cb,iBAAiB,EAAE,CAAlE,EAFO,EAEgE;AACvE,EAAEY,YAAY,EAAE,CAAhB,EAAmBC,uBAAuB,EAAE,CAA5C,EAA+Cb,iBAAiB,EAAE,CAAlE,EAHO,EAGgE;AACvE,EAAEY,YAAY,EAAE,CAAhB,EAAmBC,uBAAuB,EAAE,CAA5C,EAA+Cb,iBAAiB,EAAE,CAAlE,EAJO,CAIgE;AAJhE,CADX;AAOGnC,OAPH,CAOW;AACP,EAAEK,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,CAApC,EADO,EACkC;AACzC,EAAED,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,CAApC,EAFO,EAEkC;AACzC,EAAED,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,CAApC,EAHO,EAGkC;AACzC,EAAED,kBAAkB,EAAE,CAAtB,EAAyBC,SAAS,EAAE,CAApC,EAJO,CAIkC;AAJlC,CAPX,CARJ;;AAsBGJ,EAtBH,CAsBM,MAAMC,CAAN,IAAW;AACb,QAAM;AACJ4C,IAAAA,YADI;AAEJC,IAAAA,uBAFI;AAGJb,IAAAA,iBAHI;AAIJ9B,IAAAA,kBAJI;AAKJC,IAAAA,SALI;AAMJE,IAAAA,MANI;AAOJD,IAAAA,MAPI;AAQFJ,EAAAA,CAAC,CAACtB,MARN;AASA,QAAMwD,IAAI,GAAGnD,uBAAuB,CAACsB,MAAD,CAApC;AACA,QAAML,CAAC,CAACmC,0BAAF,CAA6BD,IAAI,CAACE,SAAlC,CAAN;;AAEA;AACA,QAAMC,oBAAoB,GAAGjC,MAAM,KAAK,cAAX,GAA4B,CAA5B,GAAgC,GAA7D;;AAEA,QAAMkC,SAAS,GAAGtD,KAAK,CAACgD,iBAAiB,GAAGE,IAAI,CAACK,UAA1B,EAAsCF,oBAAtC,CAAvB;AACA,QAAM/B,UAAU,GAAGJ,kBAAkB,GAAGgC,IAAI,CAAC3B,WAA7C;AACA,QAAMa,WAAW,GAAGpC,KAAK;AACvB4D,EAAAA,YAAY,GAAGV,IAAI,CAACO,aAApB,GAAoCI,uBADb;AAEvBR,EAAAA,oBAFuB,CAAzB;;AAIA,QAAMhB,QAAQ,GAAG,EAAET,KAAK,EAAE0B,SAAT,EAAoBzB,MAAM,EAAEP,UAA5B,EAAwCQ,kBAAkB,EAAEX,SAA5D,EAAjB;;AAEA,QAAMK,OAAO,GAAGR,CAAC,CAAC2C,oBAAF,CAAuBtC,MAAvB,EAA+B;AAC7CO,IAAAA,KAAK,EAAE0B,SADsC;AAE7C;AACAzB,IAAAA,MAAM,EAAEP,UAAU,IAAI4B,IAAI,CAAC3B,WAHkB;AAI7CO,IAAAA,kBAAkB,EAAEX,SAAS,IAAI,CAJY,EAA/B,CAAhB;;;AAOA,QAAMgB,MAAM,GAAG,EAAEC,WAAF,EAAenB,YAAY,EAAEK,UAA7B,EAAf;AACA,QAAM,EAAEgB,yBAAF,EAA6BC,SAA7B,KAA2CrC,8BAA8B,CAAC;AAC9EiC,IAAAA,MAD8E;AAE9Ed,IAAAA,MAF8E;AAG9EgB,IAAAA,QAH8E;AAI9EjB,IAAAA,MAJ8E,EAAD,CAA/E;;;AAOAJ,EAAAA,CAAC,CAACwB,OAAF,CAAU,EAAEhB,OAAF,EAAV,EAAuBW,MAAvB,EAA+BE,QAA/B,EAAyC;AACvCI,IAAAA,QAAQ,EAAEH,yBAD6B;AAEvClB,IAAAA,MAFuC;AAGvCsB,IAAAA,OAAO,EAAEH,SAH8B,EAAzC;;AAKD,CAlEH;;AAoEA9B,CAAC,CAACC,IAAF,CAAO,iBAAP;AACGC,KADH,CACShB,QAAQ,CAAC,QAAD,EAAWS,eAAX,CADjB;AAEGQ,QAFH,CAEY;AACRlB,MAAM;AACHmB,OADH,CACWlB,QAAQ,CAAC,gBAAD,EAAmB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB,CADnB;AAEGkB,OAFH,CAEWlB,QAAQ,CAAC,kBAAD,EAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAArB,CAFnB,CAHJ;;AAOGoB,EAPH,CAOM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEiC,cAAF,EAAkBa,gBAAlB,EAAoC1C,MAApC,KAA+CJ,CAAC,CAACtB,MAAvD;;AAEA,QAAM2B,MAAM,GAAG,YAAf;AACA,QAAM6B,IAAI,GAAGnD,uBAAuB,CAACsB,MAAD,CAApC;AACA,QAAMmC,MAAM,GAAGP,cAAc,GAAGC,IAAI,CAACO,aAArC;AACA,QAAMhB,QAAQ,GAAGqB,gBAAgB,GAAGZ,IAAI,CAACO,aAAzC;;AAEA,QAAMjC,OAAO,GAAGR,CAAC,CAACS,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAD+B;AAErCT,IAAAA,MAFqC;AAGrCU,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAHb,EAAvB,CAAhB;;;AAMA,QAAMQ,OAAO,GAAGc,MAAM,IAAIf,QAA1B;;AAEAzB,EAAAA,CAAC,CAACwB,OAAF;AACE,IAAEhB,OAAF,EADF;AAEE,IAAEgC,MAAF,EAAUpB,WAAW,EAAE,CAAvB,EAFF;AAGE,IAAER,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAHF;AAIE,IAAEW,QAAF,EAAYrB,MAAZ,EAAoBsB,OAApB,EAJF;;AAMD,CA7BH","sourcesContent":["export const description = '';\n\nimport { params, poptions } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  kUncompressedTextureFormatInfo,\n  kSizedTextureFormats,\n  kSizedTextureFormatInfo,\n} from '../../../capability_info.js';\nimport { align } from '../../../util/math.js';\nimport {\n  bytesInACompleteRow,\n  dataBytesForCopyOrOverestimate,\n  dataBytesForCopyOrFail,\n  kImageCopyTypes,\n} from '../../../util/texture/image_copy.js';\n\nimport {\n  ImageCopyTest,\n  texelBlockAlignmentTestExpanderForOffset,\n  texelBlockAlignmentTestExpanderForRowsPerImage,\n  formatCopyableWithMethod,\n} from './image_copy.js';\n\nexport const g = makeTestGroup(ImageCopyTest);\n\ng.test('bound_on_rows_per_image')\n  .cases(poptions('method', kImageCopyTypes))\n  .subcases(() =>\n    params()\n      .combine(poptions('rowsPerImage', [undefined, 0, 1, 2, 1024]))\n      .combine(poptions('copyHeightInBlocks', [0, 1, 2]))\n      .combine(poptions('copyDepth', [1, 3]))\n  )\n  .fn(async t => {\n    const { rowsPerImage, copyHeightInBlocks, copyDepth, method } = t.params;\n\n    const format = 'rgba8unorm';\n    const copyHeight = copyHeightInBlocks * kUncompressedTextureFormatInfo[format].blockHeight;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 3 },\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const layout = { bytesPerRow: 1024, rowsPerImage };\n    const copySize = { width: 0, height: copyHeight, depthOrArrayLayers: copyDepth };\n    const { minDataSizeOrOverestimate, copyValid } = dataBytesForCopyOrOverestimate({\n      layout,\n      format,\n      copySize,\n      method,\n    });\n\n    t.testRun({ texture }, layout, copySize, {\n      dataSize: minDataSizeOrOverestimate,\n      method,\n      success: copyValid,\n    });\n  });\n\ng.test('copy_end_overflows_u64')\n  .desc(`Test what happens when offset+requiredBytesInCopy overflows GPUSize64.`)\n  .cases(poptions('method', kImageCopyTypes))\n  .subcases(() => [\n    { bytesPerRow: 2 ** 31, rowsPerImage: 2 ** 31, depthOrArrayLayers: 1, _success: true }, // success case\n    { bytesPerRow: 2 ** 31, rowsPerImage: 2 ** 31, depthOrArrayLayers: 16, _success: false }, // bytesPerRow * rowsPerImage * (depthOrArrayLayers - 1) overflows.\n  ])\n  .fn(async t => {\n    const { method, bytesPerRow, rowsPerImage, depthOrArrayLayers, _success } = t.params;\n\n    const texture = t.device.createTexture({\n      size: [1, 1, depthOrArrayLayers],\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    t.testRun(\n      { texture },\n      { bytesPerRow, rowsPerImage },\n      { width: 1, height: 1, depthOrArrayLayers },\n      {\n        dataSize: 10000,\n        method,\n        success: _success,\n      }\n    );\n  });\n\ng.test('required_bytes_in_copy')\n  .desc(\n    `Test that the min data size condition (requiredBytesInCopy) is checked correctly.\n\n  - Exact requiredBytesInCopy should succeed.\n  - requiredBytesInCopy - 1 should fail.\n  `\n  )\n  .cases(\n    params()\n      .combine(poptions('method', kImageCopyTypes))\n      .combine(poptions('format', kSizedTextureFormats))\n      .filter(formatCopyableWithMethod)\n  )\n  .subcases(() =>\n    params()\n      .combine([\n        { bytesPerRowPadding: 0, rowsPerImagePaddingInBlocks: 0 }, // no padding\n        { bytesPerRowPadding: 0, rowsPerImagePaddingInBlocks: 6 }, // rowsPerImage padding\n        { bytesPerRowPadding: 6, rowsPerImagePaddingInBlocks: 0 }, // bytesPerRow padding\n        { bytesPerRowPadding: 15, rowsPerImagePaddingInBlocks: 17 }, // both paddings\n      ])\n      .combine([\n        { copyWidthInBlocks: 3, copyHeightInBlocks: 4, copyDepth: 5, offsetInBlocks: 0 }, // standard copy\n        { copyWidthInBlocks: 5, copyHeightInBlocks: 4, copyDepth: 3, offsetInBlocks: 11 }, // standard copy, offset > 0\n        { copyWidthInBlocks: 256, copyHeightInBlocks: 3, copyDepth: 2, offsetInBlocks: 0 }, // copyWidth is 256-aligned\n        { copyWidthInBlocks: 0, copyHeightInBlocks: 4, copyDepth: 5, offsetInBlocks: 0 }, // empty copy because of width\n        { copyWidthInBlocks: 3, copyHeightInBlocks: 0, copyDepth: 5, offsetInBlocks: 0 }, // empty copy because of height\n        { copyWidthInBlocks: 3, copyHeightInBlocks: 4, copyDepth: 0, offsetInBlocks: 13 }, // empty copy because of depth, offset > 0\n        { copyWidthInBlocks: 1, copyHeightInBlocks: 4, copyDepth: 5, offsetInBlocks: 0 }, // copyWidth = 1\n        { copyWidthInBlocks: 3, copyHeightInBlocks: 1, copyDepth: 5, offsetInBlocks: 15 }, // copyHeight = 1, offset > 0\n        { copyWidthInBlocks: 5, copyHeightInBlocks: 4, copyDepth: 1, offsetInBlocks: 0 }, // copyDepth = 1\n        { copyWidthInBlocks: 7, copyHeightInBlocks: 1, copyDepth: 1, offsetInBlocks: 0 }, // copyHeight = 1 and copyDepth = 1\n      ])\n  )\n  .fn(async t => {\n    const {\n      offsetInBlocks,\n      bytesPerRowPadding,\n      rowsPerImagePaddingInBlocks,\n      copyWidthInBlocks,\n      copyHeightInBlocks,\n      copyDepth,\n      format,\n      method,\n    } = t.params;\n    const info = kSizedTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    // In the CopyB2T and CopyT2B cases we need to have bytesPerRow 256-aligned,\n    // to make this happen we align the bytesInACompleteRow value and multiply\n    // bytesPerRowPadding by 256.\n    const bytesPerRowAlignment = method === 'WriteTexture' ? 1 : 256;\n\n    const copyWidth = copyWidthInBlocks * info.blockWidth;\n    const copyHeight = copyHeightInBlocks * info.blockHeight;\n    const offset = offsetInBlocks * info.bytesPerBlock;\n    const rowsPerImage = copyHeight + rowsPerImagePaddingInBlocks * info.blockHeight;\n    const bytesPerRow =\n      align(bytesInACompleteRow(copyWidth, format), bytesPerRowAlignment) +\n      bytesPerRowPadding * bytesPerRowAlignment;\n    const copySize = { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth };\n\n    const layout = { offset, bytesPerRow, rowsPerImage };\n    const minDataSize = dataBytesForCopyOrFail({ layout, format, copySize, method });\n\n    const texture = t.createAlignedTexture(format, copySize);\n\n    t.testRun({ texture }, { offset, bytesPerRow, rowsPerImage }, copySize, {\n      dataSize: minDataSize,\n      method,\n      success: true,\n    });\n\n    if (minDataSize > 0) {\n      t.testRun({ texture }, { offset, bytesPerRow, rowsPerImage }, copySize, {\n        dataSize: minDataSize - 1,\n        method,\n        success: false,\n      });\n    }\n  });\n\ng.test('rows_per_image_alignment')\n  .desc(`rowsPerImage is measured in multiples of block height, so has no alignment constraints.`)\n  .cases(\n    params()\n      .combine(poptions('method', kImageCopyTypes))\n      .combine(poptions('format', kSizedTextureFormats))\n      .filter(formatCopyableWithMethod)\n  )\n  .subcases(texelBlockAlignmentTestExpanderForRowsPerImage)\n  .fn(async t => {\n    const { rowsPerImage, format, method } = t.params;\n    const info = kSizedTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    const size = { width: 0, height: 0, depthOrArrayLayers: 0 };\n\n    const texture = t.createAlignedTexture(format, size);\n\n    t.testRun({ texture }, { bytesPerRow: 0, rowsPerImage }, size, {\n      dataSize: 1,\n      method,\n      success: true,\n    });\n  });\n\ng.test('texel_block_alignment_on_offset')\n  .cases(\n    params()\n      .combine(poptions('method', kImageCopyTypes))\n      .combine(poptions('format', kSizedTextureFormats))\n      .filter(formatCopyableWithMethod)\n  )\n  .subcases(texelBlockAlignmentTestExpanderForOffset)\n  .fn(async t => {\n    const { format, offset, method } = t.params;\n    const info = kSizedTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    const size = { width: 0, height: 0, depthOrArrayLayers: 0 };\n\n    const texture = t.createAlignedTexture(format, size);\n\n    const success =\n      method === 'WriteTexture' || offset % kSizedTextureFormatInfo[format].bytesPerBlock === 0;\n\n    t.testRun({ texture }, { offset, bytesPerRow: 0 }, size, { dataSize: offset, method, success });\n  });\n\ng.test('bound_on_bytes_per_row')\n  .cases(\n    params()\n      .combine(poptions('method', kImageCopyTypes))\n      .combine(poptions('format', kSizedTextureFormats))\n      .filter(formatCopyableWithMethod)\n  )\n  .subcases(() =>\n    params()\n      .combine([\n        { blocksPerRow: 2, additionalPaddingPerRow: 0, copyWidthInBlocks: 2 }, // success\n        { blocksPerRow: 2, additionalPaddingPerRow: 5, copyWidthInBlocks: 3 }, // success if bytesPerBlock <= 5\n        { blocksPerRow: 1, additionalPaddingPerRow: 0, copyWidthInBlocks: 2 }, // failure, bytesPerRow > 0\n        { blocksPerRow: 0, additionalPaddingPerRow: 0, copyWidthInBlocks: 1 }, // failure, bytesPerRow = 0\n      ])\n      .combine([\n        { copyHeightInBlocks: 0, copyDepth: 1 }, // we don't have to check the bound\n        { copyHeightInBlocks: 1, copyDepth: 0 }, // we don't have to check the bound\n        { copyHeightInBlocks: 2, copyDepth: 1 }, // we have to check the bound\n        { copyHeightInBlocks: 0, copyDepth: 2 }, // we have to check the bound\n      ])\n  )\n  .fn(async t => {\n    const {\n      blocksPerRow,\n      additionalPaddingPerRow,\n      copyWidthInBlocks,\n      copyHeightInBlocks,\n      copyDepth,\n      format,\n      method,\n    } = t.params;\n    const info = kSizedTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    // In the CopyB2T and CopyT2B cases we need to have bytesPerRow 256-aligned.\n    const bytesPerRowAlignment = method === 'WriteTexture' ? 1 : 256;\n\n    const copyWidth = align(copyWidthInBlocks * info.blockWidth, bytesPerRowAlignment);\n    const copyHeight = copyHeightInBlocks * info.blockHeight;\n    const bytesPerRow = align(\n      blocksPerRow * info.bytesPerBlock + additionalPaddingPerRow,\n      bytesPerRowAlignment\n    );\n    const copySize = { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth };\n\n    const texture = t.createAlignedTexture(format, {\n      width: copyWidth,\n      // size 0 is not valid; round up if needed\n      height: copyHeight || info.blockHeight,\n      depthOrArrayLayers: copyDepth || 1,\n    });\n\n    const layout = { bytesPerRow, rowsPerImage: copyHeight };\n    const { minDataSizeOrOverestimate, copyValid } = dataBytesForCopyOrOverestimate({\n      layout,\n      format,\n      copySize,\n      method,\n    });\n\n    t.testRun({ texture }, layout, copySize, {\n      dataSize: minDataSizeOrOverestimate,\n      method,\n      success: copyValid,\n    });\n  });\n\ng.test('bound_on_offset')\n  .cases(poptions('method', kImageCopyTypes))\n  .subcases(() =>\n    params()\n      .combine(poptions('offsetInBlocks', [0, 1, 2]))\n      .combine(poptions('dataSizeInBlocks', [0, 1, 2]))\n  )\n  .fn(async t => {\n    const { offsetInBlocks, dataSizeInBlocks, method } = t.params;\n\n    const format = 'rgba8unorm';\n    const info = kSizedTextureFormatInfo[format];\n    const offset = offsetInBlocks * info.bytesPerBlock;\n    const dataSize = dataSizeInBlocks * info.bytesPerBlock;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const success = offset <= dataSize;\n\n    t.testRun(\n      { texture },\n      { offset, bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize, method, success }\n    );\n  });\n"],"file":"layout_related.spec.js"}