{"version":3,"sources":["../../../../src/webgpu/api/validation/validation_test.ts"],"names":["unreachable","GPUTest","kEncoderTypes","ValidationTest","createTextureWithState","state","descriptor","size","width","height","depth","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","SAMPLED","STORAGE","OUTPUT_ATTACHMENT","device","createTexture","getErrorTexture","texture","destroy","createBufferWithState","GPUBufferUsage","VERTEX","createBuffer","MAP_READ","buffer","getStorageBuffer","getUniformBuffer","UNIFORM","getErrorBuffer","getSampler","createSampler","getComparisonSampler","compare","getErrorSampler","pushErrorScope","sampler","lodMinClamp","popErrorScope","getSampledTexture","getStorageTexture","getErrorTextureView","view","createView","getBindingResource","bindingType","createNoOpRenderPipeline","wgslVertex","wgslFragment","createRenderPipeline","vertexStage","module","createShaderModule","code","entryPoint","fragmentStage","primitiveTopology","colorStates","createNoOpComputePipeline","wgslCompute","createComputePipeline","computeStage","createErrorComputePipeline","pipeline","createEncoder","encoderType","colorFormat","encoder","createCommandEncoder","finish","createRenderBundleEncoder","colorFormats","pass","bundle","executeBundles","commandEncoder","beginComputePass","endPass","attachment","beginRenderPass","colorAttachments","loadValue","r","g","b","a","expectValidationError","fn","shouldError","promise","eventualAsyncExpectation","niceStack","gpuValidationError","message","rec","validationFailed","GPUValidationError","debug"],"mappings":"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","sourcesContent":["import { unreachable } from '../../../common/framework/util/util.js';\nimport { BindableResource } from '../../capability_info.js';\nimport { GPUTest } from '../../gpu_test.js';\n\ntype Encoder = GPUCommandEncoder | GPUProgrammablePassEncoder | GPURenderBundleEncoder;\nexport const kEncoderTypes = ['non-pass', 'compute pass', 'render pass', 'render bundle'] as const;\ntype EncoderType = typeof kEncoderTypes[number];\n\ninterface CommandBufferMaker<E extends Encoder> {\n  readonly encoder: E;\n  finish(): GPUCommandBuffer;\n}\n\nexport class ValidationTest extends GPUTest {\n  createTextureWithState(\n    state: 'valid' | 'invalid' | 'destroyed',\n    descriptor?: Readonly<GPUTextureDescriptor>\n  ): GPUTexture {\n    descriptor = descriptor ?? {\n      size: { width: 1, height: 1, depth: 1 },\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.SAMPLED |\n        GPUTextureUsage.STORAGE |\n        GPUTextureUsage.OUTPUT_ATTACHMENT,\n    };\n\n    switch (state) {\n      case 'valid':\n        return this.device.createTexture(descriptor);\n      case 'invalid':\n        return this.getErrorTexture();\n      case 'destroyed': {\n        const texture = this.device.createTexture(descriptor);\n        texture.destroy();\n        return texture;\n      }\n    }\n  }\n\n  createBufferWithState(\n    state: 'valid' | 'invalid' | 'destroyed',\n    descriptor?: Readonly<GPUBufferDescriptor>\n  ): GPUBuffer {\n    descriptor = descriptor ?? {\n      size: 4,\n      usage: GPUBufferUsage.VERTEX,\n    };\n\n    switch (state) {\n      case 'valid':\n        return this.device.createBuffer(descriptor);\n      case 'invalid':\n        // Make the buffer invalid because of an invalid combination of usages but keep the\n        // descriptor passed as much as possible (for mappedAtCreation and friends).\n        return this.device.createBuffer({\n          ...descriptor,\n          usage: descriptor.usage | GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_SRC,\n        });\n      case 'destroyed': {\n        const buffer = this.device.createBuffer(descriptor);\n        buffer.destroy();\n        return buffer;\n      }\n    }\n  }\n\n  getStorageBuffer(): GPUBuffer {\n    return this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.STORAGE });\n  }\n\n  getUniformBuffer(): GPUBuffer {\n    return this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.UNIFORM });\n  }\n\n  getErrorBuffer(): GPUBuffer {\n    return this.createBufferWithState('invalid');\n  }\n\n  getSampler(): GPUSampler {\n    return this.device.createSampler();\n  }\n\n  getComparisonSampler(): GPUSampler {\n    return this.device.createSampler({ compare: 'never' });\n  }\n\n  getErrorSampler(): GPUSampler {\n    this.device.pushErrorScope('validation');\n    const sampler = this.device.createSampler({ lodMinClamp: -1 });\n    this.device.popErrorScope();\n    return sampler;\n  }\n\n  getSampledTexture(): GPUTexture {\n    return this.device.createTexture({\n      size: { width: 16, height: 16, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.SAMPLED,\n    });\n  }\n\n  getStorageTexture(): GPUTexture {\n    return this.device.createTexture({\n      size: { width: 16, height: 16, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.STORAGE,\n    });\n  }\n\n  getErrorTexture(): GPUTexture {\n    this.device.pushErrorScope('validation');\n    const texture = this.device.createTexture({\n      size: { width: 0, height: 0, depth: 0 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.SAMPLED,\n    });\n    this.device.popErrorScope();\n    return texture;\n  }\n\n  getErrorTextureView(): GPUTextureView {\n    this.device.pushErrorScope('validation');\n    const view = this.getErrorTexture().createView();\n    this.device.popErrorScope();\n    return view;\n  }\n\n  getBindingResource(bindingType: BindableResource): GPUBindingResource {\n    switch (bindingType) {\n      case 'errorBuf':\n        return { buffer: this.getErrorBuffer() };\n      case 'errorSamp':\n        return this.getErrorSampler();\n      case 'errorTex':\n        return this.getErrorTextureView();\n      case 'uniformBuf':\n        return { buffer: this.getUniformBuffer() };\n      case 'storageBuf':\n        return { buffer: this.getStorageBuffer() };\n      case 'plainSamp':\n        return this.getSampler();\n      case 'compareSamp':\n        return this.getComparisonSampler();\n      case 'sampledTex':\n        return this.getSampledTexture().createView();\n      case 'storageTex':\n        return this.getStorageTexture().createView();\n      default:\n        unreachable('unknown binding resource type');\n    }\n  }\n\n  createNoOpRenderPipeline(): GPURenderPipeline {\n    const wgslVertex = `\n      fn main() -> void {\n        return;\n      }\n\n      entry_point vertex = main;\n    `;\n    const wgslFragment = `\n      fn main() -> void {\n        return;\n      }\n\n      entry_point fragment = main;\n    `;\n\n    return this.device.createRenderPipeline({\n      vertexStage: {\n        module: this.device.createShaderModule({\n          code: wgslVertex,\n        }),\n        entryPoint: 'main',\n      },\n      fragmentStage: {\n        module: this.device.createShaderModule({\n          code: wgslFragment,\n        }),\n        entryPoint: 'main',\n      },\n      primitiveTopology: 'triangle-list',\n      colorStates: [{ format: 'rgba8unorm' }],\n    });\n  }\n\n  createNoOpComputePipeline(): GPUComputePipeline {\n    const wgslCompute = `\n      fn main() -> void {\n        return;\n      }\n\n      entry_point compute = main;\n    `;\n\n    return this.device.createComputePipeline({\n      computeStage: {\n        module: this.device.createShaderModule({\n          code: wgslCompute,\n        }),\n        entryPoint: 'main',\n      },\n    });\n  }\n\n  createErrorComputePipeline(): GPUComputePipeline {\n    this.device.pushErrorScope('validation');\n    const pipeline = this.device.createComputePipeline({\n      computeStage: {\n        module: this.device.createShaderModule({\n          code: '',\n        }),\n        entryPoint: '',\n      },\n    });\n    this.device.popErrorScope();\n    return pipeline;\n  }\n\n  createEncoder(encoderType: 'non-pass'): CommandBufferMaker<GPUCommandEncoder>;\n  createEncoder(encoderType: 'render pass'): CommandBufferMaker<GPURenderPassEncoder>;\n  createEncoder(encoderType: 'compute pass'): CommandBufferMaker<GPUComputePassEncoder>;\n  createEncoder(encoderType: 'render bundle'): CommandBufferMaker<GPURenderBundleEncoder>;\n  createEncoder(\n    encoderType: 'render pass' | 'render bundle'\n  ): CommandBufferMaker<GPURenderPassEncoder | GPURenderBundleEncoder>;\n  createEncoder(\n    encoderType: 'compute pass' | 'render pass' | 'render bundle'\n  ): CommandBufferMaker<GPUProgrammablePassEncoder>;\n  createEncoder(encoderType: EncoderType): CommandBufferMaker<Encoder>;\n  createEncoder(encoderType: EncoderType): CommandBufferMaker<Encoder> {\n    const colorFormat = 'rgba8unorm';\n    switch (encoderType) {\n      case 'non-pass': {\n        const encoder = this.device.createCommandEncoder();\n        return {\n          encoder,\n\n          finish: () => {\n            return encoder.finish();\n          },\n        };\n      }\n      case 'render bundle': {\n        const device = this.device;\n        const encoder = device.createRenderBundleEncoder({\n          colorFormats: [colorFormat],\n        });\n        const pass = this.createEncoder('render pass');\n        return {\n          encoder,\n          finish: () => {\n            const bundle = encoder.finish();\n            pass.encoder.executeBundles([bundle]);\n            return pass.finish();\n          },\n        };\n      }\n      case 'compute pass': {\n        const commandEncoder = this.device.createCommandEncoder();\n        const encoder = commandEncoder.beginComputePass();\n        return {\n          encoder,\n          finish: () => {\n            encoder.endPass();\n            return commandEncoder.finish();\n          },\n        };\n      }\n      case 'render pass': {\n        const commandEncoder = this.device.createCommandEncoder();\n        const attachment = this.device\n          .createTexture({\n            format: colorFormat,\n            size: { width: 16, height: 16, depth: 1 },\n            usage: GPUTextureUsage.OUTPUT_ATTACHMENT,\n          })\n          .createView();\n        const encoder = commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              attachment,\n              loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n            },\n          ],\n        });\n        return {\n          encoder,\n          finish: () => {\n            encoder.endPass();\n            return commandEncoder.finish();\n          },\n        };\n      }\n    }\n  }\n\n  expectValidationError(fn: Function, shouldError: boolean = true): void {\n    // If no error is expected, we let the scope surrounding the test catch it.\n    if (shouldError === false) {\n      fn();\n      return;\n    }\n\n    this.device.pushErrorScope('validation');\n    fn();\n    const promise = this.device.popErrorScope();\n\n    this.eventualAsyncExpectation(async niceStack => {\n      const gpuValidationError = await promise;\n      if (!gpuValidationError) {\n        niceStack.message = 'Validation error was expected.';\n        this.rec.validationFailed(niceStack);\n      } else if (gpuValidationError instanceof GPUValidationError) {\n        niceStack.message = `Captured validation error - ${gpuValidationError.message}`;\n        this.rec.debug(niceStack);\n      }\n    });\n  }\n}\n"],"file":"validation_test.js"}