{"version":3,"sources":["../../../../../../src/webgpu/api/validation/resource_usages/texture/in_pass_encoder.spec.ts"],"names":["description","pbool","poptions","params","pp","makeTestGroup","assert","kDepthStencilFormats","kDepthStencilFormatInfo","kShaderStages","GPUConst","ValidationTest","kTextureBindingTypes","SIZE","TextureUsageTracking","createTexture","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","SAMPLED","device","size","depthOrArrayLayers","dimension","createBindGroup","binding","resource","bindingType","viewDimension","entry","texture","multisampled","undefined","storageTexture","access","entries","layout","createBindGroupLayout","visibility","GPUShaderStage","COMPUTE","FRAGMENT","createAndExecuteBundle","bindGroup","pass","bundleEncoder","createRenderBundleEncoder","colorFormats","setBindGroup","bundle","finish","executeBundles","beginSimpleRenderPass","encoder","view","beginRenderPass","colorAttachments","loadValue","r","g","b","a","storeOp","testValidationScope","compute","STORAGE","createView","bindGroup0","bindGroup1","createCommandEncoder","beginComputePass","pipeline","createNoOpComputePipeline","createNoOpRenderPipeline","setPipeline","issueDrawOrDispatch","dispatch","draw","setComputePipelineAndCallDispatch","BASE_LEVEL","TOTAL_LEVELS","BASE_LAYER","TOTAL_LAYERS","SLICE_COUNT","test","combine","levelCount0","layerCount0","baseLevel1","levelCount1","baseLayer1","layerCount1","_resourceSuccess","_usageOK","type0","type1","unless","p","binding0InBundle","binding1InBundle","fn","t","dimension0","view0","baseMipLevel","baseArrayLayer","dimension1","view1","endPass","storageTextureFormat0","GPURenderPassEncoder","storageTextureFormat1","success","expectValidationError","baseLevel","baseLayer","aspect0","stencil","aspect1","depth","_usageSuccess","selectDeviceOrSkipTestCase","feature","aspect","depthStencilAttachment","depthStoreOp","depthLoadValue","stencilStoreOp","stencilLoadValue","disjointAspects","Boolean","writeVisibility","ShaderStage","VERTEX","readVisibility","writeHasVertexStage","texUsage","bglEntries","bgEntries","push","cases","callDrawOrDispatch","sampledView","sampledStorageView","bglEntries0","bgEntries0","bindGroups","binding0TexFormat","binding1TexFormat","bindingsInBundle","i","bundleInPass","useBindGroup0","useBindGroup1","setBindGroupsOrder","wgslVertex","wgslFragment","_if","_endif","wgslCompute","createComputePipeline","module","createShaderModule","code","entryPoint","createRenderPipeline","vertex","fragment","targets","primitive","topology","index0","index1","pass1"],"mappings":"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","sourcesContent":["export const description = `\nTexture Usages Validation Tests in Render Pass and Compute Pass.\n\nTODO: update for new binding structure.\n\nTODO: description per test\n\nTest Coverage:\n  - For each combination of two texture usages:\n    - For various subresource ranges (different mip levels or array layers) that overlap a given\n      subresources or not for color formats:\n      - For various places that resources are used, for example, used in bundle or used in render\n        pass directly.\n        - Check that an error is generated when read-write or write-write usages are binding to the\n          same texture subresource. Otherwise, no error should be generated. One exception is race\n          condition upon two writeonly-storage-texture usages, which is valid.\n\n  - For each combination of two texture usages:\n    - For various aspects (all, depth-only, stencil-only) that overlap a given subresources or not\n      for depth/stencil formats:\n      - Check that an error is generated when read-write or write-write usages are binding to the\n        same aspect. Otherwise, no error should be generated.\n\n  - Test combinations of two shader stages:\n    - Texture usages in bindings with invisible shader stages should be validated. Invisible shader\n      stages include shader stage with visibility none, compute shader stage in render pass, and\n      vertex/fragment shader stage in compute pass.\n\n  - Tests replaced bindings:\n    - Texture usages via bindings replaced by another setBindGroup() upon the same bindGroup index\n      in render pass should be validated. However, replaced bindings should not be validated in\n      compute pass.\n\n  - Test texture usages in bundle:\n    - Texture usages in bundle should be validated if that bundle is executed in the current scope.\n\n  - Test texture usages with unused bindings:\n    - Texture usages should be validated even its bindings is not used in pipeline.\n\n  - Test texture usages validation scope:\n    - Texture usages should be validated per each render pass. And they should be validated per each\n      dispatch call in compute.\n`;\n\nimport { pbool, poptions, params } from '../../../../../common/framework/params_builder.js';\nimport { pp } from '../../../../../common/framework/preprocessor.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { assert } from '../../../../../common/framework/util/util.js';\nimport {\n  kDepthStencilFormats,\n  kDepthStencilFormatInfo,\n  kShaderStages,\n} from '../../../../capability_info.js';\nimport { GPUConst } from '../../../../constants.js';\nimport { ValidationTest } from '../../validation_test.js';\n\ntype TextureBindingType =\n  | 'sampled-texture'\n  | 'multisampled-texture'\n  | 'readonly-storage-texture'\n  | 'writeonly-storage-texture';\nconst kTextureBindingTypes = [\n  'sampled-texture',\n  'multisampled-texture',\n  'readonly-storage-texture',\n  'writeonly-storage-texture',\n] as const;\n\nconst SIZE = 32;\nclass TextureUsageTracking extends ValidationTest {\n  createTexture(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      format?: GPUTextureFormat;\n      usage?: GPUTextureUsageFlags;\n    } = {}\n  ): GPUTexture {\n    const {\n      width = SIZE,\n      height = SIZE,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      format = 'rgba8unorm',\n      usage = GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.SAMPLED,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depthOrArrayLayers: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format,\n      usage,\n    });\n  }\n\n  createBindGroup(\n    binding: number,\n    resource: GPUTextureView,\n    bindingType: TextureBindingType,\n    viewDimension: GPUTextureViewDimension,\n    format: GPUTextureFormat | undefined\n  ): GPUBindGroup {\n    let entry: Omit<GPUBindGroupLayoutEntry, 'binding' | 'visibility'>;\n    switch (bindingType) {\n      case 'sampled-texture':\n        entry = { texture: { viewDimension } };\n        break;\n      case 'multisampled-texture':\n        entry = { texture: { viewDimension, multisampled: true } };\n        break;\n      case 'readonly-storage-texture':\n        assert(format !== undefined);\n        entry = { storageTexture: { access: 'read-only', format, viewDimension } };\n        break;\n      case 'writeonly-storage-texture':\n        assert(format !== undefined);\n        entry = { storageTexture: { access: 'write-only', format, viewDimension } };\n        break;\n    }\n\n    return this.device.createBindGroup({\n      entries: [{ binding, resource }],\n      layout: this.device.createBindGroupLayout({\n        entries: [\n          { binding, visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT, ...entry },\n        ],\n      }),\n    });\n  }\n\n  createAndExecuteBundle(binding: number, bindGroup: GPUBindGroup, pass: GPURenderPassEncoder) {\n    const bundleEncoder = this.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n    });\n    bundleEncoder.setBindGroup(binding, bindGroup);\n    const bundle = bundleEncoder.finish();\n    pass.executeBundles([bundle]);\n  }\n\n  beginSimpleRenderPass(encoder: GPUCommandEncoder, view: GPUTextureView): GPURenderPassEncoder {\n    return encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view,\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n  }\n\n  testValidationScope(\n    compute: boolean\n  ): {\n    bindGroup0: GPUBindGroup;\n    bindGroup1: GPUBindGroup;\n    encoder: GPUCommandEncoder;\n    pass: GPURenderPassEncoder | GPUComputePassEncoder;\n    pipeline: GPURenderPipeline | GPUComputePipeline;\n  } {\n    // Create two bind groups. Resource usages conflict between these two bind groups. But resource\n    // usage inside each bind group doesn't conflict.\n    const view = this.createTexture({\n      usage: GPUTextureUsage.STORAGE | GPUTextureUsage.SAMPLED,\n    }).createView();\n    const bindGroup0 = this.createBindGroup(0, view, 'sampled-texture', '2d', undefined);\n    const bindGroup1 = this.createBindGroup(\n      0,\n      view,\n      'writeonly-storage-texture',\n      '2d',\n      'rgba8unorm'\n    );\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : this.beginSimpleRenderPass(encoder, this.createTexture().createView());\n\n    // Create pipeline. Note that bindings unused in pipeline should be validated too.\n    const pipeline = compute ? this.createNoOpComputePipeline() : this.createNoOpRenderPipeline();\n    return {\n      bindGroup0,\n      bindGroup1,\n      encoder,\n      pass,\n      pipeline,\n    };\n  }\n\n  setPipeline(\n    pass: GPURenderPassEncoder | GPUComputePassEncoder,\n    pipeline: GPURenderPipeline | GPUComputePipeline,\n    compute: boolean\n  ) {\n    if (compute) {\n      (pass as GPUComputePassEncoder).setPipeline(pipeline as GPUComputePipeline);\n    } else {\n      (pass as GPURenderPassEncoder).setPipeline(pipeline as GPURenderPipeline);\n    }\n  }\n\n  issueDrawOrDispatch(pass: GPURenderPassEncoder | GPUComputePassEncoder, compute: boolean) {\n    if (compute) {\n      (pass as GPUComputePassEncoder).dispatch(1);\n    } else {\n      (pass as GPURenderPassEncoder).draw(3, 1, 0, 0);\n    }\n  }\n\n  setComputePipelineAndCallDispatch(pass: GPUComputePassEncoder) {\n    const pipeline = this.createNoOpComputePipeline();\n    pass.setPipeline(pipeline);\n    pass.dispatch(1);\n  }\n}\n\nexport const g = makeTestGroup(TextureUsageTracking);\n\nconst BASE_LEVEL = 1;\nconst TOTAL_LEVELS = 6;\nconst BASE_LAYER = 1;\nconst TOTAL_LAYERS = 6;\nconst SLICE_COUNT = 2;\n\n// For all tests below, we test compute pass if 'compute' is true, and test render pass otherwise.\ng.test('subresources_and_binding_types_combination_for_color')\n  .params(\n    params()\n      .combine(pbool('compute'))\n      .combine(pbool('binding0InBundle'))\n      .combine(pbool('binding1InBundle'))\n      .combine([\n        // Two texture usages are binding to the same texture subresource.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // Two texture usages are binding to different mip levels of the same texture.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + 1,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // Two texture usages are binding to different array layers of the same texture.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + 1,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // The second texture usage contains the whole mip chain where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: 0,\n          levelCount1: TOTAL_LEVELS,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // The second texture usage contains all layers where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: 0,\n          layerCount1: TOTAL_LAYERS,\n          _resourceSuccess: false,\n        },\n\n        // The second texture usage contains all subresources where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: 0,\n          levelCount1: TOTAL_LEVELS,\n          baseLayer1: 0,\n          layerCount1: TOTAL_LAYERS,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few mip levels on the same layer but they don't overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few mip levels on the same layer and they overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT - 1,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few array layers on the same level but they don't overlap.\n        {\n          levelCount0: 1,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + SLICE_COUNT,\n          layerCount1: 3,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few array layers on the same level and they overlap.\n        {\n          levelCount0: 1,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + SLICE_COUNT - 1,\n          layerCount1: 3,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few array layers and mip levels but they don't overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER + SLICE_COUNT,\n          layerCount1: 3,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few array layers and mip levels and they overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT - 1,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER + SLICE_COUNT - 1,\n          layerCount1: 3,\n          _resourceSuccess: false,\n        },\n      ])\n      .combine([\n        { _usageOK: true, type0: 'sampled-texture', type1: 'sampled-texture' },\n        { _usageOK: true, type0: 'sampled-texture', type1: 'readonly-storage-texture' },\n        { _usageOK: false, type0: 'sampled-texture', type1: 'writeonly-storage-texture' },\n        { _usageOK: false, type0: 'sampled-texture', type1: 'render-target' },\n        { _usageOK: true, type0: 'readonly-storage-texture', type1: 'readonly-storage-texture' },\n        { _usageOK: false, type0: 'readonly-storage-texture', type1: 'writeonly-storage-texture' },\n        { _usageOK: false, type0: 'readonly-storage-texture', type1: 'render-target' },\n        // Race condition upon multiple writable storage texture is valid.\n        { _usageOK: true, type0: 'writeonly-storage-texture', type1: 'writeonly-storage-texture' },\n        { _usageOK: false, type0: 'writeonly-storage-texture', type1: 'render-target' },\n        { _usageOK: false, type0: 'render-target', type1: 'render-target' },\n      ] as const)\n      // Every color attachment can use only one single subresource.\n      .unless(\n        p =>\n          (p.type0 === 'render-target' && (p.levelCount0 !== 1 || p.layerCount0 !== 1)) ||\n          (p.type1 === 'render-target' && (p.levelCount1 !== 1 || p.layerCount1 !== 1))\n      )\n      // All color attachments' size should be the same.\n      .unless(\n        p =>\n          p.type0 === 'render-target' && p.type1 === 'render-target' && p.baseLevel1 !== BASE_LEVEL\n      )\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          (p.binding0InBundle && p.type0 === 'render-target') ||\n          (p.binding1InBundle && p.type1 === 'render-target')\n      )\n      .unless(\n        p =>\n          // We can't set 'render-target' or bundle in compute.\n          p.compute &&\n          (p.binding0InBundle ||\n            p.binding1InBundle ||\n            p.type0 === 'render-target' ||\n            p.type1 === 'render-target')\n      )\n  )\n  .fn(async t => {\n    const {\n      compute,\n      binding0InBundle,\n      binding1InBundle,\n      levelCount0,\n      layerCount0,\n      baseLevel1,\n      baseLayer1,\n      levelCount1,\n      layerCount1,\n      type0,\n      type1,\n      _usageOK,\n      _resourceSuccess,\n    } = t.params;\n\n    const texture = t.createTexture({\n      arrayLayerCount: TOTAL_LAYERS,\n      mipLevelCount: TOTAL_LEVELS,\n      usage: GPUTextureUsage.SAMPLED | GPUTextureUsage.STORAGE | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const dimension0 = layerCount0 !== 1 ? '2d-array' : '2d';\n    const view0 = texture.createView({\n      dimension: dimension0,\n      baseMipLevel: BASE_LEVEL,\n      mipLevelCount: levelCount0,\n      baseArrayLayer: BASE_LAYER,\n      arrayLayerCount: layerCount0,\n    });\n\n    const dimension1 = layerCount1 !== 1 ? '2d-array' : '2d';\n    const view1 = texture.createView({\n      dimension: dimension1,\n      baseMipLevel: baseLevel1,\n      mipLevelCount: levelCount1,\n      baseArrayLayer: baseLayer1,\n      arrayLayerCount: layerCount1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    if (type0 === 'render-target') {\n      // Note that type1 is 'render-target' too. So we don't need to create bindings.\n      assert(type1 === 'render-target');\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: view0,\n            loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n            storeOp: 'store',\n          },\n          {\n            view: view1,\n            loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n            storeOp: 'store',\n          },\n        ],\n      });\n      pass.endPass();\n    } else {\n      const pass = compute\n        ? encoder.beginComputePass()\n        : t.beginSimpleRenderPass(\n            encoder,\n            type1 === 'render-target' ? view1 : t.createTexture().createView()\n          );\n\n      // Create bind groups. Set bind groups in pass directly or set bind groups in bundle.\n      const storageTextureFormat0 = type0 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      const bindGroup0 = t.createBindGroup(0, view0, type0, dimension0, storageTextureFormat0);\n      if (binding0InBundle) {\n        assert(pass instanceof GPURenderPassEncoder);\n        t.createAndExecuteBundle(0, bindGroup0, pass);\n      } else {\n        pass.setBindGroup(0, bindGroup0);\n      }\n      if (type1 !== 'render-target') {\n        const storageTextureFormat1 = type1 === 'sampled-texture' ? undefined : 'rgba8unorm';\n        const bindGroup1 = t.createBindGroup(1, view1, type1, dimension1, storageTextureFormat1);\n        if (binding1InBundle) {\n          assert(pass instanceof GPURenderPassEncoder);\n          t.createAndExecuteBundle(1, bindGroup1, pass);\n        } else {\n          pass.setBindGroup(1, bindGroup1);\n        }\n      }\n      if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n      pass.endPass();\n    }\n\n    const success = _resourceSuccess || _usageOK;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources_and_binding_types_combination_for_aspect')\n  .params(\n    params()\n      .combine(pbool('compute'))\n      .combine(pbool('binding0InBundle'))\n      .combine(pbool('binding1InBundle'))\n      .combine(poptions('format', kDepthStencilFormats))\n      .combine([\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER,\n          _resourceSuccess: false,\n        },\n        {\n          baseLevel: BASE_LEVEL + 1,\n          baseLayer: BASE_LAYER,\n          _resourceSuccess: true,\n        },\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER + 1,\n          _resourceSuccess: true,\n        },\n      ])\n      .combine(poptions('aspect0', ['all', 'depth-only', 'stencil-only'] as const))\n      .combine(poptions('aspect1', ['all', 'depth-only', 'stencil-only'] as const))\n      .unless(\n        p =>\n          (p.aspect0 === 'stencil-only' && !kDepthStencilFormatInfo[p.format].stencil) ||\n          (p.aspect1 === 'stencil-only' && !kDepthStencilFormatInfo[p.format].stencil)\n      )\n      .unless(\n        p =>\n          (p.aspect0 === 'depth-only' && !kDepthStencilFormatInfo[p.format].depth) ||\n          (p.aspect1 === 'depth-only' && !kDepthStencilFormatInfo[p.format].depth)\n      )\n      .combine([\n        {\n          type0: 'sampled-texture',\n          type1: 'sampled-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n      ] as const)\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          p.binding1InBundle && p.type1 === 'render-target'\n      )\n      .unless(\n        p =>\n          // We can't set 'render-target' or bundle in compute. Note that type0 is definitely not\n          // 'render-target'\n          p.compute && (p.binding0InBundle || p.binding1InBundle || p.type1 === 'render-target')\n      )\n  )\n  .fn(async t => {\n    const {\n      compute,\n      binding0InBundle,\n      binding1InBundle,\n      format,\n      baseLevel,\n      baseLayer,\n      aspect0,\n      aspect1,\n      type0,\n      type1,\n      _resourceSuccess,\n      _usageSuccess,\n    } = t.params;\n    await t.selectDeviceOrSkipTestCase(kDepthStencilFormatInfo[format].feature);\n\n    const texture = t.createTexture({\n      arrayLayerCount: TOTAL_LAYERS,\n      mipLevelCount: TOTAL_LEVELS,\n      format,\n    });\n\n    const view0 = texture.createView({\n      baseMipLevel: BASE_LEVEL,\n      mipLevelCount: 1,\n      baseArrayLayer: BASE_LAYER,\n      arrayLayerCount: 1,\n      aspect: aspect0,\n    });\n\n    const view1 = texture.createView({\n      baseMipLevel: baseLevel,\n      mipLevelCount: 1,\n      baseArrayLayer: baseLayer,\n      arrayLayerCount: 1,\n      aspect: aspect1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    // Color attachment's size should match depth/stencil attachment's size. Note that if\n    // type1 !== 'render-target' then there's no depthStencilAttachment to match anyway.\n    const size = SIZE >> baseLevel;\n    const pass = compute\n      ? encoder.beginComputePass()\n      : encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: t.createTexture({ width: size, height: size }).createView(),\n              loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n              storeOp: 'store',\n            },\n          ],\n          depthStencilAttachment:\n            type1 !== 'render-target'\n              ? undefined\n              : {\n                  view: view1,\n                  depthStoreOp: 'clear',\n                  depthLoadValue: 'load',\n                  stencilStoreOp: 'clear',\n                  stencilLoadValue: 'load',\n                },\n        });\n\n    // Create bind groups. Set bind groups in pass directly or set bind groups in bundle.\n    const bindGroup0 = t.createBindGroup(0, view0, type0, '2d', undefined);\n    if (binding0InBundle) {\n      assert(pass instanceof GPURenderPassEncoder);\n      t.createAndExecuteBundle(0, bindGroup0, pass as GPURenderPassEncoder);\n    } else {\n      pass.setBindGroup(0, bindGroup0);\n    }\n    if (type1 !== 'render-target') {\n      const bindGroup1 = t.createBindGroup(1, view1, type1, '2d', undefined);\n      if (binding1InBundle) {\n        assert(pass instanceof GPURenderPassEncoder);\n        t.createAndExecuteBundle(1, bindGroup1, pass as GPURenderPassEncoder);\n      } else {\n        pass.setBindGroup(1, bindGroup1);\n      }\n    }\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass.endPass();\n\n    const disjointAspects =\n      (aspect0 === 'depth-only' && aspect1 === 'stencil-only') ||\n      (aspect0 === 'stencil-only' && aspect1 === 'depth-only');\n\n    // If subresources' mip/array slices has no overlap, or their binding types don't conflict,\n    // it will definitely success no matter what aspects they are binding to.\n    const success = disjointAspects || _resourceSuccess || _usageSuccess;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('shader_stages_and_visibility')\n  .params(\n    params()\n      .combine(pbool('compute'))\n      .combine(poptions('readVisibility', [0, ...kShaderStages]))\n      .combine(poptions('writeVisibility', [0, ...kShaderStages]))\n      .unless(\n        p =>\n          // Writeonly-storage-texture binding type is not supported in vertex stage. But it is the\n          // only way to write into texture in compute. So there is no means to successfully create\n          // a binding which attempt to write into stage(s) with vertex stage in compute pass.\n          p.compute && Boolean(p.writeVisibility & GPUConst.ShaderStage.VERTEX)\n      )\n  )\n  .fn(async t => {\n    const { compute, readVisibility, writeVisibility } = t.params;\n\n    // writeonly-storage-texture binding type is not supported in vertex stage. So, this test\n    // uses writeonly-storage-texture binding as writable binding upon the same subresource if\n    // vertex stage is not included. Otherwise, it uses output attachment instead.\n    const writeHasVertexStage = Boolean(writeVisibility & GPUShaderStage.VERTEX);\n    const texUsage = writeHasVertexStage\n      ? GPUTextureUsage.SAMPLED | GPUTextureUsage.RENDER_ATTACHMENT\n      : GPUTextureUsage.SAMPLED | GPUTextureUsage.STORAGE;\n\n    const texture = t.createTexture({ usage: texUsage });\n    const view = texture.createView();\n    const bglEntries: GPUBindGroupLayoutEntry[] = [\n      { binding: 0, visibility: readVisibility, texture: {} },\n    ];\n    const bgEntries: GPUBindGroupEntry[] = [{ binding: 0, resource: view }];\n    if (!writeHasVertexStage) {\n      bglEntries.push({\n        binding: 1,\n        visibility: writeVisibility,\n        storageTexture: { access: 'write-only', format: 'rgba8unorm' },\n      });\n      bgEntries.push({ binding: 1, resource: view });\n    }\n    const bindGroup = t.device.createBindGroup({\n      entries: bgEntries,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries }),\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : t.beginSimpleRenderPass(\n          encoder,\n          writeHasVertexStage ? view : t.createTexture().createView()\n        );\n    pass.setBindGroup(0, bindGroup);\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass.endPass();\n\n    // Texture usages in bindings with invisible shader stages should be validated. Invisible shader\n    // stages include shader stage with visibility none, compute shader stage in render pass, and\n    // vertex/fragment shader stage in compute pass.\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\n// We should validate the texture usages in bindings which are replaced by another setBindGroup()\n// call site upon the same index in the same render pass. However, replaced bindings in compute\n// should not be validated.\ng.test('replaced_binding')\n  .cases(\n    params()\n      .combine(pbool('compute'))\n      .combine(pbool('callDrawOrDispatch'))\n      .combine(\n        poptions('entry', [\n          { texture: {} },\n          { texture: { multisampled: true } },\n          { storageTexture: { access: 'read-only', format: 'rgba8unorm' } },\n          { storageTexture: { access: 'write-only', format: 'rgba8unorm' } },\n        ] as const)\n      )\n  )\n  .fn(async t => {\n    const { compute, callDrawOrDispatch, entry } = t.params;\n\n    const sampledView = t.createTexture().createView();\n    const sampledStorageView = t\n      .createTexture({ usage: GPUTextureUsage.STORAGE | GPUTextureUsage.SAMPLED })\n      .createView();\n\n    // Create bindGroup0. It has two bindings. These two bindings use different views/subresources.\n    const bglEntries0: GPUBindGroupLayoutEntry[] = [\n      { binding: 0, visibility: GPUShaderStage.FRAGMENT, texture: {} },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.FRAGMENT,\n        ...entry,\n      },\n    ];\n    const bgEntries0: GPUBindGroupEntry[] = [\n      { binding: 0, resource: sampledView },\n      { binding: 1, resource: sampledStorageView },\n    ];\n    const bindGroup0 = t.device.createBindGroup({\n      entries: bgEntries0,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries0 }),\n    });\n\n    // Create bindGroup1. It has one binding, which use the same view/subresoure of a binding in\n    // bindGroup0. So it may or may not conflicts with that binding in bindGroup0.\n    const bindGroup1 = t.createBindGroup(0, sampledStorageView, 'sampled-texture', '2d', undefined);\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : t.beginSimpleRenderPass(encoder, t.createTexture().createView());\n\n    // Set bindGroup0 and bindGroup1. bindGroup0 is replaced by bindGroup1 in the current pass.\n    // But bindings in bindGroup0 should be validated too.\n    pass.setBindGroup(0, bindGroup0);\n    if (callDrawOrDispatch) {\n      const pipeline = compute ? t.createNoOpComputePipeline() : t.createNoOpRenderPipeline();\n      t.setPipeline(pass, pipeline, compute);\n      t.issueDrawOrDispatch(pass, compute);\n    }\n    pass.setBindGroup(0, bindGroup1);\n    pass.endPass();\n\n    // TODO: If the Compatible Usage List (https://gpuweb.github.io/gpuweb/#compatible-usage-list)\n    // gets programmatically defined in capability_info, use it here, instead of this logic, for clarity.\n    let success = entry.storageTexture?.access !== 'write-only';\n    // Replaced bindings should not be validated in compute pass, because validation only occurs\n    // inside dispatch() which only looks at the current resource usages.\n    success ||= compute;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('bindings_in_bundle')\n  .params(\n    params()\n      .combine(pbool('binding0InBundle'))\n      .combine(pbool('binding1InBundle'))\n      .combine(poptions('type0', ['render-target', ...kTextureBindingTypes] as const))\n      .combine(poptions('type1', ['render-target', ...kTextureBindingTypes] as const))\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          // In addition, if both bindings are non-bundle, there is no need to test it because\n          // we have far more comprehensive test cases for that situation in this file.\n          (p.binding0InBundle && p.type0 === 'render-target') ||\n          (p.binding1InBundle && p.type1 === 'render-target') ||\n          (!p.binding0InBundle && !p.binding1InBundle)\n      )\n  )\n  .fn(async t => {\n    const { binding0InBundle, binding1InBundle, type0, type1 } = t.params;\n\n    // Two bindings are attached to the same texture view.\n    const view = t\n      .createTexture({\n        usage:\n          GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.STORAGE | GPUTextureUsage.SAMPLED,\n      })\n      .createView();\n\n    const bindGroups: GPUBindGroup[] = [];\n    if (type0 !== 'render-target') {\n      const binding0TexFormat = type0 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      bindGroups[0] = t.createBindGroup(0, view, type0, '2d', binding0TexFormat);\n    }\n    if (type1 !== 'render-target') {\n      const binding1TexFormat = type1 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      bindGroups[1] = t.createBindGroup(1, view, type1, '2d', binding1TexFormat);\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    // At least one binding is in bundle, which means that its type is not 'render-target'.\n    // As a result, only one binding's type is 'render-target' at most.\n    const pass = t.beginSimpleRenderPass(\n      encoder,\n      type0 === 'render-target' || type1 === 'render-target' ? view : t.createTexture().createView()\n    );\n\n    const bindingsInBundle: boolean[] = [binding0InBundle, binding1InBundle];\n    for (let i = 0; i < 2; i++) {\n      // Create a bundle for each bind group if its bindings is required to be in bundle on purpose.\n      // Otherwise, call setBindGroup directly in pass if needed (when its binding is not\n      // 'render-target').\n      if (bindingsInBundle[i]) {\n        const bundleEncoder = t.device.createRenderBundleEncoder({\n          colorFormats: ['rgba8unorm'],\n        });\n        bundleEncoder.setBindGroup(i, bindGroups[i]);\n        const bundleInPass = bundleEncoder.finish();\n        pass.executeBundles([bundleInPass]);\n      } else if (bindGroups[i] !== undefined) {\n        pass.setBindGroup(i, bindGroups[i]);\n      }\n    }\n\n    pass.endPass();\n\n    let success = false;\n    if (\n      (type0 === 'sampled-texture' || type0 === 'readonly-storage-texture') &&\n      (type1 === 'sampled-texture' || type1 === 'readonly-storage-texture')\n    ) {\n      success = true;\n    }\n\n    if (type0 === 'writeonly-storage-texture' && type1 === 'writeonly-storage-texture') {\n      success = true;\n    }\n\n    // Resource usages in bundle should be validated.\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('unused_bindings_in_pipeline')\n  .params(\n    params()\n      .combine(pbool('compute'))\n      .combine(pbool('useBindGroup0'))\n      .combine(pbool('useBindGroup1'))\n      .combine(poptions('setBindGroupsOrder', ['common', 'reversed'] as const))\n      .combine(poptions('setPipeline', ['before', 'middle', 'after', 'none'] as const))\n      .combine(pbool('callDrawOrDispatch'))\n  )\n  .fn(async t => {\n    const {\n      compute,\n      useBindGroup0,\n      useBindGroup1,\n      setBindGroupsOrder,\n      setPipeline,\n      callDrawOrDispatch,\n    } = t.params;\n    const view = t.createTexture({ usage: GPUTextureUsage.STORAGE }).createView();\n    const bindGroup0 = t.createBindGroup(0, view, 'readonly-storage-texture', '2d', 'rgba8unorm');\n    const bindGroup1 = t.createBindGroup(0, view, 'writeonly-storage-texture', '2d', 'rgba8unorm');\n\n    const wgslVertex = '[[stage(vertex)]] fn main() {}';\n    // TODO: revisit the shader code once 'image' can be supported in wgsl.\n    const wgslFragment = pp`\n      ${pp._if(useBindGroup0)}\n      [[group(0), binding(0)]] var<image> image0 : [[access(read)]] texture_storage_2d<rgba8unorm>;\n      ${pp._endif}\n      ${pp._if(useBindGroup1)}\n      [[group(1), binding(0)]] var<image> image1 : [[access(read)]] texture_storage_2d<rgba8unorm>;\n      ${pp._endif}\n      [[stage(fragment)]] fn main() {}\n    `;\n\n    // TODO: revisit the shader code once 'image' can be supported in wgsl.\n    const wgslCompute = pp`\n      ${pp._if(useBindGroup0)}\n      [[group(0), binding(0)]] var<image> image0 : [[access(read)]] texture_storage_2d<rgba8unorm>;\n      ${pp._endif}\n      ${pp._if(useBindGroup1)}\n      [[group(1), binding(0)]] var<image> image1 : [[access(read)]] texture_storage_2d<rgba8unorm>;\n      ${pp._endif}\n      [[stage(compute)]] fn main() {}\n    `;\n\n    const pipeline = compute\n      ? t.device.createComputePipeline({\n          compute: {\n            module: t.device.createShaderModule({\n              code: wgslCompute,\n            }),\n            entryPoint: 'main',\n          },\n        })\n      : t.device.createRenderPipeline({\n          vertex: {\n            module: t.device.createShaderModule({\n              code: wgslVertex,\n            }),\n            entryPoint: 'main',\n          },\n          fragment: {\n            module: t.device.createShaderModule({\n              code: wgslFragment,\n            }),\n            entryPoint: 'main',\n            targets: [{ format: 'rgba8unorm' }],\n          },\n          primitive: { topology: 'triangle-list' },\n        });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: t.createTexture().createView(),\n              loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n              storeOp: 'store',\n            },\n          ],\n        });\n    const index0 = setBindGroupsOrder === 'common' ? 0 : 1;\n    const index1 = setBindGroupsOrder === 'common' ? 1 : 0;\n    if (setPipeline === 'before') t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(index0, bindGroup0);\n    if (setPipeline === 'middle') t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(index1, bindGroup1);\n    if (setPipeline === 'after') t.setPipeline(pass, pipeline, compute);\n    if (callDrawOrDispatch) t.issueDrawOrDispatch(pass, compute);\n    pass.endPass();\n\n    // Resource usage validation scope is defined by dispatch calls. If dispatch is not called,\n    // we don't need to do resource usage validation and no validation error to be reported.\n    const success = compute && !callDrawOrDispatch;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('validation_scope,no_draw_or_dispatch')\n  .params(pbool('compute'))\n  .fn(async t => {\n    const { compute } = t.params;\n\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(0, bindGroup0);\n    pass.setBindGroup(1, bindGroup1);\n    pass.endPass();\n\n    // Resource usage validation scope is defined by dispatch calls. If dispatch is not called,\n    // we don't need to do resource usage validation and no validation error to be reported.\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !compute);\n  });\n\ng.test('validation_scope,same_draw_or_dispatch')\n  .params(pbool('compute'))\n  .fn(async t => {\n    const { compute } = t.params;\n\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(0, bindGroup0);\n    pass.setBindGroup(1, bindGroup1);\n    t.issueDrawOrDispatch(pass, compute);\n    pass.endPass();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\ng.test('validation_scope,different_draws_or_dispatches')\n  .params(pbool('compute'))\n  .fn(async t => {\n    const { compute } = t.params;\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n\n    pass.setBindGroup(0, bindGroup0);\n    t.issueDrawOrDispatch(pass, compute);\n\n    pass.setBindGroup(1, bindGroup1);\n    t.issueDrawOrDispatch(pass, compute);\n\n    pass.endPass();\n\n    // Note that bindGroup0 will be inherited in the second draw/dispatch.\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\ng.test('validation_scope,different_passes')\n  .params(pbool('compute'))\n  .fn(async t => {\n    const { compute } = t.params;\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(0, bindGroup0);\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass.endPass();\n\n    const pass1 = compute\n      ? encoder.beginComputePass()\n      : t.beginSimpleRenderPass(encoder, t.createTexture().createView());\n    t.setPipeline(pass1, pipeline, compute);\n    pass1.setBindGroup(1, bindGroup1);\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass1.endPass();\n\n    // No validation error.\n    encoder.finish();\n  });\n"],"file":"in_pass_encoder.spec.js"}