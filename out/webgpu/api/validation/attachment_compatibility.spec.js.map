{"version":3,"sources":["../../../../src/webgpu/api/validation/attachment_compatibility.spec.ts"],"names":["description","poptions","params","makeTestGroup","range","kRegularTextureFormatInfo","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kTextureSampleCounts","kMaxColorAttachments","ValidationTest","kColorAttachmentCounts","i","kDepthStencilAttachmentFormats","undefined","F","createAttachmentTextureView","format","sampleCount","device","createTexture","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","createView","createColorAttachment","view","loadValue","storeOp","createDepthAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","createPassOrBundleEncoder","encoderType","colorFormats","depthStencilFormat","encoder","createCommandEncoder","passDesc","colorAttachments","Array","from","desc","depthStencilAttachment","pass","beginRenderPass","bundleEncoder","createRenderBundleEncoder","finish","bundle","executeBundles","endPass","createRenderPipeline","targets","depthStencil","vertex","module","createShaderModule","code","entryPoint","fragment","primitive","topology","multisample","count","g","kColorAttachmentFormats","filter","info","color","renderable","test","combine","fn","t","passFormat","bundleFormat","expectValidationError","queue","submit","passCount","bundleCount","selectDeviceForTextureFormatOrSkipTestCase","renderSampleCount","bundleSampleCount","encoderFormat","pipelineFormat","pipeline","setPipeline","encoderCount","pipelineCount","encoderSampleCount","pipelineSampleCount"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA,CAJO,CAMP,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,6CAAjC;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,KAAT,QAAsB,wCAAtB;AACA;AACEC,yBADF;AAEEC,sBAFF;AAGEC,yBAHF;AAIEC,2BAJF;AAKEC,oBALF;AAMEC,oBANF;AAOO,0BAPP;;AASA,SAASC,cAAT,QAAmD,sBAAnD;;AAEA,MAAMC,sBAAsB,GAAGR,KAAK,CAACM,oBAAD,EAAuBG,CAAC,IAAIA,CAAC,GAAG,CAAhC,CAApC;AACA,MAAMC,8BAA8B,GAAG;AACrCC,SADqC;AAErC,GAAGR,yBAFkC;AAGrC,GAAGC,2BAHkC,CAAvC;;;AAMA,MAAMQ,CAAN,SAAgBL,cAAhB,CAA+B;AAC7BM,EAAAA,2BAA2B,CAACC,MAAD,EAA2BC,WAA3B,EAAiD;AAC1E,WAAO,KAAKC,MAAL;AACJC,IAAAA,aADI,CACU;AACbC,MAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADO;AAEbJ,MAAAA,MAFa;AAGbK,MAAAA,KAAK,EAAEC,eAAe,CAACC,iBAHV;AAIbN,MAAAA,WAJa,EADV;;AAOJO,IAAAA,UAPI,EAAP;AAQD;;AAEDC,EAAAA,qBAAqB;AACnBT,EAAAA,MADmB;AAEnBC,EAAAA,WAFmB;AAGW;AAC9B,WAAO;AACLS,MAAAA,IAAI,EAAE,KAAKX,2BAAL,CAAiCC,MAAjC,EAAyCC,WAAzC,CADD;AAELU,MAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFN;AAGLC,MAAAA,OAAO,EAAE,OAHJ,EAAP;;AAKD;;AAEDC,EAAAA,qBAAqB;AACnBb,EAAAA,MADmB;AAEnBC,EAAAA,WAFmB;AAGkB;AACrC,WAAO;AACLS,MAAAA,IAAI,EAAE,KAAKX,2BAAL,CAAiCC,MAAjC,EAAyCC,WAAzC,CADD;AAELa,MAAAA,cAAc,EAAE,CAFX;AAGLC,MAAAA,YAAY,EAAE,OAHT;AAILC,MAAAA,gBAAgB,EAAE,CAJb;AAKLC,MAAAA,cAAc,EAAE,OALX,EAAP;;AAOD;;AAEDC,EAAAA,yBAAyB;AACvBC,EAAAA,WADuB;AAEvBC,EAAAA,YAFuB;AAGvBC,EAAAA,kBAHuB;AAIvBpB,EAAAA,WAJuB;AAK8B;AACrD,UAAMqB,OAAO,GAAG,KAAKpB,MAAL,CAAYqB,oBAAZ,EAAhB;AACA,UAAMC,QAAiC,GAAG;AACxCC,MAAAA,gBAAgB,EAAEC,KAAK,CAACC,IAAN,CAAWP,YAAX,EAAyB,CAAAQ,IAAI;AAC7C,WAAKnB,qBAAL,CAA2BmB,IAA3B,EAAiC3B,WAAjC,CADgB,CADsB;;AAIxC4B,MAAAA,sBAAsB;AACpBR,MAAAA,kBAAkB,KAAKxB,SAAvB;AACI,WAAKgB,qBAAL,CAA2BQ,kBAA3B,EAA+CpB,WAA/C,CADJ;AAEIJ,MAAAA,SAPkC,EAA1C;;AASA,UAAMiC,IAAI,GAAGR,OAAO,CAACS,eAAR,CAAwBP,QAAxB,CAAb;AACA,YAAQL,WAAR;AACE,WAAK,eAAL,CAAsB;AACpB,gBAAMa,aAAa,GAAG,KAAK9B,MAAL,CAAY+B,yBAAZ,CAAsC;AAC1Db,YAAAA,YAD0D;AAE1DC,YAAAA,kBAF0D;AAG1DpB,YAAAA,WAH0D,EAAtC,CAAtB;;;AAMA,iBAAO;AACLqB,YAAAA,OAAO,EAAEU,aADJ;AAELE,YAAAA,MAAM,GAAG;AACP,oBAAMC,MAAM,GAAGH,aAAa,CAACE,MAAd,EAAf;AACAJ,cAAAA,IAAI,CAACM,cAAL,CAAoB,CAACD,MAAD,CAApB;AACAL,cAAAA,IAAI,CAACO,OAAL;AACA,qBAAOf,OAAO,CAACY,MAAR,EAAP;AACD,aAPI,EAAP;;AASD;AACD,WAAK,aAAL;AACE,eAAO;AACLZ,UAAAA,OAAO,EAAEQ,IADJ;AAELI,UAAAA,MAAM,GAAG;AACPJ,YAAAA,IAAI,CAACO,OAAL;AACA,mBAAOf,OAAO,CAACY,MAAR,EAAP;AACD,WALI,EAAP,CAnBJ;;;AA2BD;;AAEDI,EAAAA,oBAAoB;AAClBC,EAAAA,OADkB;AAElBC,EAAAA,YAFkB;AAGlBvC,EAAAA,WAHkB;AAIlB;AACA,WAAO,KAAKC,MAAL,CAAYoC,oBAAZ,CAAiC;AACtCG,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAE,KAAKxC,MAAL,CAAYyC,kBAAZ,CAA+B;AACrCC,UAAAA,IAAI,EAAG;AACjB;AACA;AACA,cAJ+C,EAA/B,CADF;;AAONC,QAAAA,UAAU,EAAE,MAPN,EAD8B;;AAUtCC,MAAAA,QAAQ,EAAE;AACRJ,QAAAA,MAAM,EAAE,KAAKxC,MAAL,CAAYyC,kBAAZ,CAA+B;AACrCC,UAAAA,IAAI,EAAE,kCAD+B,EAA/B,CADA;;AAIRC,QAAAA,UAAU,EAAE,MAJJ;AAKRN,QAAAA,OALQ,EAV4B;;AAiBtCQ,MAAAA,SAAS,EAAE,EAAEC,QAAQ,EAAE,eAAZ,EAjB2B;AAkBtCR,MAAAA,YAlBsC;AAmBtCS,MAAAA,WAAW,EAAE,EAAEC,KAAK,EAAEjD,WAAT,EAnByB,EAAjC,CAAP;;AAqBD,GA5G4B;;;AA+G/B,OAAO,MAAMkD,CAAC,GAAGlE,aAAa,CAACa,CAAD,CAAvB;;AAEP,MAAMsD,uBAAuB,GAAGhE,sBAAsB,CAACiE,MAAvB,CAA8BrD,MAAM,IAAI;AACtE,QAAMsD,IAAI,GAAGnE,yBAAyB,CAACa,MAAD,CAAtC;AACA,SAAOsD,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACE,UAA1B;AACD,CAH+B,CAAhC;;AAKAL,CAAC,CAACM,IAAF,CAAO,qCAAP;AACG7B,IADH,CACQ,6EADR;AAEG5C,MAFH;AAGIA,MAAM;AACH0E,OADH,CACW3E,QAAQ,CAAC,YAAD,EAAeqE,uBAAf,CADnB;AAEGM,OAFH,CAEW3E,QAAQ,CAAC,cAAD,EAAiBqE,uBAAjB,CAFnB,CAHJ;;AAOGO,EAPH,CAOMC,CAAC,IAAI;AACP,QAAM,EAAEC,UAAF,EAAcC,YAAd,KAA+BF,CAAC,CAAC5E,MAAvC;AACA,QAAMgD,aAAa,GAAG4B,CAAC,CAAC1D,MAAF,CAAS+B,yBAAT,CAAmC;AACvDb,IAAAA,YAAY,EAAE,CAAC0C,YAAD,CADyC,EAAnC,CAAtB;;AAGA,QAAM3B,MAAM,GAAGH,aAAa,CAACE,MAAd,EAAf;AACA,QAAMZ,OAAO,GAAGsC,CAAC,CAAC1D,MAAF,CAASqB,oBAAT,EAAhB;AACA,QAAMO,IAAI,GAAGR,OAAO,CAACS,eAAR,CAAwB;AACnCN,IAAAA,gBAAgB,EAAE,CAACmC,CAAC,CAACnD,qBAAF,CAAwBoD,UAAxB,CAAD,CADiB,EAAxB,CAAb;;AAGA/B,EAAAA,IAAI,CAACM,cAAL,CAAoB,CAACD,MAAD,CAApB;AACAL,EAAAA,IAAI,CAACO,OAAL;AACAuB,EAAAA,CAAC,CAACG,qBAAF,CAAwB,MAAM;AAC5BH,IAAAA,CAAC,CAACI,KAAF,CAAQC,MAAR,CAAe,CAAC3C,OAAO,CAACY,MAAR,EAAD,CAAf;AACD,GAFD,EAEG2B,UAAU,KAAKC,YAFlB;AAGD,CAtBH;;AAwBAX,CAAC,CAACM,IAAF,CAAO,oCAAP;AACG7B,IADH;AAEK;AACL;AACA;AACA;AACA,GANA;;AAQG5C,MARH;AASIA,MAAM;AACH0E,OADH,CACW3E,QAAQ,CAAC,WAAD,EAAcW,sBAAd,CADnB;AAEGgE,OAFH,CAEW3E,QAAQ,CAAC,aAAD,EAAgBW,sBAAhB,CAFnB,CATJ;;AAaGiE,EAbH,CAaMC,CAAC,IAAI;AACP,QAAM,EAAEM,SAAF,EAAaC,WAAb,KAA6BP,CAAC,CAAC5E,MAArC;AACA,QAAMgD,aAAa,GAAG4B,CAAC,CAAC1D,MAAF,CAAS+B,yBAAT,CAAmC;AACvDb,IAAAA,YAAY,EAAElC,KAAK,CAACiF,WAAD,EAAc,MAAM,YAApB,CADoC,EAAnC,CAAtB;;AAGA,QAAMhC,MAAM,GAAGH,aAAa,CAACE,MAAd,EAAf;;AAEA,QAAMZ,OAAO,GAAGsC,CAAC,CAAC1D,MAAF,CAASqB,oBAAT,EAAhB;AACA,QAAMO,IAAI,GAAGR,OAAO,CAACS,eAAR,CAAwB;AACnCN,IAAAA,gBAAgB,EAAEvC,KAAK,CAACgF,SAAD,EAAY,MAAMN,CAAC,CAACnD,qBAAF,CAAwB,YAAxB,CAAlB,CADY,EAAxB,CAAb;;AAGAqB,EAAAA,IAAI,CAACM,cAAL,CAAoB,CAACD,MAAD,CAApB;AACAL,EAAAA,IAAI,CAACO,OAAL;AACAuB,EAAAA,CAAC,CAACG,qBAAF,CAAwB,MAAM;AAC5BH,IAAAA,CAAC,CAACI,KAAF,CAAQC,MAAR,CAAe,CAAC3C,OAAO,CAACY,MAAR,EAAD,CAAf;AACD,GAFD,EAEGgC,SAAS,KAAKC,WAFjB;AAGD,CA7BH;;AA+BAhB,CAAC,CAACM,IAAF,CAAO,qCAAP;AACG7B,IADH,CACQ,gFADR;AAEG5C,MAFH;AAGIA,MAAM;AACH0E,OADH,CACW3E,QAAQ,CAAC,YAAD,EAAea,8BAAf,CADnB;AAEG8D,OAFH,CAEW3E,QAAQ,CAAC,cAAD,EAAiBa,8BAAjB,CAFnB,CAHJ;;AAOG+D,EAPH,CAOM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,UAAF,EAAcC,YAAd,KAA+BF,CAAC,CAAC5E,MAAvC;AACA,QAAM4E,CAAC,CAACQ,0CAAF,CAA6C,CAACP,UAAD,EAAaC,YAAb,CAA7C,CAAN;;AAEA,QAAM9B,aAAa,GAAG4B,CAAC,CAAC1D,MAAF,CAAS+B,yBAAT,CAAmC;AACvDb,IAAAA,YAAY,EAAE,CAAC,YAAD,CADyC;AAEvDC,IAAAA,kBAAkB,EAAEyC,YAFmC,EAAnC,CAAtB;;AAIA,QAAM3B,MAAM,GAAGH,aAAa,CAACE,MAAd,EAAf;AACA,QAAMZ,OAAO,GAAGsC,CAAC,CAAC1D,MAAF,CAASqB,oBAAT,EAAhB;AACA,QAAMO,IAAI,GAAGR,OAAO,CAACS,eAAR,CAAwB;AACnCN,IAAAA,gBAAgB,EAAE,CAACmC,CAAC,CAACnD,qBAAF,CAAwB,YAAxB,CAAD,CADiB;AAEnCoB,IAAAA,sBAAsB;AACpBgC,IAAAA,UAAU,KAAKhE,SAAf,GAA2B+D,CAAC,CAAC/C,qBAAF,CAAwBgD,UAAxB,CAA3B,GAAiEhE,SAHhC,EAAxB,CAAb;;AAKAiC,EAAAA,IAAI,CAACM,cAAL,CAAoB,CAACD,MAAD,CAApB;AACAL,EAAAA,IAAI,CAACO,OAAL;AACAuB,EAAAA,CAAC,CAACG,qBAAF,CAAwB,MAAM;AAC5BH,IAAAA,CAAC,CAACI,KAAF,CAAQC,MAAR,CAAe,CAAC3C,OAAO,CAACY,MAAR,EAAD,CAAf;AACD,GAFD,EAEG2B,UAAU,KAAKC,YAFlB;AAGD,CA3BH;;AA6BAX,CAAC,CAACM,IAAF,CAAO,qCAAP;AACG7B,IADH,CACQ,qEADR;AAEG5C,MAFH;AAGIA,MAAM;AACH0E,OADH,CACW3E,QAAQ,CAAC,mBAAD,EAAsBQ,oBAAtB,CADnB;AAEGmE,OAFH,CAEW3E,QAAQ,CAAC,mBAAD,EAAsBQ,oBAAtB,CAFnB,CAHJ;;AAOGoE,EAPH,CAOMC,CAAC,IAAI;AACP,QAAM,EAAES,iBAAF,EAAqBC,iBAArB,KAA2CV,CAAC,CAAC5E,MAAnD;AACA,QAAMgD,aAAa,GAAG4B,CAAC,CAAC1D,MAAF,CAAS+B,yBAAT,CAAmC;AACvDb,IAAAA,YAAY,EAAE,CAAC,YAAD,CADyC;AAEvDnB,IAAAA,WAAW,EAAEqE,iBAF0C,EAAnC,CAAtB;;AAIA,QAAMnC,MAAM,GAAGH,aAAa,CAACE,MAAd,EAAf;AACA,QAAMZ,OAAO,GAAGsC,CAAC,CAAC1D,MAAF,CAASqB,oBAAT,EAAhB;AACA,QAAMO,IAAI,GAAGR,OAAO,CAACS,eAAR,CAAwB;AACnCN,IAAAA,gBAAgB,EAAE,CAACmC,CAAC,CAACnD,qBAAF,CAAwB,YAAxB,EAAsC4D,iBAAtC,CAAD,CADiB,EAAxB,CAAb;;AAGAvC,EAAAA,IAAI,CAACM,cAAL,CAAoB,CAACD,MAAD,CAApB;AACAL,EAAAA,IAAI,CAACO,OAAL;AACAuB,EAAAA,CAAC,CAACG,qBAAF,CAAwB,MAAM;AAC5BH,IAAAA,CAAC,CAACI,KAAF,CAAQC,MAAR,CAAe,CAAC3C,OAAO,CAACY,MAAR,EAAD,CAAf;AACD,GAFD,EAEGmC,iBAAiB,KAAKC,iBAFzB;AAGD,CAvBH;;AAyBAnB,CAAC,CAACM,IAAF,CAAO,iDAAP;AACG7B,IADH;AAEK;AACL;AACA,CAJA;;AAMG5C,MANH;AAOIA,MAAM;AACH0E,OADH,CACW3E,QAAQ,CAAC,aAAD,EAAgB,CAAC,aAAD,EAAgB,eAAhB,CAAhB,CADnB;AAEG2E,OAFH,CAEW3E,QAAQ,CAAC,eAAD,EAAkBqE,uBAAlB,CAFnB;AAGGM,OAHH,CAGW3E,QAAQ,CAAC,gBAAD,EAAmBqE,uBAAnB,CAHnB,CAPJ;;AAYGO,EAZH,CAYMC,CAAC,IAAI;AACP,QAAM,EAAEzC,WAAF,EAAeoD,aAAf,EAA8BC,cAA9B,KAAiDZ,CAAC,CAAC5E,MAAzD;AACA,QAAMyF,QAAQ,GAAGb,CAAC,CAACtB,oBAAF,CAAuB,CAAC,EAAEtC,MAAM,EAAEwE,cAAV,EAAD,CAAvB,CAAjB;;AAEA,QAAM,EAAElD,OAAF,EAAWY,MAAX,KAAsB0B,CAAC,CAAC1C,yBAAF,CAA4BC,WAA5B,EAAyC,CAACoD,aAAD,CAAzC,CAA5B;AACAjD,EAAAA,OAAO,CAACoD,WAAR,CAAoBD,QAApB;;AAEAb,EAAAA,CAAC,CAACG,qBAAF,CAAwB,MAAM;AAC5BH,IAAAA,CAAC,CAACI,KAAF,CAAQC,MAAR,CAAe,CAAC/B,MAAM,EAAP,CAAf;AACD,GAFD,EAEGqC,aAAa,KAAKC,cAFrB;AAGD,CAtBH;;AAwBArB,CAAC,CAACM,IAAF,CAAO,gDAAP;AACG7B,IADH;AAEK;AACL;AACA;AACA;AACA;AACA,CAPA;;AASG5C,MATH;AAUIA,MAAM;AACH0E,OADH,CACW3E,QAAQ,CAAC,aAAD,EAAgB,CAAC,aAAD,EAAgB,eAAhB,CAAhB,CADnB;AAEG2E,OAFH,CAEW3E,QAAQ,CAAC,cAAD,EAAiBW,sBAAjB,CAFnB;AAGGgE,OAHH,CAGW3E,QAAQ,CAAC,eAAD,EAAkBW,sBAAlB,CAHnB,CAVJ;;AAeGiE,EAfH,CAeMC,CAAC,IAAI;AACP,QAAM,EAAEzC,WAAF,EAAewD,YAAf,EAA6BC,aAA7B,KAA+ChB,CAAC,CAAC5E,MAAvD;AACA,QAAMyF,QAAQ,GAAGb,CAAC,CAACtB,oBAAF,CAAuBpD,KAAK,CAAC0F,aAAD,EAAgB,OAAO,EAAE5E,MAAM,EAAE,YAAV,EAAP,CAAhB,CAA5B,CAAjB;;AAEA,QAAM,EAAEsB,OAAF,EAAWY,MAAX,KAAsB0B,CAAC,CAAC1C,yBAAF;AAC1BC,EAAAA,WAD0B;AAE1BjC,EAAAA,KAAK,CAACyF,YAAD,EAAe,MAAM,YAArB,CAFqB,CAA5B;;AAIArD,EAAAA,OAAO,CAACoD,WAAR,CAAoBD,QAApB;;AAEAb,EAAAA,CAAC,CAACG,qBAAF,CAAwB,MAAM;AAC5BH,IAAAA,CAAC,CAACI,KAAF,CAAQC,MAAR,CAAe,CAAC/B,MAAM,EAAP,CAAf;AACD,GAFD,EAEGyC,YAAY,KAAKC,aAFpB;AAGD,CA5BH;;AA8BAzB,CAAC,CAACM,IAAF,CAAO,iDAAP;AACG7B,IADH;AAEK;AACL;AACA,CAJA;;AAMG5C,MANH;AAOIA,MAAM;AACH0E,OADH,CACW3E,QAAQ,CAAC,aAAD,EAAgB,CAAC,aAAD,EAAgB,eAAhB,CAAhB,CADnB;AAEG2E,OAFH,CAEW3E,QAAQ,CAAC,eAAD,EAAkBa,8BAAlB,CAFnB;AAGG8D,OAHH,CAGW3E,QAAQ,CAAC,gBAAD,EAAmBa,8BAAnB,CAHnB,CAPJ;;AAYG+D,EAZH,CAYM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEzC,WAAF,EAAeoD,aAAf,EAA8BC,cAA9B,KAAiDZ,CAAC,CAAC5E,MAAzD;AACA,QAAM4E,CAAC,CAACQ,0CAAF,CAA6C,CAACG,aAAD,EAAgBC,cAAhB,CAA7C,CAAN;;AAEA,QAAMC,QAAQ,GAAGb,CAAC,CAACtB,oBAAF;AACf,GAAC,EAAEtC,MAAM,EAAE,YAAV,EAAD,CADe;AAEfwE,EAAAA,cAAc,KAAK3E,SAAnB,GAA+B,EAAEG,MAAM,EAAEwE,cAAV,EAA/B,GAA4D3E,SAF7C,CAAjB;;;AAKA,QAAM,EAAEyB,OAAF,EAAWY,MAAX,KAAsB0B,CAAC,CAAC1C,yBAAF;AAC1BC,EAAAA,WAD0B;AAE1B,GAAC,YAAD,CAF0B;AAG1BoD,EAAAA,aAH0B,CAA5B;;AAKAjD,EAAAA,OAAO,CAACoD,WAAR,CAAoBD,QAApB;;AAEAb,EAAAA,CAAC,CAACG,qBAAF,CAAwB,MAAM;AAC5BH,IAAAA,CAAC,CAACI,KAAF,CAAQC,MAAR,CAAe,CAAC/B,MAAM,EAAP,CAAf;AACD,GAFD,EAEGqC,aAAa,KAAKC,cAFrB;AAGD,CA/BH;;AAiCArB,CAAC,CAACM,IAAF,CAAO,iDAAP;AACG7B,IADH;AAEK;AACL;AACA,CAJA;;AAMG5C,MANH;AAOIA,MAAM;AACH0E,OADH,CACW3E,QAAQ,CAAC,aAAD,EAAgB,CAAC,aAAD,EAAgB,eAAhB,CAAhB,CADnB;AAEG2E,OAFH,CAEW3E,QAAQ,CAAC,oBAAD,EAAuBQ,oBAAvB,CAFnB;AAGGmE,OAHH,CAGW3E,QAAQ,CAAC,qBAAD,EAAwBQ,oBAAxB,CAHnB,CAPJ;;AAYGoE,EAZH,CAYMC,CAAC,IAAI;AACP,QAAM,EAAEzC,WAAF,EAAe0D,kBAAf,EAAmCC,mBAAnC,KAA2DlB,CAAC,CAAC5E,MAAnE;AACA,QAAMyF,QAAQ,GAAGb,CAAC,CAACtB,oBAAF;AACf,GAAC,EAAEtC,MAAM,EAAE,YAAV,EAAD,CADe;AAEfH,EAAAA,SAFe;AAGfiF,EAAAA,mBAHe,CAAjB;;;AAMA,QAAM,EAAExD,OAAF,EAAWY,MAAX,KAAsB0B,CAAC,CAAC1C,yBAAF;AAC1BC,EAAAA,WAD0B;AAE1B,GAAC,YAAD,CAF0B;AAG1BtB,EAAAA,SAH0B;AAI1BgF,EAAAA,kBAJ0B,CAA5B;;AAMAvD,EAAAA,OAAO,CAACoD,WAAR,CAAoBD,QAApB;;AAEAb,EAAAA,CAAC,CAACG,qBAAF,CAAwB,MAAM;AAC5BH,IAAAA,CAAC,CAACI,KAAF,CAAQC,MAAR,CAAe,CAAC/B,MAAM,EAAP,CAAf;AACD,GAFD,EAEG2C,kBAAkB,KAAKC,mBAF1B;AAGD,CA/BH","sourcesContent":["export const description = `\nValidation for attachment compatibility between render passes, bundles, and pipelines\n\nTODO: Add sparse color attachment compatibility test when defined by specification\n`;\n\nimport { poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { range } from '../../../common/framework/util/util.js';\nimport {\n  kRegularTextureFormatInfo,\n  kRegularTextureFormats,\n  kSizedDepthStencilFormats,\n  kUnsizedDepthStencilFormats,\n  kTextureSampleCounts,\n  kMaxColorAttachments,\n} from '../../capability_info.js';\n\nimport { ValidationTest, CommandBufferMaker } from './validation_test.js';\n\nconst kColorAttachmentCounts = range(kMaxColorAttachments, i => i + 1);\nconst kDepthStencilAttachmentFormats = [\n  undefined,\n  ...kSizedDepthStencilFormats,\n  ...kUnsizedDepthStencilFormats,\n] as const;\n\nclass F extends ValidationTest {\n  createAttachmentTextureView(format: GPUTextureFormat, sampleCount?: number) {\n    return this.device\n      .createTexture({\n        size: [1, 1, 1],\n        format,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        sampleCount,\n      })\n      .createView();\n  }\n\n  createColorAttachment(\n    format: GPUTextureFormat,\n    sampleCount?: number\n  ): GPURenderPassColorAttachment {\n    return {\n      view: this.createAttachmentTextureView(format, sampleCount),\n      loadValue: [0, 0, 0, 0],\n      storeOp: 'store',\n    };\n  }\n\n  createDepthAttachment(\n    format: GPUTextureFormat,\n    sampleCount?: number\n  ): GPURenderPassDepthStencilAttachment {\n    return {\n      view: this.createAttachmentTextureView(format, sampleCount),\n      depthLoadValue: 0,\n      depthStoreOp: 'clear',\n      stencilLoadValue: 1,\n      stencilStoreOp: 'clear',\n    };\n  }\n\n  createPassOrBundleEncoder(\n    encoderType: 'render pass' | 'render bundle',\n    colorFormats: Iterable<GPUTextureFormat>,\n    depthStencilFormat?: GPUTextureFormat,\n    sampleCount?: number\n  ): CommandBufferMaker<'render pass' | 'render bundle'> {\n    const encoder = this.device.createCommandEncoder();\n    const passDesc: GPURenderPassDescriptor = {\n      colorAttachments: Array.from(colorFormats, desc =>\n        this.createColorAttachment(desc, sampleCount)\n      ),\n      depthStencilAttachment:\n        depthStencilFormat !== undefined\n          ? this.createDepthAttachment(depthStencilFormat, sampleCount)\n          : undefined,\n    };\n    const pass = encoder.beginRenderPass(passDesc);\n    switch (encoderType) {\n      case 'render bundle': {\n        const bundleEncoder = this.device.createRenderBundleEncoder({\n          colorFormats,\n          depthStencilFormat,\n          sampleCount,\n        });\n\n        return {\n          encoder: bundleEncoder,\n          finish() {\n            const bundle = bundleEncoder.finish();\n            pass.executeBundles([bundle]);\n            pass.endPass();\n            return encoder.finish();\n          },\n        };\n      }\n      case 'render pass':\n        return {\n          encoder: pass,\n          finish() {\n            pass.endPass();\n            return encoder.finish();\n          },\n        };\n    }\n  }\n\n  createRenderPipeline(\n    targets: Iterable<GPUColorTargetState>,\n    depthStencil?: GPUDepthStencilState,\n    sampleCount?: number\n  ) {\n    return this.device.createRenderPipeline({\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            [[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n              return vec4<f32>(0.0, 0.0, 0.0, 0.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: '[[stage(fragment)]] fn main() {}',\n        }),\n        entryPoint: 'main',\n        targets,\n      },\n      primitive: { topology: 'triangle-list' },\n      depthStencil,\n      multisample: { count: sampleCount },\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\nconst kColorAttachmentFormats = kRegularTextureFormats.filter(format => {\n  const info = kRegularTextureFormatInfo[format];\n  return info.color && info.renderable;\n});\n\ng.test('render_pass_and_bundle,color_format')\n  .desc('Test that color attachment formats in render passes and bundles must match.')\n  .params(\n    params()\n      .combine(poptions('passFormat', kColorAttachmentFormats))\n      .combine(poptions('bundleFormat', kColorAttachmentFormats))\n  )\n  .fn(t => {\n    const { passFormat, bundleFormat } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: [bundleFormat],\n    });\n    const bundle = bundleEncoder.finish();\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment(passFormat)],\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, passFormat !== bundleFormat);\n  });\n\ng.test('render_pass_and_bundle,color_count')\n  .desc(\n    `\n  Test that the number of color attachments in render passes and bundles must match.\n\n  TODO: Add sparse color attachment compatibility test when defined by specification\n  `\n  )\n  .params(\n    params()\n      .combine(poptions('passCount', kColorAttachmentCounts))\n      .combine(poptions('bundleCount', kColorAttachmentCounts))\n  )\n  .fn(t => {\n    const { passCount, bundleCount } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: range(bundleCount, () => 'rgba8unorm'),\n    });\n    const bundle = bundleEncoder.finish();\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: range(passCount, () => t.createColorAttachment('rgba8unorm')),\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, passCount !== bundleCount);\n  });\n\ng.test('render_pass_and_bundle,depth_format')\n  .desc('Test that the depth attachment format in render passes and bundles must match.')\n  .params(\n    params()\n      .combine(poptions('passFormat', kDepthStencilAttachmentFormats))\n      .combine(poptions('bundleFormat', kDepthStencilAttachmentFormats))\n  )\n  .fn(async t => {\n    const { passFormat, bundleFormat } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase([passFormat, bundleFormat]);\n\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      depthStencilFormat: bundleFormat,\n    });\n    const bundle = bundleEncoder.finish();\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm')],\n      depthStencilAttachment:\n        passFormat !== undefined ? t.createDepthAttachment(passFormat) : undefined,\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, passFormat !== bundleFormat);\n  });\n\ng.test('render_pass_and_bundle,sample_count')\n  .desc('Test that the sample count in render passes and bundles must match.')\n  .params(\n    params()\n      .combine(poptions('renderSampleCount', kTextureSampleCounts))\n      .combine(poptions('bundleSampleCount', kTextureSampleCounts))\n  )\n  .fn(t => {\n    const { renderSampleCount, bundleSampleCount } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      sampleCount: bundleSampleCount,\n    });\n    const bundle = bundleEncoder.finish();\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm', renderSampleCount)],\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, renderSampleCount !== bundleSampleCount);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_format')\n  .desc(\n    `\nTest that color attachment formats in render passes or bundles match the pipeline color format.\n`\n  )\n  .params(\n    params()\n      .combine(poptions('encoderType', ['render pass', 'render bundle'] as const))\n      .combine(poptions('encoderFormat', kColorAttachmentFormats))\n      .combine(poptions('pipelineFormat', kColorAttachmentFormats))\n  )\n  .fn(t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n    const pipeline = t.createRenderPipeline([{ format: pipelineFormat }]);\n\n    const { encoder, finish } = t.createPassOrBundleEncoder(encoderType, [encoderFormat]);\n    encoder.setPipeline(pipeline);\n\n    t.expectValidationError(() => {\n      t.queue.submit([finish()]);\n    }, encoderFormat !== pipelineFormat);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_count')\n  .desc(\n    `\nTest that the number of color attachments in render passes or bundles match the pipeline color\ncount.\n\nTODO: Add sparse color attachment compatibility test when defined by specification\n`\n  )\n  .params(\n    params()\n      .combine(poptions('encoderType', ['render pass', 'render bundle'] as const))\n      .combine(poptions('encoderCount', kColorAttachmentCounts))\n      .combine(poptions('pipelineCount', kColorAttachmentCounts))\n  )\n  .fn(t => {\n    const { encoderType, encoderCount, pipelineCount } = t.params;\n    const pipeline = t.createRenderPipeline(range(pipelineCount, () => ({ format: 'rgba8unorm' })));\n\n    const { encoder, finish } = t.createPassOrBundleEncoder(\n      encoderType,\n      range(encoderCount, () => 'rgba8unorm')\n    );\n    encoder.setPipeline(pipeline);\n\n    t.expectValidationError(() => {\n      t.queue.submit([finish()]);\n    }, encoderCount !== pipelineCount);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,depth_format')\n  .desc(\n    `\nTest that the depth attachment format in render passes or bundles match the pipeline depth format.\n`\n  )\n  .params(\n    params()\n      .combine(poptions('encoderType', ['render pass', 'render bundle'] as const))\n      .combine(poptions('encoderFormat', kDepthStencilAttachmentFormats))\n      .combine(poptions('pipelineFormat', kDepthStencilAttachmentFormats))\n  )\n  .fn(async t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase([encoderFormat, pipelineFormat]);\n\n    const pipeline = t.createRenderPipeline(\n      [{ format: 'rgba8unorm' }],\n      pipelineFormat !== undefined ? { format: pipelineFormat } : undefined\n    );\n\n    const { encoder, finish } = t.createPassOrBundleEncoder(\n      encoderType,\n      ['rgba8unorm'],\n      encoderFormat\n    );\n    encoder.setPipeline(pipeline);\n\n    t.expectValidationError(() => {\n      t.queue.submit([finish()]);\n    }, encoderFormat !== pipelineFormat);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,sample_count')\n  .desc(\n    `\nTest that the sample count in render passes or bundles match the pipeline sample count.\n`\n  )\n  .params(\n    params()\n      .combine(poptions('encoderType', ['render pass', 'render bundle'] as const))\n      .combine(poptions('encoderSampleCount', kTextureSampleCounts))\n      .combine(poptions('pipelineSampleCount', kTextureSampleCounts))\n  )\n  .fn(t => {\n    const { encoderType, encoderSampleCount, pipelineSampleCount } = t.params;\n    const pipeline = t.createRenderPipeline(\n      [{ format: 'rgba8unorm' }],\n      undefined,\n      pipelineSampleCount\n    );\n\n    const { encoder, finish } = t.createPassOrBundleEncoder(\n      encoderType,\n      ['rgba8unorm'],\n      undefined,\n      encoderSampleCount\n    );\n    encoder.setPipeline(pipeline);\n\n    t.expectValidationError(() => {\n      t.queue.submit([finish()]);\n    }, encoderSampleCount !== pipelineSampleCount);\n  });\n"],"file":"attachment_compatibility.spec.js"}