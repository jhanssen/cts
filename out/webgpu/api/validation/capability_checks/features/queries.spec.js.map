{"version":3,"sources":["../../../../../../src/webgpu/api/validation/capability_checks/features/queries.spec.ts"],"names":["description","params","pbool","poptions","makeTestGroup","ValidationTest","g","test","desc","combine","fn","t","type","pipelineStatisticsQueryEnable","timestampQueryEnable","extensions","push","selectDeviceOrSkipTestCase","count","pipelineStatistics","shouldError","expectValidationError","device","createQuerySet"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAG,EAApB,CAEP,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,mDAAxC;AACA,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,cAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA,GAPA;;AASGP,MATH;AAUIA,MAAM;AACHQ,OADH,CACWN,QAAQ,CAAC,MAAD,EAAS,CAAC,WAAD,EAAc,qBAAd,EAAqC,WAArC,CAAT,CADnB;AAEGM,OAFH,CAEWP,KAAK,CAAC,+BAAD,CAFhB;AAGGO,OAHH,CAGWP,KAAK,CAAC,sBAAD,CAHhB,CAVJ;;AAeGQ,EAfH,CAeM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,IAAF,EAAQC,6BAAR,EAAuCC,oBAAvC,KAAgEH,CAAC,CAACV,MAAxE;;AAEA,QAAMc,UAA8B,GAAG,EAAvC;AACA,MAAIF,6BAAJ,EAAmC;AACjCE,IAAAA,UAAU,CAACC,IAAX,CAAgB,2BAAhB;AACD;AACD,MAAIF,oBAAJ,EAA0B;AACxBC,IAAAA,UAAU,CAACC,IAAX,CAAgB,iBAAhB;AACD;;AAED,QAAML,CAAC,CAACM,0BAAF,CAA6B,EAAEF,UAAF,EAA7B,CAAN;;AAEA,QAAMG,KAAK,GAAG,CAAd;AACA,QAAMC,kBAAkB;AACtBP,EAAAA,IAAI,KAAK,qBAAT,GAAkC,CAAC,qBAAD,CAAlC,GAAuE,EADzE;AAEA,QAAMQ,WAAW;AACdR,EAAAA,IAAI,KAAK,qBAAT,IAAkC,CAACC,6BAApC;AACCD,EAAAA,IAAI,KAAK,WAAT,IAAwB,CAACE,oBAF5B;;AAIAH,EAAAA,CAAC,CAACU,qBAAF,CAAwB,MAAM;AAC5BV,IAAAA,CAAC,CAACW,MAAF,CAASC,cAAT,CAAwB,EAAEX,IAAF,EAAQM,KAAR,EAAeC,kBAAf,EAAxB;AACD,GAFD,EAEGC,WAFH;AAGD,CAtCH","sourcesContent":["export const description = '';\n\nimport { params, pbool, poptions } from '../../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('createQuerySet')\n  .desc(\n    `\nTests that creating query set shouldn't be valid without the required feature enabled.\n- createQuerySet\n  - type {occlusion, pipeline-statistics, timestamp}\n  - x= {pipeline statistics, timestamp} query {enable, disable}\n  `\n  )\n  .params(\n    params()\n      .combine(poptions('type', ['occlusion', 'pipeline-statistics', 'timestamp'] as const))\n      .combine(pbool('pipelineStatisticsQueryEnable'))\n      .combine(pbool('timestampQueryEnable'))\n  )\n  .fn(async t => {\n    const { type, pipelineStatisticsQueryEnable, timestampQueryEnable } = t.params;\n\n    const extensions: GPUExtensionName[] = [];\n    if (pipelineStatisticsQueryEnable) {\n      extensions.push('pipeline-statistics-query');\n    }\n    if (timestampQueryEnable) {\n      extensions.push('timestamp-query');\n    }\n\n    await t.selectDeviceOrSkipTestCase({ extensions });\n\n    const count = 1;\n    const pipelineStatistics =\n      type === 'pipeline-statistics' ? (['clipper-invocations'] as const) : ([] as const);\n    const shouldError =\n      (type === 'pipeline-statistics' && !pipelineStatisticsQueryEnable) ||\n      (type === 'timestamp' && !timestampQueryEnable);\n\n    t.expectValidationError(() => {\n      t.device.createQuerySet({ type, count, pipelineStatistics });\n    }, shouldError);\n  });\n"],"file":"queries.spec.js"}