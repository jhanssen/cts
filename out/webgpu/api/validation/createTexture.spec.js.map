{"version":3,"sources":["../../../../src/webgpu/api/validation/createTexture.spec.ts"],"names":["description","poptions","params","makeTestGroup","assert","kAllTextureFormats","kAllTextureFormatInfo","kCompressedTextureFormats","kCompressedTextureFormatInfo","kTextureDimensions","kTextureUsages","kUncompressedTextureFormats","kUncompressedTextureFormatInfo","textureDimensionAndFormatCompatible","DefaultLimits","GPUConst","maxMipLevelCount","ValidationTest","g","test","desc","cases","undefined","subcases","dimension","combine","filter","format","fn","t","zeroArgument","info","selectDeviceOrSkipTestCase","feature","size","blockWidth","blockHeight","mipLevelCount","descriptor","usage","GPUTextureUsage","SAMPLED","success","expectValidationError","device","createTexture","unless","sampleCount","multisample","arrayLayerCount","TextureUsage","RENDER_ATTACHMENT","renderable","STORAGE","storage","expand","p","_success","maxTextureDimension1D","width","height","depthOrArrayLayers","maxTextureDimension2D","maxTextureArrayLayers","maxTextureDimension3D","skip","usage0","usage1"],"mappings":"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","sourcesContent":["export const description = `createTexture validation tests.`;\n\nimport { poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/framework/util/util.js';\nimport {\n  kAllTextureFormats,\n  kAllTextureFormatInfo,\n  kCompressedTextureFormats,\n  kCompressedTextureFormatInfo,\n  kTextureDimensions,\n  kTextureUsages,\n  kUncompressedTextureFormats,\n  kUncompressedTextureFormatInfo,\n  textureDimensionAndFormatCompatible,\n} from '../../capability_info.js';\nimport { DefaultLimits, GPUConst } from '../../constants.js';\nimport { maxMipLevelCount } from '../../util/texture/base.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('zero_size')\n  .desc(\n    `Test texture creation with zero or nonzero size of\n    width, height, depthOrArrayLayers and mipLevelCount for every dimension, and representative formats.`\n  )\n  .cases(poptions('dimension', [undefined, ...kTextureDimensions]))\n  .subcases(({ dimension }) =>\n    params()\n      .combine(\n        poptions('zeroArgument', [\n          'none',\n          'width',\n          'height',\n          'depthOrArrayLayers',\n          'mipLevelCount',\n        ] as const)\n      )\n      .combine(\n        poptions('format', [\n          'rgba8unorm',\n          'rgb10a2unorm',\n          'bc1-rgba-unorm',\n          'depth24plus-stencil8',\n        ] as const)\n      )\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ format }) => textureDimensionAndFormatCompatible(dimension, format))\n  )\n  .fn(async t => {\n    const { dimension, zeroArgument, format } = t.params;\n    const info = kAllTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const size = [info.blockWidth, info.blockHeight, 1];\n    let mipLevelCount = 1;\n\n    switch (zeroArgument) {\n      case 'width':\n        size[0] = 0;\n        break;\n      case 'height':\n        size[1] = 0;\n        break;\n      case 'depthOrArrayLayers':\n        size[2] = 0;\n        break;\n      case 'mipLevelCount':\n        mipLevelCount = 0;\n        break;\n      default:\n        break;\n    }\n\n    const descriptor = {\n      size,\n      mipLevelCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success = zeroArgument === 'none';\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('dimension_type_and_format_compatibility')\n  .desc(\n    `Test every dimension type on every format. Note that compressed formats and depth/stencil formats are not valid for 1D/3D dimension types.`\n  )\n  .cases(poptions('dimension', [undefined, ...kTextureDimensions]))\n  .subcases(() => params().combine(poptions('format', kAllTextureFormats)))\n  .fn(async t => {\n    const { dimension, format } = t.params;\n    const info = kAllTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [info.blockWidth, info.blockHeight, 1],\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !textureDimensionAndFormatCompatible(dimension, format));\n  });\n\ng.test('mipLevelCount,format')\n  .desc(\n    `Test texture creation with no mipmap chain, partial mipmap chain, full mipmap chain, out-of-bounds mipmap chain\n    for every format with different texture dimension types.`\n  )\n  .cases(poptions('dimension', [undefined, ...kTextureDimensions]))\n  .subcases(({ dimension }) =>\n    params()\n      .combine(poptions('format', kAllTextureFormats))\n      .combine(poptions('mipLevelCount', [1, 3, 6, 7]))\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ format }) => textureDimensionAndFormatCompatible(dimension, format))\n  )\n  .fn(async t => {\n    const { dimension, format, mipLevelCount } = t.params;\n    const info = kAllTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    // Note that compressed formats are not valid for 1D. They have already been filtered out for 1D in this test.\n    // So there is no dilemma about size.width equals 1 vs size.width % info.blockHeight equals 0 for 1D compressed formats.\n    const size = dimension === '1d' ? [32, 1, 1] : [32, 32, 1];\n    assert(32 % info.blockWidth === 0 && 32 % info.blockHeight === 0);\n\n    const descriptor = {\n      size,\n      mipLevelCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success = mipLevelCount <= 6;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('mipLevelCount,bound_check')\n  .desc(\n    `Test mip level count bound check upon different texture size and different texture dimension types.\n    The cases below test: 1) there must be no mip levels after a 1 level (1D texture), or 1x1 level (2D texture), or 1x1x1 level (3D texture), 2) array layers are not mip-mapped, 3) power-of-two, non-power-of-two, and non-square sizes.`\n  )\n  .subcases(() =>\n    params()\n      .combine(poptions('format', ['rgba8unorm', 'bc1-rgba-unorm'] as const))\n      .combine([\n        { size: [32, 32] }, // Mip level sizes: 32x32, 16x16, 8x8, 4x4, 2x2, 1x1\n        { size: [31, 32] }, // Mip level sizes: 31x32, 15x16, 7x8, 3x4, 1x2, 1x1\n        { size: [28, 32] }, // Mip level sizes: 28x32, 14x16, 7x8, 3x4, 1x2, 1x1\n        { size: [32, 31] }, // Mip level sizes: 32x31, 16x15, 8x7, 4x3, 2x1, 1x1\n        { size: [32, 28] }, // Mip level sizes: 32x28, 16x14, 8x7, 4x3, 2x1, 1x1\n        { size: [31, 31] }, // Mip level sizes: 31x31, 15x15, 7x7, 3x3, 1x1\n        { size: [32], dimension: '1d' as const }, // Mip level sizes: 32, 16, 8, 4, 2, 1\n        { size: [31], dimension: '1d' as const }, // Mip level sizes: 31, 15, 7, 3, 1\n        { size: [32, 32, 32], dimension: '3d' as const }, // Mip level sizes: 32x32x32, 16x16x16, 8x8x8, 4x4x4, 2x2x2, 1x1x1\n        { size: [32, 31, 31], dimension: '3d' as const }, // Mip level sizes: 32x31x31, 16x15x15, 8x7x7, 4x3x3, 2x1x1, 1x1x1\n        { size: [31, 32, 31], dimension: '3d' as const }, // Mip level sizes: 31x32x31, 15x16x15, 7x8x7, 3x4x3, 1x2x1, 1x1x1\n        { size: [31, 31, 32], dimension: '3d' as const }, // Mip level sizes: 31x31x32, 15x15x16, 7x7x8, 3x3x4, 1x1x2, 1x1x1\n        { size: [31, 31, 31], dimension: '3d' as const }, // Mip level sizes: 31x31x31, 15x15x15, 7x7x7, 3x3x3, 1x1x1\n        { size: [32, 8] }, // Mip levels: 32x8, 16x4, 8x2, 4x1, 2x1, 1x1\n        { size: [32, 32, 64] }, // Mip levels: 32x32x64, 16x16x64, 8x8x64, 4x4x64, 2x2x64, 1x1x64\n        { size: [32, 32, 64], dimension: '3d' as const }, // Mip levels: 32x32x64, 16x16x32, 8x8x16, 4x4x8, 2x2x4, 1x1x2, 1x1x1\n      ])\n      .unless(\n        ({ format, size, dimension }) =>\n          format === 'bc1-rgba-unorm' &&\n          (dimension === '1d' ||\n            dimension === '3d' ||\n            size[0] % kAllTextureFormatInfo[format].blockWidth !== 0 ||\n            size[1] % kAllTextureFormatInfo[format].blockHeight !== 0)\n      )\n  )\n  .fn(async t => {\n    const { format, size, dimension } = t.params;\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].feature);\n\n    const descriptor = {\n      size,\n      mipLevelCount: 0,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const mipLevelCount = maxMipLevelCount(descriptor);\n    descriptor.mipLevelCount = mipLevelCount;\n    t.device.createTexture(descriptor);\n\n    descriptor.mipLevelCount = mipLevelCount + 1;\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('mipLevelCount,bound_check,bigger_than_integer_bit_width')\n  .desc(`Test mip level count bound check when mipLevelCount is bigger than integer bit width`)\n  .fn(async t => {\n    const descriptor = {\n      size: [32, 32],\n      mipLevelCount: 100,\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('sampleCount,various_sampleCount_with_all_formats')\n  .desc(\n    `Test texture creation with various (valid or invalid) sample count and all formats. Note that 1D and 3D textures can't support multisample.`\n  )\n  .cases(poptions('dimension', [undefined, '2d'] as const))\n  .subcases(() =>\n    params()\n      .combine(poptions('sampleCount', [0, 1, 2, 4, 8, 16, 32, 256]))\n      .combine(poptions('format', kAllTextureFormats))\n  )\n  .fn(async t => {\n    const { dimension, sampleCount, format } = t.params;\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].feature);\n\n    const descriptor = {\n      size: [32, 32, 1],\n      sampleCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      sampleCount === 1 || (sampleCount === 4 && kAllTextureFormatInfo[format].multisample);\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('sampleCount,valid_sampleCount_with_other_parameter_varies')\n  .desc(\n    `Test texture creation with valid sample count when dimensions, arrayLayerCount, mipLevelCount, format, and usage varies.\n     Texture can be single sample (sampleCount is 1) or multi-sample (sampleCount is 4).\n     Multisample texture requires that 1) its dimension is 2d or undefined, 2) its format supports multisample, 3) its mipLevelCount and arrayLayerCount are 1, 4) its usage doesn't include STORAGE.`\n  )\n  .cases(poptions('dimension', [undefined, ...kTextureDimensions]))\n  .subcases(({ dimension }) =>\n    params()\n      .combine(poptions('sampleCount', [1, 4]))\n      .combine(poptions('arrayLayerCount', [1, 2]))\n      .unless(\n        ({ arrayLayerCount }) =>\n          arrayLayerCount === 2 && dimension !== '2d' && dimension !== undefined\n      )\n      .combine(poptions('mipLevelCount', [1, 2]))\n      .combine(poptions('format', kAllTextureFormats))\n      .combine(poptions('usage', kTextureUsages))\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .unless(({ usage, format }) => {\n        const info = kAllTextureFormatInfo[format];\n        return (\n          ((usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 && !info.renderable) ||\n          ((usage & GPUConst.TextureUsage.STORAGE) !== 0 && !info.storage)\n        );\n      })\n  )\n  .fn(async t => {\n    const { dimension, sampleCount, format, mipLevelCount, arrayLayerCount, usage } = t.params;\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].feature);\n\n    const size =\n      dimension === '1d'\n        ? [32, 1, 1]\n        : dimension === '2d' || dimension === undefined\n        ? [32, 32, arrayLayerCount]\n        : [32, 32, 32];\n    const descriptor = {\n      size,\n      mipLevelCount,\n      sampleCount,\n      dimension,\n      format,\n      usage,\n    };\n\n    const success =\n      sampleCount === 1 ||\n      (sampleCount === 4 &&\n        (dimension === '2d' || dimension === undefined) &&\n        kAllTextureFormatInfo[format].multisample &&\n        mipLevelCount === 1 &&\n        arrayLayerCount === 1 &&\n        (usage & GPUConst.TextureUsage.STORAGE) === 0);\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,default_value_and_smallest_size,uncompressed_format')\n  .desc(\n    `Test default values for height and depthOrArrayLayers for every dimension type and every uncompressed format.\n\t  It also tests smallest size (lower bound) for every dimension type and every uncompressed format, while other texture_size tests are testing the upper bound.`\n  )\n  .cases(poptions('dimension', [undefined, ...kTextureDimensions]))\n  .subcases(({ dimension }) =>\n    params()\n      .combine(poptions('format', kUncompressedTextureFormats))\n      .combine(poptions('size', [[1], [1, 1], [1, 1, 1]]))\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ format }) => textureDimensionAndFormatCompatible(dimension, format))\n  )\n  .fn(async t => {\n    const { dimension, format, size } = t.params;\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].feature);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    t.device.createTexture(descriptor);\n  });\n\ng.test('texture_size,default_value_and_smallest_size,compressed_format')\n  .desc(\n    `Test default values for height and depthOrArrayLayers for every dimension type and every compressed format.\n\t  It also tests smallest size (lower bound) for every dimension type and every compressed format, while other texture_size tests are testing the upper bound.`\n  )\n  // Compressed formats are invalid for 1D and 3D.\n  .cases(poptions('dimension', [undefined, '2d'] as const))\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kCompressedTextureFormats))\n      .expand(p => {\n        const { blockWidth, blockHeight } = kAllTextureFormatInfo[p.format];\n        return [\n          { size: [1], _success: false },\n          { size: [blockWidth], _success: false },\n          { size: [1, 1], _success: false },\n          { size: [blockWidth, blockHeight], _success: true },\n          { size: [1, 1, 1], _success: false },\n          { size: [blockWidth, blockHeight, 1], _success: true },\n        ];\n      })\n  )\n  .fn(async t => {\n    const { dimension, format, size, _success } = t.params;\n    const info = kCompressedTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !_success);\n  });\n\ng.test('texture_size,1d_texture')\n  .desc(`Test texture size requirement for 1D texture`)\n  .subcases(() =>\n    params()\n      // Compressed textures are invalid for 1D.\n      .combine(poptions('format', kUncompressedTextureFormats))\n      .combine(\n        poptions('width', [\n          DefaultLimits.maxTextureDimension1D - 1,\n          DefaultLimits.maxTextureDimension1D,\n          DefaultLimits.maxTextureDimension1D + 1,\n        ])\n      )\n      .combine(poptions('height', [1, 2]))\n      .combine(poptions('depthOrArrayLayers', [1, 2]))\n  )\n  .fn(async t => {\n    const { format, width, height, depthOrArrayLayers } = t.params;\n    await t.selectDeviceOrSkipTestCase(kUncompressedTextureFormatInfo[format].feature);\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [width, height, depthOrArrayLayers],\n      dimension: '1d' as const,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      width <= DefaultLimits.maxTextureDimension1D && height === 1 && depthOrArrayLayers === 1;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,uncompressed_format')\n  .desc(`Test texture size requirement for 2D texture with uncompressed format.`)\n  .cases(poptions('dimension', [undefined, '2d'] as const))\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kUncompressedTextureFormats))\n      .combine(\n        poptions('size', [\n          // Test the bound of width\n          [DefaultLimits.maxTextureDimension2D - 1, 1, 1],\n          [DefaultLimits.maxTextureDimension2D, 1, 1],\n          [DefaultLimits.maxTextureDimension2D + 1, 1, 1],\n          // Test the bound of height\n          [1, DefaultLimits.maxTextureDimension2D - 1, 1],\n          [1, DefaultLimits.maxTextureDimension2D, 1],\n          [1, DefaultLimits.maxTextureDimension2D + 1, 1],\n          // Test the bound of array layers\n          [1, 1, DefaultLimits.maxTextureArrayLayers - 1],\n          [1, 1, DefaultLimits.maxTextureArrayLayers],\n          [1, 1, DefaultLimits.maxTextureArrayLayers + 1],\n        ])\n      )\n  )\n  .fn(async t => {\n    const { dimension, format, size } = t.params;\n    await t.selectDeviceOrSkipTestCase(kUncompressedTextureFormatInfo[format].feature);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      size[0] <= DefaultLimits.maxTextureDimension2D &&\n      size[1] <= DefaultLimits.maxTextureDimension2D &&\n      size[2] <= DefaultLimits.maxTextureArrayLayers;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,compressed_format')\n  .desc(`Test texture size requirement for 2D texture with compressed format.`)\n  .cases(poptions('dimension', [undefined, '2d'] as const))\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kCompressedTextureFormats))\n      .expand(p => {\n        const { blockWidth, blockHeight } = kAllTextureFormatInfo[p.format];\n        return poptions('size', [\n          // Test the bound of width\n          [DefaultLimits.maxTextureDimension2D - 1, 1, 1],\n          [DefaultLimits.maxTextureDimension2D - blockWidth, 1, 1],\n          [DefaultLimits.maxTextureDimension2D - blockWidth, blockHeight, 1],\n          [DefaultLimits.maxTextureDimension2D, 1, 1],\n          [DefaultLimits.maxTextureDimension2D, blockHeight, 1],\n          [DefaultLimits.maxTextureDimension2D + 1, 1, 1],\n          [DefaultLimits.maxTextureDimension2D + blockWidth, 1, 1],\n          [DefaultLimits.maxTextureDimension2D + blockWidth, blockHeight, 1],\n          // Test the bound of height\n          [1, DefaultLimits.maxTextureDimension2D - 1, 1],\n          [1, DefaultLimits.maxTextureDimension2D - blockHeight, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension2D - blockHeight, 1],\n          [1, DefaultLimits.maxTextureDimension2D, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension2D, 1],\n          [1, DefaultLimits.maxTextureDimension2D + 1, 1],\n          [1, DefaultLimits.maxTextureDimension2D + blockWidth, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension2D + blockHeight, 1],\n          // Test the bound of array layers\n          [1, 1, DefaultLimits.maxTextureArrayLayers - 1],\n          [blockWidth, 1, DefaultLimits.maxTextureArrayLayers - 1],\n          [1, blockHeight, DefaultLimits.maxTextureArrayLayers - 1],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureArrayLayers - 1],\n          [1, 1, DefaultLimits.maxTextureArrayLayers],\n          [blockWidth, 1, DefaultLimits.maxTextureArrayLayers],\n          [1, blockHeight, DefaultLimits.maxTextureArrayLayers],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureArrayLayers],\n          [1, 1, DefaultLimits.maxTextureArrayLayers + 1],\n          [blockWidth, 1, DefaultLimits.maxTextureArrayLayers + 1],\n          [1, blockHeight, DefaultLimits.maxTextureArrayLayers + 1],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureArrayLayers + 1],\n        ]);\n      })\n  )\n  .fn(async t => {\n    const { dimension, format, size } = t.params;\n    const info = kCompressedTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    assert(\n      DefaultLimits.maxTextureDimension2D % info.blockWidth === 0 &&\n        DefaultLimits.maxTextureDimension2D % info.blockHeight === 0\n    );\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= DefaultLimits.maxTextureDimension2D &&\n      size[1] <= DefaultLimits.maxTextureDimension2D &&\n      size[2] <= DefaultLimits.maxTextureArrayLayers;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,uncompressed_format')\n  .desc(`Test texture size requirement for 3D texture with uncompressed format.`)\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kUncompressedTextureFormats))\n      .combine(\n        poptions('size', [\n          // Test the bound of width\n          [DefaultLimits.maxTextureDimension3D - 1, 1, 1],\n          [DefaultLimits.maxTextureDimension3D, 1, 1],\n          [DefaultLimits.maxTextureDimension3D + 1, 1, 1],\n          // Test the bound of height\n          [1, DefaultLimits.maxTextureDimension3D - 1, 1],\n          [1, DefaultLimits.maxTextureDimension3D, 1],\n          [1, DefaultLimits.maxTextureDimension3D + 1, 1],\n          // Test the bound of depth\n          [1, 1, DefaultLimits.maxTextureDimension3D - 1],\n          [1, 1, DefaultLimits.maxTextureDimension3D],\n          [1, 1, DefaultLimits.maxTextureDimension3D + 1],\n        ])\n      )\n  )\n  .fn(async t => {\n    const { format, size } = t.params;\n    await t.selectDeviceOrSkipTestCase(kUncompressedTextureFormatInfo[format].feature);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      size[0] <= DefaultLimits.maxTextureDimension3D &&\n      size[1] <= DefaultLimits.maxTextureDimension3D &&\n      size[2] <= DefaultLimits.maxTextureDimension3D;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,compressed_format')\n  .desc(`Test texture size requirement for 3D texture with compressed format.`)\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kCompressedTextureFormats))\n      .expand(p => {\n        const { blockWidth, blockHeight } = kAllTextureFormatInfo[p.format];\n        return poptions('size', [\n          // Test the bound of width\n          [DefaultLimits.maxTextureDimension3D - 1, 1, 1],\n          [DefaultLimits.maxTextureDimension3D - blockWidth, 1, 1],\n          [DefaultLimits.maxTextureDimension3D - blockWidth, blockHeight, 1],\n          [DefaultLimits.maxTextureDimension3D, 1, 1],\n          [DefaultLimits.maxTextureDimension3D, blockHeight, 1],\n          [DefaultLimits.maxTextureDimension3D + 1, 1, 1],\n          [DefaultLimits.maxTextureDimension3D + blockWidth, 1, 1],\n          [DefaultLimits.maxTextureDimension3D + blockWidth, blockHeight, 1],\n          // Test the bound of height\n          [1, DefaultLimits.maxTextureDimension3D - 1, 1],\n          [1, DefaultLimits.maxTextureDimension3D - blockHeight, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension3D - blockHeight, 1],\n          [1, DefaultLimits.maxTextureDimension3D, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension3D, 1],\n          [1, DefaultLimits.maxTextureDimension3D + 1, 1],\n          [1, DefaultLimits.maxTextureDimension3D + blockWidth, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension3D + blockHeight, 1],\n          // Test the bound of depth\n          [1, 1, DefaultLimits.maxTextureDimension3D - 1],\n          [blockWidth, 1, DefaultLimits.maxTextureDimension3D - 1],\n          [1, blockHeight, DefaultLimits.maxTextureDimension3D - 1],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureDimension3D - 1],\n          [1, 1, DefaultLimits.maxTextureDimension3D],\n          [blockWidth, 1, DefaultLimits.maxTextureDimension3D],\n          [1, blockHeight, DefaultLimits.maxTextureDimension3D],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureDimension3D],\n          [1, 1, DefaultLimits.maxTextureDimension3D + 1],\n          [blockWidth, 1, DefaultLimits.maxTextureDimension3D + 1],\n          [1, blockHeight, DefaultLimits.maxTextureDimension3D + 1],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureDimension3D + 1],\n        ]);\n      })\n  )\n  .fn(async t => {\n    const { format, size } = t.params;\n\n    // Compressed formats are not supported in 3D in WebGPU v1 because they are complicated but not very useful for now.\n    t.skip('Compressed 3D texture is not supported');\n\n    const info = kCompressedTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    assert(\n      DefaultLimits.maxTextureDimension3D % info.blockWidth === 0 &&\n        DefaultLimits.maxTextureDimension3D % info.blockHeight === 0\n    );\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= DefaultLimits.maxTextureDimension3D &&\n      size[1] <= DefaultLimits.maxTextureDimension3D &&\n      size[2] <= DefaultLimits.maxTextureDimension3D;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_usage')\n  .desc(\n    `Test texture usage (single usage or combined usages) for every texture format and every dimension type`\n  )\n  .cases(poptions('dimension', [undefined, ...kTextureDimensions]))\n  .subcases(({ dimension }) =>\n    params()\n      .combine(poptions('format', kAllTextureFormats))\n      // If usage0 and usage1 are the same, then the usage being test is a single usage. Otherwise, it is a combined usage.\n      .combine(poptions('usage0', kTextureUsages))\n      .combine(poptions('usage1', kTextureUsages))\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ format }) => textureDimensionAndFormatCompatible(dimension, format))\n  )\n  .fn(async t => {\n    const { dimension, format, usage0, usage1 } = t.params;\n    const info = kAllTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const size = [info.blockWidth, info.blockHeight, 1];\n    const usage = usage0 | usage1;\n    const descriptor = {\n      size,\n      dimension,\n      format,\n      usage,\n    };\n\n    let success = true;\n    // Note that we unconditionally test copy usages for all formats. We don't check copySrc/copyDst in kAllTextureFormatInfo in capability_info.js\n    // if (!info.copySrc && (usage & GPUTextureUsage.COPY_SRC) !== 0) success = false;\n    // if (!info.copyDst && (usage & GPUTextureUsage.COPY_DST) !== 0) success = false;\n    if (!info.storage && (usage & GPUTextureUsage.STORAGE) !== 0) success = false;\n    if (!info.renderable && (usage & GPUTextureUsage.RENDER_ATTACHMENT) !== 0) success = false;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n"],"file":"createTexture.spec.js"}