{"version":3,"sources":["../../../../src/webgpu/api/validation/createTexture.spec.ts"],"names":["description","poptions","params","makeTestGroup","assert","kAllTextureFormats","kAllTextureFormatInfo","kCompressedTextureFormats","kCompressedTextureFormatInfo","kTextureDimensions","kTextureUsages","kUncompressedTextureFormats","kUncompressedTextureFormatInfo","DefaultLimits","GPUConst","maxMipLevelCount","ValidationTest","g","test","desc","cases","undefined","subcases","dimension","combine","unless","format","fn","t","zeroArgument","info","selectDeviceOrSkipTestCase","extension","size","blockWidth","blockHeight","mipLevelCount","descriptor","usage","GPUTextureUsage","SAMPLED","success","expectValidationError","device","createTexture","sampleCount","multisample","arrayLayerCount","TextureUsage","RENDER_ATTACHMENT","renderable","STORAGE","storage","expand","p","_success","maxTextureDimension1D","width","height","depthOrArrayLayers","maxTextureDimension2D","maxTextureArrayLayers","maxTextureDimension3D","skip","usage0","usage1"],"mappings":"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","sourcesContent":["export const description = `createTexture validation tests.`;\n\nimport { poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/framework/util/util.js';\nimport {\n  kAllTextureFormats,\n  kAllTextureFormatInfo,\n  kCompressedTextureFormats,\n  kCompressedTextureFormatInfo,\n  kTextureDimensions,\n  kTextureUsages,\n  kUncompressedTextureFormats,\n  kUncompressedTextureFormatInfo,\n} from '../../capability_info.js';\nimport { DefaultLimits, GPUConst } from '../../constants.js';\nimport { maxMipLevelCount } from '../../util/texture/base.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('zero_size')\n  .desc(\n    `Test texture creation with zero or nonzero size of\n    width, height, depthOrArrayLayers and mipLevelCount for every dimension, and representative formats.\n    TODO: add tests for depth/stencil format if depth/stencil format can support mipmaps.`\n  )\n  .cases(poptions('dimension', [undefined, ...kTextureDimensions]))\n  .subcases(({ dimension }) =>\n    params()\n      .combine(\n        poptions('zeroArgument', [\n          'none',\n          'width',\n          'height',\n          'depthOrArrayLayers',\n          'mipLevelCount',\n        ] as const)\n      )\n      .combine(poptions('format', ['rgba8unorm', 'rgb10a2unorm', 'bc1-rgba-unorm'] as const))\n      .unless(\n        ({ format }) => format === 'bc1-rgba-unorm' && dimension !== '2d' && dimension !== undefined\n      )\n  )\n  .fn(async t => {\n    const { dimension, zeroArgument, format } = t.params;\n\n    const info = kAllTextureFormatInfo[format];\n\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    const size = [info.blockWidth, info.blockHeight, 1];\n    let mipLevelCount = 1;\n\n    switch (zeroArgument) {\n      case 'width':\n        size[0] = 0;\n        break;\n      case 'height':\n        size[1] = 0;\n        break;\n      case 'depthOrArrayLayers':\n        size[2] = 0;\n        break;\n      case 'mipLevelCount':\n        mipLevelCount = 0;\n        break;\n      default:\n        break;\n    }\n\n    const descriptor = {\n      size,\n      mipLevelCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success = zeroArgument === 'none';\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('mipLevelCount,format')\n  .desc(\n    `Test texture creation with no mipmap chain, partial mipmap chain, full mipmap chain, out-of-bounds mipmap chain\n    for every format with different texture dimension types.\n    TODO: test 1D and 3D dimensions. Note that it is invalid for some formats with 1D/3D and/or mipmapping.`\n  )\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kAllTextureFormats))\n      .combine(poptions('mipLevelCount', [1, 3, 6, 7]))\n  )\n  .fn(async t => {\n    const { format, mipLevelCount } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const size = [32, 32, 1];\n    const descriptor = {\n      size,\n      mipLevelCount,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success = mipLevelCount <= 6;\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('mipLevelCount,bound_check')\n  .desc(\n    `Test mip level count bound check upon different texture size and different texture dimension types.\n    The cases below test: 1) there must be no mip levels after a 1 level (1D texture), or 1x1 level (2D texture), or 1x1x1 level (3D texture), 2) array layers are not mip-mapped, 3) power-of-two, non-power-of-two, and non-square sizes.`\n  )\n  .subcases(() =>\n    params()\n      .combine(poptions('format', ['rgba8unorm', 'bc1-rgba-unorm'] as const))\n      .combine([\n        { size: [32, 32] }, // Mip level sizes: 32x32, 16x16, 8x8, 4x4, 2x2, 1x1\n        { size: [31, 32] }, // Mip level sizes: 31x32, 15x16, 7x8, 3x4, 1x2, 1x1\n        { size: [28, 32] }, // Mip level sizes: 28x32, 14x16, 7x8, 3x4, 1x2, 1x1\n        { size: [32, 31] }, // Mip level sizes: 32x31, 16x15, 8x7, 4x3, 2x1, 1x1\n        { size: [32, 28] }, // Mip level sizes: 32x28, 16x14, 8x7, 4x3, 2x1, 1x1\n        { size: [31, 31] }, // Mip level sizes: 31x31, 15x15, 7x7, 3x3, 1x1\n        { size: [32], dimension: '1d' as const }, // Mip level sizes: 32, 16, 8, 4, 2, 1\n        { size: [31], dimension: '1d' as const }, // Mip level sizes: 31, 15, 7, 3, 1\n        { size: [32, 32, 32], dimension: '3d' as const }, // Mip level sizes: 32x32x32, 16x16x16, 8x8x8, 4x4x4, 2x2x2, 1x1x1\n        { size: [32, 31, 31], dimension: '3d' as const }, // Mip level sizes: 32x31x31, 16x15x15, 8x7x7, 4x3x3, 2x1x1, 1x1x1\n        { size: [31, 32, 31], dimension: '3d' as const }, // Mip level sizes: 31x32x31, 15x16x15, 7x8x7, 3x4x3, 1x2x1, 1x1x1\n        { size: [31, 31, 32], dimension: '3d' as const }, // Mip level sizes: 31x31x32, 15x15x16, 7x7x8, 3x3x4, 1x1x2, 1x1x1\n        { size: [31, 31, 31], dimension: '3d' as const }, // Mip level sizes: 31x31x31, 15x15x15, 7x7x7, 3x3x3, 1x1x1\n        { size: [32, 8] }, // Mip levels: 32x8, 16x4, 8x2, 4x1, 2x1, 1x1\n        { size: [32, 32, 64] }, // Mip levels: 32x32x64, 16x16x64, 8x8x64, 4x4x64, 2x2x64, 1x1x64\n        { size: [32, 32, 64], dimension: '3d' as const }, // Mip levels: 32x32x64, 16x16x32, 8x8x16, 4x4x8, 2x2x4, 1x1x2, 1x1x1\n      ])\n      .unless(\n        ({ format, size, dimension }) =>\n          format === 'bc1-rgba-unorm' &&\n          (dimension === '1d' ||\n            dimension === '3d' ||\n            size[0] % kAllTextureFormatInfo[format].blockWidth !== 0 ||\n            size[1] % kAllTextureFormatInfo[format].blockHeight !== 0)\n      )\n  )\n  .fn(async t => {\n    const { format, size, dimension } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const mipLevelCount = maxMipLevelCount(descriptor);\n    descriptor.mipLevelCount = mipLevelCount;\n    t.device.createTexture(descriptor);\n\n    descriptor.mipLevelCount = mipLevelCount + 1;\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('mipLevelCount,bound_check,bigger_than_integer_bit_width')\n  .desc(`Test mip level count bound check when mipLevelCount is bigger than integer bit width`)\n  .fn(async t => {\n    const descriptor = {\n      size: [32, 32],\n      mipLevelCount: 100,\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('sampleCount,various_sampleCount_with_all_formats')\n  .desc(`Test texture creation with various (valid or invalid) sample count and all formats`)\n  .subcases(() =>\n    params()\n      .combine(poptions('sampleCount', [0, 1, 2, 4, 8, 16, 32, 256]))\n      .combine(poptions('format', kAllTextureFormats))\n  )\n  .fn(async t => {\n    const { sampleCount, format } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const descriptor = {\n      size: [32, 32, 1],\n      sampleCount,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      sampleCount === 1 || (sampleCount === 4 && kAllTextureFormatInfo[format].multisample);\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('sampleCount,valid_sampleCount_with_other_parameter_varies')\n  .desc(\n    `Test texture creation with valid sample count when dimensions, arrayLayerCount, mipLevelCount, format, and usage varies.\n     Texture can be single sample (sampleCount is 1) or multi-sample (sampleCount is 4).\n     Multisample texture requires that 1) its dimension is 2d or undefined, 2) its format is a uncompressed format, 3) its mipLevelCount and arrayLayerCount are 1, 4) its usage doesn't include STORAGE.`\n  )\n  .cases(poptions('dimension', [undefined, ...kTextureDimensions]))\n  .subcases(({ dimension }) =>\n    params()\n      .combine(poptions('sampleCount', [1, 4]))\n      .combine(poptions('arrayLayerCount', [1, 2]))\n      .unless(\n        ({ arrayLayerCount }) =>\n          arrayLayerCount === 2 && dimension !== '2d' && dimension !== undefined\n      )\n      .combine(poptions('mipLevelCount', [1, 2]))\n      .combine(poptions('format', kAllTextureFormats))\n      .combine(poptions('usage', kTextureUsages))\n      .unless(({ usage, format }) => {\n        const info = kAllTextureFormatInfo[format];\n        return (\n          ((usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 && !info.renderable) ||\n          ((usage & GPUConst.TextureUsage.STORAGE) !== 0 && !info.storage)\n        );\n      })\n  )\n  .fn(async t => {\n    const { dimension, sampleCount, format, mipLevelCount, arrayLayerCount, usage } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const size =\n      dimension === '1d'\n        ? [32, 1, 1]\n        : dimension === '2d' || dimension === undefined\n        ? [32, 32, arrayLayerCount]\n        : [32, 32, 32];\n    const descriptor = {\n      size,\n      mipLevelCount,\n      sampleCount,\n      dimension,\n      format,\n      usage,\n    };\n\n    const success =\n      sampleCount === 1 ||\n      (sampleCount === 4 &&\n        (dimension === '2d' || dimension === undefined) &&\n        kAllTextureFormatInfo[format].multisample &&\n        mipLevelCount === 1 &&\n        arrayLayerCount === 1 &&\n        (usage & GPUConst.TextureUsage.STORAGE) === 0);\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,default_value_and_smallest_size,uncompressed_format')\n  .desc(\n    `Test default values for height and depthOrArrayLayers for every dimension type and every uncompressed format.\n\t  It also tests smallest size (lower bound) for every dimension type and every uncompressed format, while other texture_size tests are testing the upper bound.`\n  )\n  .cases(poptions('dimension', [undefined, ...kTextureDimensions]))\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kUncompressedTextureFormats))\n      .combine(poptions('size', [[1], [1, 1], [1, 1, 1]]))\n  )\n  .fn(async t => {\n    const { dimension, format, size } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    t.device.createTexture(descriptor);\n  });\n\ng.test('texture_size,default_value_and_smallest_size,compressed_format')\n  .desc(\n    `Test default values for height and depthOrArrayLayers for every dimension type and every compressed format.\n\t  It also tests smallest size (lower bound) for every dimension type and every compressed format, while other texture_size tests are testing the upper bound.`\n  )\n  .cases(poptions('dimension', [undefined, ...kTextureDimensions]))\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kCompressedTextureFormats))\n      .expand(p => {\n        const { blockWidth, blockHeight } = kAllTextureFormatInfo[p.format];\n        return [\n          { size: [1], _success: false },\n          { size: [blockWidth], _success: false },\n          { size: [1, 1], _success: false },\n          { size: [blockWidth, blockHeight], _success: true },\n          { size: [1, 1, 1], _success: false },\n          { size: [blockWidth, blockHeight, 1], _success: true },\n        ];\n      })\n  )\n  .fn(async t => {\n    const { dimension, format, size, _success } = t.params;\n\n    const info = kCompressedTextureFormatInfo[format];\n\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !_success);\n  });\n\ng.test('texture_size,1d_texture')\n  .desc(`Test texture size requirement for 1D texture`)\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kAllTextureFormats))\n      .combine(\n        poptions('width', [\n          DefaultLimits.maxTextureDimension1D - 1,\n          DefaultLimits.maxTextureDimension1D,\n          DefaultLimits.maxTextureDimension1D + 1,\n        ])\n      )\n      .combine(poptions('height', [1, 2]))\n      .combine(poptions('depthOrArrayLayers', [1, 2]))\n  )\n  .fn(async t => {\n    const { format, width, height, depthOrArrayLayers } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [width, height, depthOrArrayLayers],\n      dimension: '1d' as const,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      width <= DefaultLimits.maxTextureDimension1D && height === 1 && depthOrArrayLayers === 1;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,uncompressed_format')\n  .desc(`Test texture size requirement for 2D texture with uncompressed format.`)\n  .cases(poptions('dimension', [undefined, '2d'] as const))\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kUncompressedTextureFormats))\n      .combine(\n        poptions('size', [\n          // Test the bound of width\n          [DefaultLimits.maxTextureDimension2D - 1, 1, 1],\n          [DefaultLimits.maxTextureDimension2D, 1, 1],\n          [DefaultLimits.maxTextureDimension2D + 1, 1, 1],\n          // Test the bound of height\n          [1, DefaultLimits.maxTextureDimension2D - 1, 1],\n          [1, DefaultLimits.maxTextureDimension2D, 1],\n          [1, DefaultLimits.maxTextureDimension2D + 1, 1],\n          // Test the bound of array layers\n          [1, 1, DefaultLimits.maxTextureArrayLayers - 1],\n          [1, 1, DefaultLimits.maxTextureArrayLayers],\n          [1, 1, DefaultLimits.maxTextureArrayLayers + 1],\n        ])\n      )\n  )\n  .fn(async t => {\n    const { dimension, format, size } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kUncompressedTextureFormatInfo[format].extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      size[0] <= DefaultLimits.maxTextureDimension2D &&\n      size[1] <= DefaultLimits.maxTextureDimension2D &&\n      size[2] <= DefaultLimits.maxTextureArrayLayers;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,compressed_format')\n  .desc(`Test texture size requirement for 2D texture with compressed format.`)\n  .cases(poptions('dimension', [undefined, '2d'] as const))\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kCompressedTextureFormats))\n      .expand(p => {\n        const { blockWidth, blockHeight } = kAllTextureFormatInfo[p.format];\n        return poptions('size', [\n          // Test the bound of width\n          [DefaultLimits.maxTextureDimension2D - 1, 1, 1],\n          [DefaultLimits.maxTextureDimension2D - blockWidth, 1, 1],\n          [DefaultLimits.maxTextureDimension2D - blockWidth, blockHeight, 1],\n          [DefaultLimits.maxTextureDimension2D, 1, 1],\n          [DefaultLimits.maxTextureDimension2D, blockHeight, 1],\n          [DefaultLimits.maxTextureDimension2D + 1, 1, 1],\n          [DefaultLimits.maxTextureDimension2D + blockWidth, 1, 1],\n          [DefaultLimits.maxTextureDimension2D + blockWidth, blockHeight, 1],\n          // Test the bound of height\n          [1, DefaultLimits.maxTextureDimension2D - 1, 1],\n          [1, DefaultLimits.maxTextureDimension2D - blockHeight, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension2D - blockHeight, 1],\n          [1, DefaultLimits.maxTextureDimension2D, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension2D, 1],\n          [1, DefaultLimits.maxTextureDimension2D + 1, 1],\n          [1, DefaultLimits.maxTextureDimension2D + blockWidth, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension2D + blockHeight, 1],\n          // Test the bound of array layers\n          [1, 1, DefaultLimits.maxTextureArrayLayers - 1],\n          [blockWidth, 1, DefaultLimits.maxTextureArrayLayers - 1],\n          [1, blockHeight, DefaultLimits.maxTextureArrayLayers - 1],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureArrayLayers - 1],\n          [1, 1, DefaultLimits.maxTextureArrayLayers],\n          [blockWidth, 1, DefaultLimits.maxTextureArrayLayers],\n          [1, blockHeight, DefaultLimits.maxTextureArrayLayers],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureArrayLayers],\n          [1, 1, DefaultLimits.maxTextureArrayLayers + 1],\n          [blockWidth, 1, DefaultLimits.maxTextureArrayLayers + 1],\n          [1, blockHeight, DefaultLimits.maxTextureArrayLayers + 1],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureArrayLayers + 1],\n        ]);\n      })\n  )\n  .fn(async t => {\n    const { dimension, format, size } = t.params;\n\n    const info = kCompressedTextureFormatInfo[format];\n    assert(\n      DefaultLimits.maxTextureDimension2D % info.blockWidth === 0 &&\n        DefaultLimits.maxTextureDimension2D % info.blockHeight === 0\n    );\n\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= DefaultLimits.maxTextureDimension2D &&\n      size[1] <= DefaultLimits.maxTextureDimension2D &&\n      size[2] <= DefaultLimits.maxTextureArrayLayers;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,uncompressed_format')\n  .desc(`Test texture size requirement for 3D texture with uncompressed format.`)\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kUncompressedTextureFormats))\n      .combine(\n        poptions('size', [\n          // Test the bound of width\n          [DefaultLimits.maxTextureDimension3D - 1, 1, 1],\n          [DefaultLimits.maxTextureDimension3D, 1, 1],\n          [DefaultLimits.maxTextureDimension3D + 1, 1, 1],\n          // Test the bound of height\n          [1, DefaultLimits.maxTextureDimension3D - 1, 1],\n          [1, DefaultLimits.maxTextureDimension3D, 1],\n          [1, DefaultLimits.maxTextureDimension3D + 1, 1],\n          // Test the bound of depth\n          [1, 1, DefaultLimits.maxTextureDimension3D - 1],\n          [1, 1, DefaultLimits.maxTextureDimension3D],\n          [1, 1, DefaultLimits.maxTextureDimension3D + 1],\n        ])\n      )\n  )\n  .fn(async t => {\n    const { format, size } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kUncompressedTextureFormatInfo[format].extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      size[0] <= DefaultLimits.maxTextureDimension3D &&\n      size[1] <= DefaultLimits.maxTextureDimension3D &&\n      size[2] <= DefaultLimits.maxTextureDimension3D;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,compressed_format')\n  .desc(`Test texture size requirement for 3D texture with compressed format.`)\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kCompressedTextureFormats))\n      .expand(p => {\n        const { blockWidth, blockHeight } = kAllTextureFormatInfo[p.format];\n        return poptions('size', [\n          // Test the bound of width\n          [DefaultLimits.maxTextureDimension3D - 1, 1, 1],\n          [DefaultLimits.maxTextureDimension3D - blockWidth, 1, 1],\n          [DefaultLimits.maxTextureDimension3D - blockWidth, blockHeight, 1],\n          [DefaultLimits.maxTextureDimension3D, 1, 1],\n          [DefaultLimits.maxTextureDimension3D, blockHeight, 1],\n          [DefaultLimits.maxTextureDimension3D + 1, 1, 1],\n          [DefaultLimits.maxTextureDimension3D + blockWidth, 1, 1],\n          [DefaultLimits.maxTextureDimension3D + blockWidth, blockHeight, 1],\n          // Test the bound of height\n          [1, DefaultLimits.maxTextureDimension3D - 1, 1],\n          [1, DefaultLimits.maxTextureDimension3D - blockHeight, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension3D - blockHeight, 1],\n          [1, DefaultLimits.maxTextureDimension3D, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension3D, 1],\n          [1, DefaultLimits.maxTextureDimension3D + 1, 1],\n          [1, DefaultLimits.maxTextureDimension3D + blockWidth, 1],\n          [blockWidth, DefaultLimits.maxTextureDimension3D + blockHeight, 1],\n          // Test the bound of depth\n          [1, 1, DefaultLimits.maxTextureDimension3D - 1],\n          [blockWidth, 1, DefaultLimits.maxTextureDimension3D - 1],\n          [1, blockHeight, DefaultLimits.maxTextureDimension3D - 1],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureDimension3D - 1],\n          [1, 1, DefaultLimits.maxTextureDimension3D],\n          [blockWidth, 1, DefaultLimits.maxTextureDimension3D],\n          [1, blockHeight, DefaultLimits.maxTextureDimension3D],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureDimension3D],\n          [1, 1, DefaultLimits.maxTextureDimension3D + 1],\n          [blockWidth, 1, DefaultLimits.maxTextureDimension3D + 1],\n          [1, blockHeight, DefaultLimits.maxTextureDimension3D + 1],\n          [blockWidth, blockHeight, DefaultLimits.maxTextureDimension3D + 1],\n        ]);\n      })\n  )\n  .fn(async t => {\n    const { format, size } = t.params;\n\n    t.skip('Compressed 3D texture is not supported');\n\n    const info = kCompressedTextureFormatInfo[format];\n    assert(\n      DefaultLimits.maxTextureDimension3D % info.blockWidth === 0 &&\n        DefaultLimits.maxTextureDimension3D % info.blockHeight === 0\n    );\n\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= DefaultLimits.maxTextureDimension3D &&\n      size[1] <= DefaultLimits.maxTextureDimension3D &&\n      size[2] <= DefaultLimits.maxTextureDimension3D;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_usage')\n  .desc(\n    `Test texture usage (single usage or combined usages) for every texture format and every dimension type`\n  )\n  .cases(poptions('dimension', [undefined, ...kTextureDimensions]))\n  .subcases(() =>\n    params()\n      .combine(poptions('format', kAllTextureFormats))\n      // If usage0 and usage1 are the same, then the usage being test is a single usage. Otherwise, it is a combined usage.\n      .combine(poptions('usage0', kTextureUsages))\n      .combine(poptions('usage1', kTextureUsages))\n  )\n  .fn(async t => {\n    const { dimension, format, usage0, usage1 } = t.params;\n    const info = kAllTextureFormatInfo[format];\n\n    await t.selectDeviceOrSkipTestCase(info.extension);\n\n    const size = [info.blockWidth, info.blockHeight, 1];\n    const usage = usage0 | usage1;\n    const descriptor = {\n      size,\n      dimension,\n      format,\n      usage,\n    };\n\n    let success = true;\n    // Note that we unconditionally test copy usages for all formats. We don't check copySrc/copyDst in kAllTextureFormatInfo in capability_info.js\n    // if (!info.copySrc && (usage & GPUTextureUsage.COPY_SRC) !== 0) success = false;\n    // if (!info.copyDst && (usage & GPUTextureUsage.COPY_DST) !== 0) success = false;\n    if (!info.storage && (usage & GPUTextureUsage.STORAGE) !== 0) success = false;\n    if (!info.renderable && (usage & GPUTextureUsage.RENDER_ATTACHMENT) !== 0) success = false;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n"],"file":"createTexture.spec.js"}