{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/queries/general.spec.ts"],"names":["description","params","poptions","makeTestGroup","kQueryTypes","ValidationTest","createQuerySetWithType","createRenderEncoderWithQuerySet","g","test","desc","subcases","undefined","fn","t","type","selectDeviceForQueryTypeOrSkipTestCase","querySet","encoder","beginOcclusionQuery","endOcclusionQuery","expectValidationError","finish","createQuerySetWithState","querySetState","queryIndex","cases","combine","encoderType","count","createEncoder","writeTimestamp"],"mappings":"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","sourcesContent":["export const description = `\nTODO:\n\n- Start a pipeline statistics query in all possible encoders:\n    - queryIndex {in, out of} range for GPUQuerySet\n    - GPUQuerySet {valid, invalid}\n    - x ={render pass, compute pass} encoder\n`;\n\nimport { params, poptions } from '../../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { kQueryTypes } from '../../../../capability_info.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nimport { createQuerySetWithType, createRenderEncoderWithQuerySet } from './common.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('occlusion_query,query_type')\n  .desc(\n    `\nTests that set occlusion query set with all types in render pass descriptor:\n- type {occlusion (control case), pipeline statistics, timestamp}\n- {undefined} for occlusion query set in render pass descriptor\n  `\n  )\n  .subcases(() => poptions('type', [undefined, ...kQueryTypes]))\n  .fn(async t => {\n    const type = t.params.type;\n\n    if (type) {\n      await t.selectDeviceForQueryTypeOrSkipTestCase(type);\n    }\n\n    const querySet = type === undefined ? undefined : createQuerySetWithType(t, type, 1);\n\n    const encoder = createRenderEncoderWithQuerySet(t, querySet);\n    encoder.encoder.beginOcclusionQuery(0);\n    encoder.encoder.endOcclusionQuery();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, type !== 'occlusion');\n  });\n\ng.test('occlusion_query,invalid_query_set')\n  .desc(\n    `\nTests that begin occlusion query with a invalid query set that failed during creation.\n  `\n  )\n  .subcases(() => poptions('querySetState', ['valid', 'invalid'] as const))\n  .fn(t => {\n    const querySet = t.createQuerySetWithState(t.params.querySetState);\n\n    const encoder = createRenderEncoderWithQuerySet(t, querySet);\n    encoder.encoder.beginOcclusionQuery(0);\n    encoder.encoder.endOcclusionQuery();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, t.params.querySetState === 'invalid');\n  });\n\ng.test('occlusion_query,query_index')\n  .desc(\n    `\nTests that begin occlusion query with query index:\n- queryIndex {in, out of} range for GPUQuerySet\n  `\n  )\n  .subcases(() => poptions('queryIndex', [0, 2]))\n  .fn(t => {\n    const querySet = createQuerySetWithType(t, 'occlusion', 2);\n\n    const encoder = createRenderEncoderWithQuerySet(t, querySet);\n    encoder.encoder.beginOcclusionQuery(t.params.queryIndex);\n    encoder.encoder.endOcclusionQuery();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, t.params.queryIndex > 0);\n  });\n\ng.test('timestamp_query,query_type_and_index')\n  .desc(\n    `\nTests that write timestamp to all types of query set on all possible encoders:\n- type {occlusion, pipeline statistics, timestamp}\n- queryIndex {in, out of} range for GPUQuerySet\n- x= {non-pass, compute, render} encoder\n  `\n  )\n  .cases(\n    params()\n      .combine(poptions('encoderType', ['non-pass', 'compute pass', 'render pass'] as const))\n      .combine(poptions('type', kQueryTypes))\n  )\n  .subcases(({ type }) => poptions('queryIndex', type === 'timestamp' ? [0, 2] : [0]))\n  .fn(async t => {\n    const { encoderType, type, queryIndex } = t.params;\n\n    await t.selectDeviceForQueryTypeOrSkipTestCase(type);\n\n    const count = 2;\n    const querySet = createQuerySetWithType(t, type, count);\n\n    const encoder = t.createEncoder(encoderType);\n    encoder.encoder.writeTimestamp(querySet, queryIndex);\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, type !== 'timestamp' || queryIndex >= count);\n  });\n\ng.test('timestamp_query,invalid_query_set')\n  .desc(\n    `\nTests that write timestamp to a invalid query set that failed during creation:\n- x= {non-pass, compute, render} enconder\n  `\n  )\n  .subcases(() => poptions('encoderType', ['non-pass', 'compute pass', 'render pass'] as const))\n  .fn(async t => {\n    const querySet = t.createQuerySetWithState('invalid');\n\n    const encoder = t.createEncoder(t.params.encoderType);\n    encoder.encoder.writeTimestamp(querySet, 0);\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n"],"file":"general.spec.js"}