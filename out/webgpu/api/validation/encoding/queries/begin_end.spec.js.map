{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/queries/begin_end.spec.ts"],"names":["description","pbool","makeTestGroup","ValidationTest","beginRenderPassWithQuerySet","createQuerySetWithType","createRenderEncoderWithQuerySet","g","test","desc","subcases","begin","end","fn","t","params","querySet","encoder","i","beginOcclusionQuery","j","endOcclusionQuery","expectValidationError","finish","calls","_valid","device","createCommandEncoder","pass","isOnSameRenderPass","endPass","otherPass","nest","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\nValidation for encoding begin/endable queries.\n\nTODO: tests for pipeline statistics queries:\n- balance: {\n    - begin 0, end 1\n    - begin 1, end 0\n    - begin 1, end 1\n    - begin 2, end 2\n    - }\n    - x= {\n        - render pass + pipeline statistics\n        - compute pass + pipeline statistics\n        - }\n`;\n\nimport { pbool } from '../../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nimport {\n  beginRenderPassWithQuerySet,\n  createQuerySetWithType,\n  createRenderEncoderWithQuerySet,\n} from './common.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('occlusion_query,begin_end_balance')\n  .desc(\n    `\nTests that begin/end occlusion queries mismatch on render pass:\n- begin n queries, then end m queries, for various n and m.\n  `\n  )\n  .subcases(\n    () =>\n      [\n        { begin: 0, end: 1 },\n        { begin: 1, end: 0 },\n        { begin: 1, end: 1 }, // control case\n        { begin: 1, end: 2 },\n        { begin: 2, end: 1 },\n      ] as const\n  )\n  .fn(async t => {\n    const { begin, end } = t.params;\n    const querySet = createQuerySetWithType(t, 'occlusion', 2);\n\n    const encoder = createRenderEncoderWithQuerySet(t, querySet);\n    for (let i = 0; i < begin; i++) {\n      encoder.encoder.beginOcclusionQuery(i);\n    }\n    for (let j = 0; j < end; j++) {\n      encoder.encoder.endOcclusionQuery();\n    }\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, begin !== end);\n  });\n\ng.test('occlusion_query,begin_end_invalid_nesting')\n  .desc(\n    `\nTests the invalid nesting of begin/end occlusion queries:\n- begin index 0, end, begin index 0, end (control case)\n- begin index 0, begin index 0, end, end\n- begin index 0, begin index 1, end, end\n  `\n  )\n  .subcases(\n    () =>\n      [\n        { calls: [0, 'end', 1, 'end'], _valid: true }, // control case\n        { calls: [0, 0, 'end', 'end'], _valid: false },\n        { calls: [0, 1, 'end', 'end'], _valid: false },\n      ] as const\n  )\n  .fn(async t => {\n    const querySet = createQuerySetWithType(t, 'occlusion', 2);\n\n    const encoder = createRenderEncoderWithQuerySet(t, querySet);\n\n    for (const i of t.params.calls) {\n      if (i !== 'end') {\n        encoder.encoder.beginOcclusionQuery(i);\n      } else {\n        encoder.encoder.endOcclusionQuery();\n      }\n    }\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !t.params._valid);\n  });\n\ng.test('occlusion_query,disjoint_queries_with_same_query_index')\n  .desc(\n    `\nTests that two disjoint occlusion queries cannot be begun with same query index on same render pass:\n- begin index 0, end, begin index 0, end\n- call on {same (invalid), different (control case)} render pass\n  `\n  )\n  .subcases(() => pbool('isOnSameRenderPass'))\n  .fn(async t => {\n    const querySet = createQuerySetWithType(t, 'occlusion', 1);\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = beginRenderPassWithQuerySet(t, encoder, querySet);\n    pass.beginOcclusionQuery(0);\n    pass.endOcclusionQuery();\n\n    if (t.params.isOnSameRenderPass) {\n      pass.beginOcclusionQuery(0);\n      pass.endOcclusionQuery();\n      pass.endPass();\n    } else {\n      pass.endPass();\n      const otherPass = beginRenderPassWithQuerySet(t, encoder, querySet);\n      otherPass.beginOcclusionQuery(0);\n      otherPass.endOcclusionQuery();\n      otherPass.endPass();\n    }\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, t.params.isOnSameRenderPass);\n  });\n\ng.test('nesting')\n  .desc(\n    `\nTests that whether it's allowed to nest various types of queries:\n- call {occlusion, pipeline-statistics, timestamp} query in same type or other type.\n  `\n  )\n  .subcases(\n    () =>\n      [\n        { begin: 'occlusion', nest: 'timestamp', end: 'occlusion', _valid: true },\n        { begin: 'occlusion', nest: 'occlusion', end: 'occlusion', _valid: false },\n        { begin: 'occlusion', nest: 'pipeline-statistics', end: 'occlusion', _valid: true },\n        {\n          begin: 'occlusion',\n          nest: 'pipeline-statistics',\n          end: 'pipeline-statistics',\n          _valid: true,\n        },\n        {\n          begin: 'pipeline-statistics',\n          nest: 'timestamp',\n          end: 'pipeline-statistics',\n          _valid: true,\n        },\n        {\n          begin: 'pipeline-statistics',\n          nest: 'pipeline-statistics',\n          end: 'pipeline-statistics',\n          _valid: false,\n        },\n        {\n          begin: 'pipeline-statistics',\n          nest: 'occlusion',\n          end: 'pipeline-statistics',\n          _valid: true,\n        },\n        { begin: 'pipeline-statistics', nest: 'occlusion', end: 'occlusion', _valid: true },\n        { begin: 'timestamp', nest: 'occlusion', end: 'occlusion', _valid: true },\n        {\n          begin: 'timestamp',\n          nest: 'pipeline-statistics',\n          end: 'pipeline-statistics',\n          _valid: true,\n        },\n      ] as const\n  )\n  .unimplemented();\n"],"file":"begin_end.spec.js"}