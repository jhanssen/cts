{"version":3,"sources":["../../../../../src/webgpu/api/validation/query_set/create.spec.ts"],"names":["description","params","poptions","makeTestGroup","kQueryTypes","kMaxQueryCount","ValidationTest","selectDeviceForQueryType","t","type","extensions","push","selectDeviceOrSkipTestCase","g","test","desc","combine","fn","count","pipelineStatistics","expectValidationError","device","createQuerySet","undefined","shouldError","length","Array","from","Set"],"mappings":"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","sourcesContent":["export const description = `\nTests for validation in createQuerySet.\n`;\n\nimport { params, poptions } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kQueryTypes, kMaxQueryCount } from '../../../capability_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nasync function selectDeviceForQueryType(t: ValidationTest, type: GPUQueryType): Promise<void> {\n  const extensions: GPUExtensionName[] = [];\n  if (type === 'pipeline-statistics') {\n    extensions.push('pipeline-statistics-query');\n  } else if (type === 'timestamp') {\n    extensions.push('timestamp-query');\n  }\n\n  await t.selectDeviceOrSkipTestCase({ extensions });\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('count')\n  .desc(\n    `\nTests that create query set with the count for all query types:\n- count {<, =, >} kMaxQueryCount\n- x= {occlusion, pipeline-statistics, timestamp} query\n  `\n  )\n  .params(\n    params()\n      .combine(poptions('type', kQueryTypes))\n      .combine(poptions('count', [0, kMaxQueryCount, kMaxQueryCount + 1]))\n  )\n  .fn(async t => {\n    const { type, count } = t.params;\n\n    await selectDeviceForQueryType(t, type);\n\n    const pipelineStatistics =\n      type === 'pipeline-statistics' ? (['clipper-invocations'] as const) : ([] as const);\n\n    t.expectValidationError(() => {\n      t.device.createQuerySet({ type, count, pipelineStatistics });\n    }, count > kMaxQueryCount);\n  });\n\ng.test('pipelineStatistics,all_types')\n  .desc(\n    `\nTests that create query set with the GPUPipelineStatisticName for all query types:\n- pipelineStatistics is undefined or empty\n- pipelineStatistics is a sequence of valid values\n- x= {occlusion, pipeline-statistics, timestamp} query\n  `\n  )\n  .params(\n    params()\n      .combine(poptions('type', kQueryTypes))\n      .combine(\n        poptions('pipelineStatistics', [undefined, [] as const, ['clipper-invocations'] as const])\n      )\n  )\n  .fn(async t => {\n    const { type, pipelineStatistics } = t.params;\n\n    await selectDeviceForQueryType(t, type);\n\n    const count = 1;\n    const shouldError =\n      (type !== 'pipeline-statistics' &&\n        pipelineStatistics !== undefined &&\n        pipelineStatistics.length > 0) ||\n      (type === 'pipeline-statistics' &&\n        (pipelineStatistics === undefined || pipelineStatistics.length === 0));\n\n    t.expectValidationError(() => {\n      t.device.createQuerySet({ type, count, pipelineStatistics });\n    }, shouldError);\n  });\n\ng.test('pipelineStatistics,duplicates_and_all')\n  .desc(\n    `\nTests that create query set with the duplicate values and all values of GPUPipelineStatisticName for pipeline-statistics query.\n  `\n  )\n  .params(\n    poptions('pipelineStatistics', [\n      ['clipper-invocations', 'clipper-invocations'] as const,\n      [\n        'clipper-invocations',\n        'clipper-primitives-out',\n        'compute-shader-invocations',\n        'fragment-shader-invocations',\n        'vertex-shader-invocations',\n      ] as const,\n    ])\n  )\n  .fn(async t => {\n    const type = 'pipeline-statistics';\n\n    await selectDeviceForQueryType(t, type);\n\n    const count = 1;\n    const pipelineStatistics = t.params.pipelineStatistics;\n\n    t.expectValidationError(() => {\n      t.device.createQuerySet({ type, count, pipelineStatistics });\n    }, pipelineStatistics.length !== Array.from(new Set(pipelineStatistics)).length);\n  });\n"],"file":"create.spec.js"}