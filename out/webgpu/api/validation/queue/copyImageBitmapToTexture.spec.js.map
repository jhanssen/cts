{"version":3,"sources":["../../../../../src/webgpu/api/validation/queue/copyImageBitmapToTexture.spec.ts"],"names":["description","poptions","params","pbool","makeTestGroup","kAllTextureFormatInfo","kAllTextureFormats","kTextureUsages","ValidationTest","kDefaultBytesPerPixel","kDefaultWidth","kDefaultHeight","kDefaultDepth","kDefaultMipLevelCount","kValidTextureFormatsForCopyIB2T","computeMipMapSize","width","height","mipLevel","mipWidth","Math","max","mipHeight","generateCopySizeForSrcOOB","srcOrigin","x","y","depthOrArrayLayers","justFitCopySize","generateDstOriginValue","origin","z","generateCopySizeForDstOOB","dstOrigin","dstMipMapSize","CopyImageBitmapToTextureTest","getImageData","pixelSize","imagePixels","Uint8ClampedArray","ImageData","runTest","imageBitmapCopyView","textureCopyView","copySize","validationScopeSuccess","exceptionName","shouldThrow","device","queue","copyImageBitmapToTexture","expectValidationError","g","test","combine","fn","t","closed","imageBitmap","createImageBitmap","dstTexture","createTexture","size","format","usage","GPUTextureUsage","COPY_DST","close","texture","state","createTextureWithState","sampleCount","mipLevelCount","selectDeviceOrSkipTestCase","extension","pushErrorScope","popErrorScope","success","includes","expand","desc","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\ncopyImageBitmapToTexture Validation Tests in Queue.\nTODO: Should this be the same file as, or next to, web_platform/copyImageBitmapToTexture.spec.ts?\n\nTODO: Split this test plan per-test.\n\nTest Plan:\n- For source.imageBitmap:\n  - imageBitmap generated from ImageData:\n    - Check that an error is generated when imageBitmap is closed.\n\n- For destination.texture:\n  - For 2d destination textures:\n    - Check that an error is generated when texture is in destroyed state.\n    - Check that an error is generated when texture is an error texture.\n    - Check that an error is generated when texture is created without usage COPY_DST.\n    - Check that an error is generated when sample count is not 1.\n    - Check that an error is generated when mipLevel is too large.\n    - Check that an error is generated when texture format is not valid.\n\n- For copySize:\n  - No-op copy shouldn't throw any exception or return any validation error.\n  - Check that an error is generated when destination.texture.origin + copySize is too large.\n\nTODO: copying into slices of 2d array textures. 1d and 3d as well if they're not invalid.\n`;\n\nimport { poptions, params, pbool } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  kAllTextureFormatInfo,\n  kAllTextureFormats,\n  kTextureUsages,\n} from '../../../capability_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nconst kDefaultBytesPerPixel = 4; // using 'bgra8unorm' or 'rgba8unorm'\nconst kDefaultWidth = 32;\nconst kDefaultHeight = 32;\nconst kDefaultDepth = 1;\nconst kDefaultMipLevelCount = 6;\n\n// From spec\nconst kValidTextureFormatsForCopyIB2T = [\n  'rgba8unorm',\n  'rgba8unorm-srgb',\n  'bgra8unorm',\n  'bgra8unorm-srgb',\n  'rgb10a2unorm',\n  'rgba16float',\n  'rgba32float',\n  'rg8unorm',\n  'rg16float',\n];\n\nfunction computeMipMapSize(width: number, height: number, mipLevel: number) {\n  return {\n    mipWidth: Math.max(width >> mipLevel, 1),\n    mipHeight: Math.max(height >> mipLevel, 1),\n  };\n}\n\ninterface WithMipLevel {\n  mipLevel: number;\n}\n\ninterface WithDstOriginMipLevel extends WithMipLevel {\n  dstOrigin: Required<GPUOrigin3DDict>;\n}\n\n// Helper function to generate copySize for src OOB test\nfunction generateCopySizeForSrcOOB({ srcOrigin }: { srcOrigin: Required<GPUOrigin2DDict> }) {\n  // OOB origin fails even with no-op copy.\n  if (srcOrigin.x > kDefaultWidth || srcOrigin.y > kDefaultHeight) {\n    return poptions('copySize', [{ width: 0, height: 0, depthOrArrayLayers: 0 }]);\n  }\n\n  const justFitCopySize = {\n    width: kDefaultWidth - srcOrigin.x,\n    height: kDefaultHeight - srcOrigin.y,\n    depthOrArrayLayers: 1,\n  };\n\n  return poptions('copySize', [\n    justFitCopySize, // correct size, maybe no-op copy.\n    { width: justFitCopySize.width + 1, height: justFitCopySize.height, depthOrArrayLayers: 1 }, // OOB in width\n    { width: justFitCopySize.width, height: justFitCopySize.height + 1, depthOrArrayLayers: 1 }, // OOB in height\n    { width: justFitCopySize.width, height: justFitCopySize.height, depthOrArrayLayers: 2 }, // OOB in depthOrArrayLayers\n  ]);\n}\n\n// Helper function to generate dst origin value based on mipLevel.\nfunction generateDstOriginValue({ mipLevel }: WithMipLevel) {\n  const origin = computeMipMapSize(kDefaultWidth, kDefaultHeight, mipLevel);\n\n  return poptions('dstOrigin', [\n    { x: 0, y: 0, z: 0 },\n    { x: origin.mipWidth - 1, y: 0, z: 0 },\n    { x: 0, y: origin.mipHeight - 1, z: 0 },\n    { x: origin.mipWidth, y: 0, z: 0 },\n    { x: 0, y: origin.mipHeight, z: 0 },\n    { x: 0, y: 0, z: kDefaultDepth },\n    { x: origin.mipWidth + 1, y: 0, z: 0 },\n    { x: 0, y: origin.mipHeight + 1, z: 0 },\n    { x: 0, y: 0, z: kDefaultDepth + 1 },\n  ]);\n}\n\n// Helper function to generate copySize for dst OOB test\nfunction generateCopySizeForDstOOB({ mipLevel, dstOrigin }: WithDstOriginMipLevel) {\n  const dstMipMapSize = computeMipMapSize(kDefaultWidth, kDefaultHeight, mipLevel);\n\n  // OOB origin fails even with no-op copy.\n  if (\n    dstOrigin.x > dstMipMapSize.mipWidth ||\n    dstOrigin.y > dstMipMapSize.mipHeight ||\n    dstOrigin.z > kDefaultDepth\n  ) {\n    return poptions('copySize', [{ width: 0, height: 0, depthOrArrayLayers: 0 }]);\n  }\n\n  const justFitCopySize = {\n    width: dstMipMapSize.mipWidth - dstOrigin.x,\n    height: dstMipMapSize.mipHeight - dstOrigin.y,\n    depthOrArrayLayers: kDefaultDepth - dstOrigin.z,\n  };\n\n  return poptions('copySize', [\n    justFitCopySize,\n    {\n      width: justFitCopySize.width + 1,\n      height: justFitCopySize.height,\n      depthOrArrayLayers: justFitCopySize.depthOrArrayLayers,\n    }, // OOB in width\n    {\n      width: justFitCopySize.width,\n      height: justFitCopySize.height + 1,\n      depthOrArrayLayers: justFitCopySize.depthOrArrayLayers,\n    }, // OOB in height\n    {\n      width: justFitCopySize.width,\n      height: justFitCopySize.height,\n      depthOrArrayLayers: justFitCopySize.depthOrArrayLayers + 1,\n    }, // OOB in depthOrArrayLayers\n  ]);\n}\n\nclass CopyImageBitmapToTextureTest extends ValidationTest {\n  getImageData(width: number, height: number): ImageData {\n    const pixelSize = kDefaultBytesPerPixel * width * height;\n    const imagePixels = new Uint8ClampedArray(pixelSize);\n    return new ImageData(imagePixels, width, height);\n  }\n\n  runTest(\n    imageBitmapCopyView: GPUImageBitmapCopyView,\n    textureCopyView: GPUTextureCopyView,\n    copySize: GPUExtent3D,\n    validationScopeSuccess: boolean,\n    exceptionName?: string\n  ): void {\n    // CopyImageBitmapToTexture will generate two types of errors. One is synchronous exceptions;\n    // the other is asynchronous validation error scope errors.\n    if (exceptionName) {\n      this.shouldThrow(exceptionName, () => {\n        this.device.queue.copyImageBitmapToTexture(imageBitmapCopyView, textureCopyView, copySize);\n      });\n    } else {\n      this.expectValidationError(() => {\n        this.device.queue.copyImageBitmapToTexture(imageBitmapCopyView, textureCopyView, copySize);\n      }, !validationScopeSuccess);\n    }\n  }\n}\n\nexport const g = makeTestGroup(CopyImageBitmapToTextureTest);\n\ng.test('source_imageBitmap,state')\n  .params(\n    params()\n      .combine(pbool('closed'))\n      .combine(\n        poptions('copySize', [\n          { width: 0, height: 0, depthOrArrayLayers: 0 },\n          { width: 1, height: 1, depthOrArrayLayers: 1 },\n        ])\n      )\n  )\n  .fn(async t => {\n    const { closed, copySize } = t.params;\n    const imageBitmap = await createImageBitmap(t.getImageData(1, 1));\n    const dstTexture = t.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    if (closed) imageBitmap.close();\n\n    t.runTest(\n      { imageBitmap },\n      { texture: dstTexture },\n      copySize,\n      true, // No validation errors.\n      closed ? 'InvalidStateError' : ''\n    );\n  });\n\ng.test('destination_texture,state')\n  .params(\n    params()\n      .combine(poptions('state', ['valid', 'invalid', 'destroyed'] as const))\n      .combine(\n        poptions('copySize', [\n          { width: 0, height: 0, depthOrArrayLayers: 0 },\n          { width: 1, height: 1, depthOrArrayLayers: 1 },\n        ])\n      )\n  )\n  .fn(async t => {\n    const { state, copySize } = t.params;\n    const imageBitmap = await createImageBitmap(t.getImageData(1, 1));\n    const dstTexture = t.createTextureWithState(state);\n\n    t.runTest({ imageBitmap }, { texture: dstTexture }, copySize, state === 'valid');\n  });\n\ng.test('destination_texture,usage')\n  .params(\n    params()\n      .combine(poptions('usage', kTextureUsages))\n      .combine(\n        poptions('copySize', [\n          { width: 0, height: 0, depthOrArrayLayers: 0 },\n          { width: 1, height: 1, depthOrArrayLayers: 1 },\n        ])\n      )\n  )\n  .fn(async t => {\n    const { usage, copySize } = t.params;\n    const imageBitmap = await createImageBitmap(t.getImageData(1, 1));\n    const dstTexture = t.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage,\n    });\n\n    t.runTest(\n      { imageBitmap },\n      { texture: dstTexture },\n      copySize,\n      !!(usage & GPUTextureUsage.COPY_DST)\n    );\n  });\n\ng.test('destination_texture,sample_count')\n  .params(\n    params()\n      .combine(poptions('sampleCount', [1, 4]))\n      .combine(\n        poptions('copySize', [\n          { width: 0, height: 0, depthOrArrayLayers: 0 },\n          { width: 1, height: 1, depthOrArrayLayers: 1 },\n        ])\n      )\n  )\n  .fn(async t => {\n    const { sampleCount, copySize } = t.params;\n    const imageBitmap = await createImageBitmap(t.getImageData(1, 1));\n    const dstTexture = t.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      sampleCount,\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    t.runTest({ imageBitmap }, { texture: dstTexture }, copySize, sampleCount === 1);\n  });\n\ng.test('destination_texture,mipLevel')\n  .params(\n    params()\n      .combine(poptions('mipLevel', [0, kDefaultMipLevelCount - 1, kDefaultMipLevelCount]))\n      .combine(\n        poptions('copySize', [\n          { width: 0, height: 0, depthOrArrayLayers: 0 },\n          { width: 1, height: 1, depthOrArrayLayers: 1 },\n        ])\n      )\n  )\n  .fn(async t => {\n    const { mipLevel, copySize } = t.params;\n    const imageBitmap = await createImageBitmap(t.getImageData(1, 1));\n    const dstTexture = t.device.createTexture({\n      size: { width: kDefaultWidth, height: kDefaultHeight, depthOrArrayLayers: kDefaultDepth },\n      mipLevelCount: kDefaultMipLevelCount,\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    t.runTest(\n      { imageBitmap },\n      { texture: dstTexture, mipLevel },\n      copySize,\n      mipLevel < kDefaultMipLevelCount\n    );\n  });\n\ng.test('destination_texture,format')\n  .params(\n    params()\n      .combine(poptions('format', kAllTextureFormats))\n      .combine(\n        poptions('copySize', [\n          { width: 0, height: 0, depthOrArrayLayers: 0 },\n          { width: 1, height: 1, depthOrArrayLayers: 1 },\n        ])\n      )\n  )\n  .fn(async t => {\n    const { format, copySize } = t.params;\n\n    await t.selectDeviceOrSkipTestCase(kAllTextureFormatInfo[format].extension);\n\n    const imageBitmap = await createImageBitmap(t.getImageData(1, 1));\n\n    // createTexture with all possible texture format may have validation error when using\n    // compressed texture format.\n    t.device.pushErrorScope('validation');\n    const dstTexture = t.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n    t.device.popErrorScope();\n\n    const success = kValidTextureFormatsForCopyIB2T.includes(format);\n\n    t.runTest(\n      { imageBitmap },\n      { texture: dstTexture },\n      copySize,\n      true, // No validation errors.\n      success ? '' : 'TypeError'\n    );\n  });\n\ng.test('OOB,source')\n  .params(\n    params()\n      .combine(\n        poptions('srcOrigin', [\n          { x: 0, y: 0 }, // origin is on top-left\n          { x: kDefaultWidth - 1, y: 0 }, // x near the border\n          { x: 0, y: kDefaultHeight - 1 }, // y is near the border\n          { x: kDefaultWidth, y: kDefaultHeight }, // origin is on bottom-right\n          { x: kDefaultWidth + 1, y: 0 }, // x is too large\n          { x: 0, y: kDefaultHeight + 1 }, // y is too large\n        ])\n      )\n      .expand(generateCopySizeForSrcOOB)\n  )\n  .fn(async t => {\n    const { srcOrigin, copySize } = t.params;\n    const imageBitmap = await createImageBitmap(t.getImageData(kDefaultWidth, kDefaultHeight));\n    const dstTexture = t.device.createTexture({\n      size: {\n        width: kDefaultWidth + 1,\n        height: kDefaultHeight + 1,\n        depthOrArrayLayers: kDefaultDepth,\n      },\n      mipLevelCount: kDefaultMipLevelCount,\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    let success = true;\n\n    if (\n      srcOrigin.x + copySize.width > kDefaultWidth ||\n      srcOrigin.y + copySize.height > kDefaultHeight ||\n      copySize.depthOrArrayLayers > 1\n    ) {\n      success = false;\n    }\n\n    t.runTest({ imageBitmap, origin: srcOrigin }, { texture: dstTexture }, copySize, success);\n  });\n\ng.test('OOB,destination')\n  .params(\n    params()\n      .combine(poptions('mipLevel', [0, 1, kDefaultMipLevelCount - 2]))\n      .expand(generateDstOriginValue)\n      .expand(generateCopySizeForDstOOB)\n  )\n  .fn(async t => {\n    const { mipLevel, dstOrigin, copySize } = t.params;\n\n    const imageBitmap = await createImageBitmap(\n      t.getImageData(kDefaultWidth + 1, kDefaultHeight + 1)\n    );\n    const dstTexture = t.device.createTexture({\n      size: {\n        width: kDefaultWidth,\n        height: kDefaultHeight,\n        depthOrArrayLayers: kDefaultDepth,\n      },\n      format: 'bgra8unorm',\n      mipLevelCount: kDefaultMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    let success = true;\n    const dstMipMapSize = computeMipMapSize(kDefaultWidth, kDefaultHeight, mipLevel);\n\n    if (\n      copySize.depthOrArrayLayers > 1 ||\n      dstOrigin.x + copySize.width > dstMipMapSize.mipWidth ||\n      dstOrigin.y + copySize.height > dstMipMapSize.mipHeight ||\n      dstOrigin.z + copySize.depthOrArrayLayers > kDefaultDepth\n    ) {\n      success = false;\n    }\n\n    t.runTest(\n      { imageBitmap },\n      {\n        texture: dstTexture,\n        mipLevel,\n        origin: dstOrigin,\n      },\n      copySize,\n      success\n    );\n  });\n\ng.test('ImageBitmap_sources')\n  .desc(\n    `Test ImageBitmap generated from all possible ImageBitmapSource, relevant ImageBitmapOptions\n    (https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#images-2)\n    and various source filetypes and metadata (weird dimensions, EXIF orientations, video rotations\n    and visible/crop rectangles, etc. (In theory these things are handled inside createImageBitmap,\n    but in theory could affect the internal representation of the ImageBitmap.)`\n  )\n  .unimplemented();\n\ng.test('zero_sized')\n  .desc(\n    `Test valid zero-sized copies.\n\n- copySize { [0,x,x], [x,0,x], [x,x,0], [0,0,0] }`\n  )\n  .unimplemented();\n"],"file":"copyImageBitmapToTexture.spec.js"}