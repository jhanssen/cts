{"version":3,"sources":["../../../../../src/webgpu/api/operation/command_buffer/copies.spec.ts"],"names":["description","poptions","params","makeTestGroup","GPUTest","g","test","combine","expand","p","srcOffset","copySize","dstOffset","fn","t","srcBufferSize","dstBufferSize","srcData","Uint8Array","i","src","device","createBuffer","mappedAtCreation","size","usage","GPUBufferUsage","COPY_SRC","getMappedRange","set","unmap","dst","COPY_DST","encoder","createCommandEncoder","copyBufferToBuffer","defaultQueue","submit","finish","expectedDstData","expectContents","dstData","length","expectedSrcData","Uint32Array","data","mid","createTexture","width","height","depth","format","GPUTextureUsage","copyBufferToTexture","buffer","bytesPerRow","texture","mipLevel","origin","x","y","z","copyTextureToBuffer","midDesc","mid1","mid2","copyTextureToTexture"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBO,CAqBP,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,gDAAjC;AACA,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,OAAT,QAAwB,sBAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,OAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,KAAP;AACGJ,MADH;AAEIA,MAAM;AACHK,OADH,CACWN,QAAQ,CAAC,WAAD,EAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,CAAd,CADnB;AAEGM,OAFH,CAEWN,QAAQ,CAAC,WAAD,EAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,CAAd,CAFnB;AAGGM,OAHH,CAGWN,QAAQ,CAAC,UAAD,EAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,CAAb,CAHnB;AAIGO,MAJH,CAIU,CAAAC,CAAC;AACPR,QAAQ,CAAC,eAAD,EAAkB,CAACQ,CAAC,CAACC,SAAF,GAAcD,CAAC,CAACE,QAAjB,EAA2BF,CAAC,CAACC,SAAF,GAAcD,CAAC,CAACE,QAAhB,GAA2B,CAAtD,CAAlB,CALZ;;AAOGH,MAPH,CAOU,CAAAC,CAAC;AACPR,QAAQ,CAAC,eAAD,EAAkB,CAACQ,CAAC,CAACG,SAAF,GAAcH,CAAC,CAACE,QAAjB,EAA2BF,CAAC,CAACG,SAAF,GAAcH,CAAC,CAACE,QAAhB,GAA2B,CAAtD,CAAlB,CARZ,CAFJ;;;AAaGE,EAbH,CAaM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEJ,SAAF,EAAaE,SAAb,EAAwBD,QAAxB,EAAkCI,aAAlC,EAAiDC,aAAjD,KAAmEF,CAAC,CAACZ,MAA3E;;AAEA,QAAMe,OAAO,GAAG,IAAIC,UAAJ,CAAeH,aAAf,CAAhB;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,aAApB,EAAmC,EAAEI,CAArC,EAAwC;AACtCF,IAAAA,OAAO,CAACE,CAAD,CAAP,GAAaA,CAAC,GAAG,CAAjB;AACD;;AAED,QAAMC,GAAG,GAAGN,CAAC,CAACO,MAAF,CAASC,YAAT,CAAsB;AAChCC,IAAAA,gBAAgB,EAAE,IADc;AAEhCC,IAAAA,IAAI,EAAET,aAF0B;AAGhCU,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAHU,EAAtB,CAAZ;;AAKA,MAAIT,UAAJ,CAAeE,GAAG,CAACQ,cAAJ,EAAf,EAAqCC,GAArC,CAAyCZ,OAAzC;AACAG,EAAAA,GAAG,CAACU,KAAJ;;AAEA,QAAMC,GAAG,GAAGjB,CAAC,CAACO,MAAF,CAASC,YAAT,CAAsB;AAChCE,IAAAA,IAAI,EAAER,aAD0B;AAEhCS,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACM,QAFhB,EAAtB,CAAZ;;;AAKA,QAAMC,OAAO,GAAGnB,CAAC,CAACO,MAAF,CAASa,oBAAT,EAAhB;AACAD,EAAAA,OAAO,CAACE,kBAAR,CAA2Bf,GAA3B,EAAgCV,SAAhC,EAA2CqB,GAA3C,EAAgDnB,SAAhD,EAA2DD,QAA3D;AACAG,EAAAA,CAAC,CAACO,MAAF,CAASe,YAAT,CAAsBC,MAAtB,CAA6B,CAACJ,OAAO,CAACK,MAAR,EAAD,CAA7B;;AAEA,QAAMC,eAAe,GAAG,IAAIrB,UAAJ,CAAeF,aAAf,CAAxB;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,QAApB,EAA8B,EAAEQ,CAAhC,EAAmC;AACjCoB,IAAAA,eAAe,CAAC3B,SAAS,GAAGO,CAAb,CAAf,GAAiCF,OAAO,CAACP,SAAS,GAAGS,CAAb,CAAxC;AACD;;AAEDL,EAAAA,CAAC,CAAC0B,cAAF,CAAiBT,GAAjB,EAAsBQ,eAAtB;AACD,CA5CH;;AA8CAlC,CAAC,CAACC,IAAF,CAAO,0BAAP,EAAmCO,EAAnC,CAAsC,MAAMC,CAAN,IAAW;AAC/C,QAAMG,OAAO,GAAG,IAAIC,UAAJ,CAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAf,CAAhB;AACA,QAAMuB,OAAO,GAAG,IAAIvB,UAAJ,CAAe,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,CAAf,CAAhB;;AAEA,QAAME,GAAG,GAAGN,CAAC,CAACO,MAAF,CAASC,YAAT,CAAsB;AAChCC,IAAAA,gBAAgB,EAAE,IADc;AAEhCC,IAAAA,IAAI,EAAEP,OAAO,CAACyB,MAFkB;AAGhCjB,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACM,QAHhB,EAAtB,CAAZ;;AAKA,MAAId,UAAJ,CAAeE,GAAG,CAACQ,cAAJ,EAAf,EAAqCC,GAArC,CAAyCZ,OAAzC;AACAG,EAAAA,GAAG,CAACU,KAAJ;;AAEA,QAAMC,GAAG,GAAGjB,CAAC,CAACO,MAAF,CAASC,YAAT,CAAsB;AAChCC,IAAAA,gBAAgB,EAAE,IADc;AAEhCC,IAAAA,IAAI,EAAEiB,OAAO,CAACC,MAFkB;AAGhCjB,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACM,QAHhB,EAAtB,CAAZ;;AAKA,MAAId,UAAJ,CAAea,GAAG,CAACH,cAAJ,EAAf,EAAqCC,GAArC,CAAyCY,OAAzC;AACAV,EAAAA,GAAG,CAACD,KAAJ;;AAEA,QAAMG,OAAO,GAAGnB,CAAC,CAACO,MAAF,CAASa,oBAAT,EAAhB;AACAD,EAAAA,OAAO,CAACE,kBAAR,CAA2Bf,GAA3B,EAAgC,CAAhC,EAAmCW,GAAnC,EAAwC,CAAxC,EAA2C,CAA3C;AACAE,EAAAA,OAAO,CAACE,kBAAR,CAA2BJ,GAA3B,EAAgC,CAAhC,EAAmCX,GAAnC,EAAwC,CAAxC,EAA2C,CAA3C;AACAN,EAAAA,CAAC,CAACO,MAAF,CAASe,YAAT,CAAsBC,MAAtB,CAA6B,CAACJ,OAAO,CAACK,MAAR,EAAD,CAA7B;;AAEA,QAAMK,eAAe,GAAG,IAAIzB,UAAJ,CAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,CAAf,CAAxB;AACA,QAAMqB,eAAe,GAAG,IAAIrB,UAAJ,CAAe,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,CAAf,CAAxB;AACAJ,EAAAA,CAAC,CAAC0B,cAAF,CAAiBpB,GAAjB,EAAsBuB,eAAtB;AACA7B,EAAAA,CAAC,CAAC0B,cAAF,CAAiBT,GAAjB,EAAsBQ,eAAtB;AACD,CA7BD;;AA+BAlC,CAAC,CAACC,IAAF,CAAO,eAAP,EAAwBO,EAAxB,CAA2B,MAAMC,CAAN,IAAW;AACpC,QAAMG,OAAO,GAAG,IAAI2B,WAAJ,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAhB,CAAhB;;AAEA,QAAMxB,GAAG,GAAGN,CAAC,CAACO,MAAF,CAASC,YAAT,CAAsB;AAChCC,IAAAA,gBAAgB,EAAE,IADc;AAEhCC,IAAAA,IAAI,EAAEP,OAAO,CAACyB,MAAR,GAAiB,CAFS;AAGhCjB,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAHU,EAAtB,CAAZ;;AAKA,MAAIiB,WAAJ,CAAgBxB,GAAG,CAACQ,cAAJ,EAAhB,EAAsCC,GAAtC,CAA0CZ,OAA1C;AACAG,EAAAA,GAAG,CAACU,KAAJ;;AAEA,QAAMC,GAAG,GAAGjB,CAAC,CAACO,MAAF,CAASC,YAAT,CAAsB;AAChCE,IAAAA,IAAI,EAAEP,OAAO,CAACyB,MAAR,GAAiB,CADS;AAEhCjB,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACM,QAFhB,EAAtB,CAAZ;;;AAKA,QAAMC,OAAO,GAAGnB,CAAC,CAACO,MAAF,CAASa,oBAAT,EAAhB;AACAD,EAAAA,OAAO,CAACE,kBAAR,CAA2Bf,GAA3B,EAAgC,CAAhC,EAAmCW,GAAnC,EAAwC,CAAxC,EAA2C,EAA3C;AACAE,EAAAA,OAAO,CAACE,kBAAR,CAA2Bf,GAA3B,EAAgC,EAAhC,EAAoCW,GAApC,EAAyC,CAAzC,EAA4C,EAA5C;AACAjB,EAAAA,CAAC,CAACO,MAAF,CAASe,YAAT,CAAsBC,MAAtB,CAA6B,CAACJ,OAAO,CAACK,MAAR,EAAD,CAA7B;;AAEA,QAAMC,eAAe,GAAG,IAAIK,WAAJ,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAhB,CAAxB;AACA9B,EAAAA,CAAC,CAAC0B,cAAF,CAAiBT,GAAjB,EAAsBQ,eAAtB;AACD,CAvBD;;AAyBAlC,CAAC,CAACC,IAAF,CAAO,OAAP,EAAgBO,EAAhB,CAAmB,MAAMC,CAAN,IAAW;AAC5B,QAAM+B,IAAI,GAAG,IAAID,WAAJ,CAAgB,CAAC,UAAD,CAAhB,CAAb;;AAEA,QAAMxB,GAAG,GAAGN,CAAC,CAACO,MAAF,CAASC,YAAT,CAAsB;AAChCC,IAAAA,gBAAgB,EAAE,IADc;AAEhCC,IAAAA,IAAI,EAAE,CAF0B;AAGhCC,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACM,QAHhB,EAAtB,CAAZ;;AAKA,MAAIY,WAAJ,CAAgBxB,GAAG,CAACQ,cAAJ,EAAhB,EAAsCC,GAAtC,CAA0CgB,IAA1C;AACAzB,EAAAA,GAAG,CAACU,KAAJ;;AAEA,QAAMC,GAAG,GAAGjB,CAAC,CAACO,MAAF,CAASC,YAAT,CAAsB;AAChCE,IAAAA,IAAI,EAAE,CAD0B;AAEhCC,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACM,QAFhB,EAAtB,CAAZ;;;AAKA,QAAMc,GAAG,GAAGhC,CAAC,CAACO,MAAF,CAAS0B,aAAT,CAAuB;AACjCvB,IAAAA,IAAI,EAAE,EAAEwB,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAD2B;AAEjCC,IAAAA,MAAM,EAAE,WAFyB;AAGjC1B,IAAAA,KAAK,EAAE2B,eAAe,CAACzB,QAAhB,GAA2ByB,eAAe,CAACpB,QAHjB,EAAvB,CAAZ;;;AAMA,QAAMC,OAAO,GAAGnB,CAAC,CAACO,MAAF,CAASa,oBAAT,EAAhB;AACAD,EAAAA,OAAO,CAACoB,mBAAR;AACE,IAAEC,MAAM,EAAElC,GAAV,EAAemC,WAAW,EAAE,GAA5B,EADF;AAEE,IAAEC,OAAO,EAAEV,GAAX,EAAgBW,QAAQ,EAAE,CAA1B,EAA6BC,MAAM,EAAE,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAArC,EAFF;AAGE,IAAEb,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAHF;;AAKAjB,EAAAA,OAAO,CAAC6B,mBAAR;AACE,IAAEN,OAAO,EAAEV,GAAX,EAAgBW,QAAQ,EAAE,CAA1B,EAA6BC,MAAM,EAAE,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAArC,EADF;AAEE,IAAEP,MAAM,EAAEvB,GAAV,EAAewB,WAAW,EAAE,GAA5B,EAFF;AAGE,IAAEP,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAHF;;AAKApC,EAAAA,CAAC,CAACO,MAAF,CAASe,YAAT,CAAsBC,MAAtB,CAA6B,CAACJ,OAAO,CAACK,MAAR,EAAD,CAA7B;;AAEAxB,EAAAA,CAAC,CAAC0B,cAAF,CAAiBT,GAAjB,EAAsBc,IAAtB;AACD,CApCD;;AAsCAxC,CAAC,CAACC,IAAF,CAAO,SAAP,EAAkBO,EAAlB,CAAqB,MAAMC,CAAN,IAAW;AAC9B,QAAM+B,IAAI,GAAG,IAAID,WAAJ,CAAgB,CAAC,UAAD,CAAhB,CAAb;;AAEA,QAAMxB,GAAG,GAAGN,CAAC,CAACO,MAAF,CAASC,YAAT,CAAsB;AAChCC,IAAAA,gBAAgB,EAAE,IADc;AAEhCC,IAAAA,IAAI,EAAE,CAF0B;AAGhCC,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACM,QAHhB,EAAtB,CAAZ;;AAKA,MAAIY,WAAJ,CAAgBxB,GAAG,CAACQ,cAAJ,EAAhB,EAAsCC,GAAtC,CAA0CgB,IAA1C;AACAzB,EAAAA,GAAG,CAACU,KAAJ;;AAEA,QAAMC,GAAG,GAAGjB,CAAC,CAACO,MAAF,CAASC,YAAT,CAAsB;AAChCE,IAAAA,IAAI,EAAE,CAD0B;AAEhCC,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACM,QAFhB,EAAtB,CAAZ;;;AAKA,QAAM+B,OAA6B,GAAG;AACpCvC,IAAAA,IAAI,EAAE,EAAEwB,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAD8B;AAEpCC,IAAAA,MAAM,EAAE,WAF4B;AAGpC1B,IAAAA,KAAK,EAAE2B,eAAe,CAACzB,QAAhB,GAA2ByB,eAAe,CAACpB,QAHd,EAAtC;;AAKA,QAAMgC,IAAI,GAAGlD,CAAC,CAACO,MAAF,CAAS0B,aAAT,CAAuBgB,OAAvB,CAAb;AACA,QAAME,IAAI,GAAGnD,CAAC,CAACO,MAAF,CAAS0B,aAAT,CAAuBgB,OAAvB,CAAb;;AAEA,QAAM9B,OAAO,GAAGnB,CAAC,CAACO,MAAF,CAASa,oBAAT,EAAhB;AACAD,EAAAA,OAAO,CAACoB,mBAAR;AACE,IAAEC,MAAM,EAAElC,GAAV,EAAemC,WAAW,EAAE,GAA5B,EADF;AAEE,IAAEC,OAAO,EAAEQ,IAAX,EAAiBP,QAAQ,EAAE,CAA3B,EAA8BC,MAAM,EAAE,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAtC,EAFF;AAGE,IAAEb,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAHF;;AAKAjB,EAAAA,OAAO,CAACiC,oBAAR;AACE,IAAEV,OAAO,EAAEQ,IAAX,EAAiBP,QAAQ,EAAE,CAA3B,EAA8BC,MAAM,EAAE,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAtC,EADF;AAEE,IAAEL,OAAO,EAAES,IAAX,EAAiBR,QAAQ,EAAE,CAA3B,EAA8BC,MAAM,EAAE,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAtC,EAFF;AAGE,IAAEb,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAHF;;AAKAjB,EAAAA,OAAO,CAAC6B,mBAAR;AACE,IAAEN,OAAO,EAAES,IAAX,EAAiBR,QAAQ,EAAE,CAA3B,EAA8BC,MAAM,EAAE,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAtC,EADF;AAEE,IAAEP,MAAM,EAAEvB,GAAV,EAAewB,WAAW,EAAE,GAA5B,EAFF;AAGE,IAAEP,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,KAAK,EAAE,CAA9B,EAHF;;AAKApC,EAAAA,CAAC,CAACO,MAAF,CAASe,YAAT,CAAsBC,MAAtB,CAA6B,CAACJ,OAAO,CAACK,MAAR,EAAD,CAA7B;;AAEAxB,EAAAA,CAAC,CAAC0B,cAAF,CAAiBT,GAAjB,EAAsBc,IAAtB;AACD,CA3CD","sourcesContent":["export const description = `\ncopy{Buffer,Texture}To{Buffer,Texture} tests.\n\nTest Plan:\n* Validate the correctness of the copy by filling the srcBuffer with testable data, doing\n  CopyBufferToBuffer() copy, and verifying the content of the whole dstBuffer with MapRead:\n  Copy {4 bytes, part of, the whole} srcBuffer to the dstBuffer {with, without} a non-zero valid\n  srcOffset that\n  - covers the whole dstBuffer\n  - covers the beginning of the dstBuffer\n  - covers the end of the dstBuffer\n  - covers neither the beginning nor the end of the dstBuffer\n* Validate the state transitions after the copy:\n  first copy from srcBuffer to dstBuffer, then copy from dstBuffer to srcBuffer and check the\n  content of the whole dstBuffer\n* Validate the order of the copies in one command buffer:\n  first copy from srcBuffer to a region of dstBuffer, then copy from another part of srcBuffer to\n  another region of dstBuffer which have overlaps with the region of dstBuffer in the first copy\n  and check the content of the whole dstBuffer to see the copies are done in correct order.\n`;\n\nimport { poptions, params } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('b2b')\n  .params(\n    params()\n      .combine(poptions('srcOffset', [0, 4, 8, 16]))\n      .combine(poptions('dstOffset', [0, 4, 8, 16]))\n      .combine(poptions('copySize', [0, 4, 8, 16]))\n      .expand(p =>\n        poptions('srcBufferSize', [p.srcOffset + p.copySize, p.srcOffset + p.copySize + 8])\n      )\n      .expand(p =>\n        poptions('dstBufferSize', [p.dstOffset + p.copySize, p.dstOffset + p.copySize + 8])\n      )\n  )\n  .fn(async t => {\n    const { srcOffset, dstOffset, copySize, srcBufferSize, dstBufferSize } = t.params;\n\n    const srcData = new Uint8Array(srcBufferSize);\n    for (let i = 0; i < srcBufferSize; ++i) {\n      srcData[i] = i + 1;\n    }\n\n    const src = t.device.createBuffer({\n      mappedAtCreation: true,\n      size: srcBufferSize,\n      usage: GPUBufferUsage.COPY_SRC,\n    });\n    new Uint8Array(src.getMappedRange()).set(srcData);\n    src.unmap();\n\n    const dst = t.device.createBuffer({\n      size: dstBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyBufferToBuffer(src, srcOffset, dst, dstOffset, copySize);\n    t.device.defaultQueue.submit([encoder.finish()]);\n\n    const expectedDstData = new Uint8Array(dstBufferSize);\n    for (let i = 0; i < copySize; ++i) {\n      expectedDstData[dstOffset + i] = srcData[srcOffset + i];\n    }\n\n    t.expectContents(dst, expectedDstData);\n  });\n\ng.test('b2b_CopyStateTransitions').fn(async t => {\n  const srcData = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8]);\n  const dstData = new Uint8Array([10, 20, 30, 40, 50, 60, 70, 80]);\n\n  const src = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: srcData.length,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  new Uint8Array(src.getMappedRange()).set(srcData);\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: dstData.length,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  new Uint8Array(dst.getMappedRange()).set(dstData);\n  dst.unmap();\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToBuffer(src, 0, dst, 4, 4);\n  encoder.copyBufferToBuffer(dst, 0, src, 4, 4);\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  const expectedSrcData = new Uint8Array([1, 2, 3, 4, 10, 20, 30, 40]);\n  const expectedDstData = new Uint8Array([10, 20, 30, 40, 1, 2, 3, 4]);\n  t.expectContents(src, expectedSrcData);\n  t.expectContents(dst, expectedDstData);\n});\n\ng.test('b2b_CopyOrder').fn(async t => {\n  const srcData = new Uint32Array([1, 2, 3, 4, 5, 6, 7, 8]);\n\n  const src = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: srcData.length * 4,\n    usage: GPUBufferUsage.COPY_SRC,\n  });\n  new Uint32Array(src.getMappedRange()).set(srcData);\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    size: srcData.length * 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToBuffer(src, 0, dst, 0, 16);\n  encoder.copyBufferToBuffer(src, 16, dst, 8, 16);\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  const expectedDstData = new Uint32Array([1, 2, 5, 6, 7, 8, 0, 0]);\n  t.expectContents(dst, expectedDstData);\n});\n\ng.test('b2t2b').fn(async t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const src = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  new Uint32Array(src.getMappedRange()).set(data);\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const mid = t.device.createTexture({\n    size: { width: 1, height: 1, depth: 1 },\n    format: 'rgba8uint',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToTexture(\n    { buffer: src, bytesPerRow: 256 },\n    { texture: mid, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depth: 1 }\n  );\n  encoder.copyTextureToBuffer(\n    { texture: mid, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depth: 1 }\n  );\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  t.expectContents(dst, data);\n});\n\ng.test('b2t2t2b').fn(async t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const src = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  new Uint32Array(src.getMappedRange()).set(data);\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const midDesc: GPUTextureDescriptor = {\n    size: { width: 1, height: 1, depth: 1 },\n    format: 'rgba8uint',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  };\n  const mid1 = t.device.createTexture(midDesc);\n  const mid2 = t.device.createTexture(midDesc);\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToTexture(\n    { buffer: src, bytesPerRow: 256 },\n    { texture: mid1, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depth: 1 }\n  );\n  encoder.copyTextureToTexture(\n    { texture: mid1, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { texture: mid2, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depth: 1 }\n  );\n  encoder.copyTextureToBuffer(\n    { texture: mid2, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depth: 1 }\n  );\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  t.expectContents(dst, data);\n});\n"],"file":"copies.spec.js"}