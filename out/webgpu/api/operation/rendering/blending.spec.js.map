{"version":3,"sources":["../../../../../src/webgpu/api/operation/rendering/blending.spec.ts"],"names":["description","params","poptions","makeTestGroup","assert","unreachable","GPUTest","g","kBlendFactors","kBlendOperations","mapColor","col","f","r","b","a","computeBlendFactor","src","dst","blendColor","factor","v","Math","min","undefined","computeBlendOperation","srcFactor","dstFactor","operation","_","k","max","test","desc","cases","combine","subcases","p","needsBlendConstant","fn","t","textureFormat","srcColor","dstColor","blendConstant","expectedColor","component","pipeline","device","createRenderPipeline","fragment","targets","format","blend","color","alpha","module","createShaderModule","code","entryPoint","vertex","primitive","topology","renderTarget","createTexture","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","size","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","view","createView","loadValue","storeOp","setPipeline","setBlendConstant","setBindGroup","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","buffer","makeBufferWithContents","Float32Array","GPUBufferUsage","UNIFORM","draw","endPass","queue","submit","finish","tolerance","expectedLow","expectedHigh","expectSinglePixelBetweenTwoValuesIn2DTexture","x","y","exp","unimplemented"],"mappings":"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","sourcesContent":["/* eslint-disable prettier/prettier */\nexport const description = `\nTest blending results.\n\nTODO:\n- Test result for all combinations of args (make sure each case is distinguishable from others\n- Test underflow/overflow has consistent behavior\n- ?\n`;\n\nimport { params, poptions } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, unreachable } from '../../../../common/framework/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nconst kBlendFactors: GPUBlendFactor[] = [\n  'zero',\n  'one',\n  'src',\n  'one-minus-src',\n  'src-alpha',\n  'one-minus-src-alpha',\n  'dst',\n  'one-minus-dst',\n  'dst-alpha',\n  'one-minus-dst-alpha',\n  'src-alpha-saturated',\n  'constant',\n  'one-minus-constant',\n];\n\nconst kBlendOperations: GPUBlendOperation[] = [\n  'add', //\n  'subtract',\n  'reverse-subtract',\n  'min',\n  'max',\n];\n\nfunction mapColor(\n  col: GPUColorDict,\n  f: (v: number, k: keyof GPUColorDict) => number\n): GPUColorDict {\n  return {\n    r: f(col.r, 'r'),\n    g: f(col.g, 'g'),\n    b: f(col.b, 'b'),\n    a: f(col.a, 'a'),\n  };\n}\n\nfunction computeBlendFactor(\n  src: GPUColorDict,\n  dst: GPUColorDict,\n  blendColor: GPUColorDict | undefined,\n  factor: GPUBlendFactor\n): GPUColorDict {\n  switch (factor) {\n    case 'zero':\n      return { r: 0, g: 0, b: 0, a: 0 };\n    case 'one':\n      return { r: 1, g: 1, b: 1, a: 1 };\n    case 'src':\n      return { ...src };\n    case 'one-minus-src':\n      return mapColor(src, v => 1 - v);\n    case 'src-alpha':\n      return mapColor(src, () => src.a);\n    case 'one-minus-src-alpha':\n      return mapColor(src, () => 1 - src.a);\n    case 'dst':\n      return { ...dst };\n    case 'one-minus-dst':\n      return mapColor(dst, v => 1 - v);\n    case 'dst-alpha':\n      return mapColor(dst, () => dst.a);\n    case 'one-minus-dst-alpha':\n      return mapColor(dst, () => 1 - dst.a);\n    case 'src-alpha-saturated': {\n      const f = Math.min(src.a, 1 - dst.a);\n      return { r: f, g: f, b: f, a: 1 };\n    }\n    case 'constant':\n      assert(blendColor !== undefined);\n      return { ...blendColor };\n    case 'one-minus-constant':\n      assert(blendColor !== undefined);\n      return mapColor(blendColor, v => 1 - v);\n    default:\n      unreachable();\n  }\n}\n\nfunction computeBlendOperation(src: GPUColorDict, srcFactor: GPUColorDict,\n  dst: GPUColorDict, dstFactor: GPUColorDict, operation: GPUBlendOperation) {\n  switch (operation) {\n    case 'add':\n      return mapColor(src, (_, k) => srcFactor[k] * src[k] + dstFactor[k] * dst[k]);\n    case 'max':\n      return mapColor(src, (_, k) => Math.max(src[k], dst[k]));\n    case 'min':\n      return mapColor(src, (_, k) => Math.min(src[k], dst[k]));\n    case 'reverse-subtract':\n      return mapColor(src, (_, k) => dstFactor[k] * dst[k] - srcFactor[k] * src[k]);\n    case 'subtract':\n      return mapColor(src, (_, k) => srcFactor[k] * src[k] - dstFactor[k] * dst[k]);\n  }\n}\n\ng.test('GPUBlendComponent')\n  .desc(\n    `Test all combinations of parameters for GPUBlendComponent.\n\n  Tests that parameters are correctly passed to the backend API and blend computations\n  are done correctly by blending a single pixel. The test uses rgba32float as the format\n  to avoid checking clamping behavior (tested in api,operation,rendering,blending:clamp,*).\n\n  Params:\n    - component= {color, alpha} - whether to test blending the color or the alpha component.\n    - srcFactor= {...all GPUBlendFactors}\n    - dstFactor= {...all GPUBlendFactors}\n    - operation= {...all GPUBlendOperations}\n  `)\n  .cases(\n    params() //\n      .combine(poptions('component', ['color', 'alpha'] as const))\n      .combine(poptions('srcFactor', kBlendFactors))\n      .combine(poptions('dstFactor', kBlendFactors))\n      .combine(poptions('operation', kBlendOperations))\n  )\n  .subcases((p) => {\n    const needsBlendConstant = (\n      p.srcFactor === 'one-minus-constant' || p.srcFactor === 'constant' ||\n      p.dstFactor === 'one-minus-constant' || p.dstFactor === 'constant'\n    );\n\n    return params()\n      .combine(poptions('srcColor', [\n        { r: 0.11, g: 0.61, b: 0.81, a: 0.44 }\n      ]))\n      .combine(poptions('dstColor', [\n        { r: 0.51, g: 0.22, b: 0.71, a: 0.33 },\n        { r: 0.09, g: 0.73, b: 0.93, a: 0.81 }\n      ]))\n      .combine(poptions('blendConstant', needsBlendConstant ? [\n        { r: 0.91, g: 0.82, b: 0.73, a: 0.64 },\n      ] : [ undefined ]));\n  })\n  .fn(t => {\n    const textureFormat: GPUTextureFormat = 'rgba32float';\n    const srcColor = t.params.srcColor;\n    const dstColor = t.params.dstColor;\n    const blendConstant = t.params.blendConstant;\n\n    const srcFactor = computeBlendFactor(srcColor, dstColor, blendConstant, t.params.srcFactor);\n    const dstFactor = computeBlendFactor(srcColor, dstColor, blendConstant, t.params.dstFactor);\n\n    const expectedColor = computeBlendOperation(srcColor, srcFactor, dstColor, dstFactor, t.params.operation);\n\n    switch (t.params.component) {\n      case 'color':\n        expectedColor.a = srcColor.a;\n        break;\n      case 'alpha':\n        expectedColor.r = srcColor.r;\n        expectedColor.g = srcColor.g;\n        expectedColor.b = srcColor.b;\n        break;\n    }\n\n    const pipeline = t.device.createRenderPipeline({\n      fragment: {\n        targets: [\n          {\n            format: textureFormat,\n            blend: {\n              // Set both color/alpha to defaults...\n              color: {},\n              alpha: {},\n              // ... but then override the component we're testing.\n              [t.params.component]: {\n                srcFactor: t.params.srcFactor,\n                dstFactor: t.params.dstFactor,\n                operation: t.params.operation,\n              },\n            },\n          },\n        ],\n        module: t.device.createShaderModule({\n          code: `\n[[block]] struct Uniform {\n  color: vec4<f32>;\n};\n[[group(0), binding(0)]] var<uniform> u : Uniform;\n\n[[stage(fragment)]] fn main() -> [[location(0)]] vec4<f32> {\n  return u.color;\n}\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n[[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n    return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n}\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      primitive: {\n        topology: 'point-list',\n      },\n    });\n\n    const renderTarget = t.device.createTexture({\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      size: [1, 1, 1],\n      format: textureFormat,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadValue: dstColor,\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPass.setPipeline(pipeline);\n    if (blendConstant) {\n      renderPass.setBlendConstant(blendConstant);\n    }\n    renderPass.setBindGroup(\n      0,\n      t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          {\n            binding: 0,\n            resource: {\n              buffer: t.makeBufferWithContents(\n                new Float32Array([srcColor.r, srcColor.g, srcColor.b, srcColor.a]),\n                GPUBufferUsage.UNIFORM\n              ),\n            },\n          },\n        ],\n      })\n    );\n    renderPass.draw(1);\n    renderPass.endPass();\n\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    const tolerance = 0.0001;\n    const expectedLow = mapColor(expectedColor, v => v - tolerance);\n    const expectedHigh = mapColor(expectedColor, v => v + tolerance);\n\n    t.expectSinglePixelBetweenTwoValuesIn2DTexture(renderTarget, textureFormat, { x: 0, y: 0}, {\n      exp: [\n        new Float32Array([expectedLow.r, expectedLow.g, expectedLow.b, expectedLow.a]),\n        new Float32Array([expectedHigh.r, expectedHigh.g, expectedHigh.b, expectedHigh.a]),\n      ]\n    });\n  });\n\ng.test('formats')\n  .desc(\n    `Test blending results works for all formats that support it, and that blending is not applied\n  for formats that do not. Blending should be done in linear space for srgb formats.`)\n  .unimplemented();\n\ng.test('clamp,blend_factor')\n  .desc('For fixed-point formats, test that the blend factor is clamped in the blend equation.')\n  .unimplemented();\n\ng.test('clamp,blend_color')\n  .desc('For fixed-point formats, test that the blend color is clamped in the blend equation.')\n  .unimplemented();\n\ng.test('clamp,blend_result')\n  .desc('For fixed-point formats, test that the blend result is clamped in the blend equation.')\n  .unimplemented();\n"],"file":"blending.spec.js"}