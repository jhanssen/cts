{"version":3,"sources":["../../../../src/webgpu/shader/validation/variable_and_const.spec.ts"],"names":["description","params","poptions","makeTestGroup","ShaderValidationTest","g","kScalarType","kContainerTypes","undefined","getType","scalarType","containerType","type","test","desc","combine","fn","t","variableOrConstant","lhsContainerType","lhsScalarType","rhsContainerType","rhsScalarType","lhsType","rhsType","code","expectation","expectCompileResult","storageClass"],"mappings":"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","sourcesContent":["export const description = `\nPositive and negative validation tests for variable and const.\n`;\n\nimport { params, poptions } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\n\nimport { ShaderValidationTest } from './shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kScalarType = ['i32', 'f32', 'u32', 'bool'] as const;\ntype ScalarType = 'i32' | 'f32' | 'u32' | 'bool';\n\nconst kContainerTypes = [\n  undefined,\n  'vec2',\n  'vec3',\n  'vec4',\n  'mat2x2',\n  'mat2x3',\n  'mat2x4',\n  'mat3x2',\n  'mat3x3',\n  'mat3x4',\n  'mat4x2',\n  'mat4x3',\n  'mat4x4',\n  'array',\n] as const;\ntype ContainerType =\n  | undefined\n  | 'vec2'\n  | 'vec3'\n  | 'vec4'\n  | 'mat2x2'\n  | 'mat2x3'\n  | 'mat2x4'\n  | 'mat3x2'\n  | 'mat3x3'\n  | 'mat3x4'\n  | 'mat4x2'\n  | 'mat4x3'\n  | 'mat4x4'\n  | 'array';\n\nfunction getType(scalarType: ScalarType, containerType: ContainerType) {\n  let type = '';\n  switch (containerType) {\n    case undefined: {\n      type = scalarType;\n      break;\n    }\n    case 'array': {\n      // TODO(sarahM0): 12 is a random number here. find a solution to replace it.\n      type = `array<${scalarType}, 12>`;\n      break;\n    }\n    default: {\n      type = `${containerType}<${scalarType}>`;\n      break;\n    }\n  }\n  return type;\n}\n\ng.test('v_0033')\n  .desc(\n    `Tests for validation rule v-0033:\n  If present, the initializer's type must match the store type of the variable.\n  Testing scalars, vectors, and matrices of every dimension and type.\n  TODO: add test for: structs - arrays of vectors and matrices - arrays of different length\n`\n  )\n  .params(\n    params()\n      .combine(poptions('variableOrConstant', ['var', 'const']))\n      .combine(poptions('lhsContainerType', kContainerTypes))\n      .combine(poptions('lhsScalarType', kScalarType))\n      .combine(poptions('rhsContainerType', kContainerTypes))\n      .combine(poptions('rhsScalarType', kScalarType))\n  )\n  .fn(t => {\n    const {\n      variableOrConstant,\n      lhsContainerType,\n      lhsScalarType,\n      rhsContainerType,\n      rhsScalarType,\n    } = t.params;\n\n    const lhsType = getType(lhsScalarType, lhsContainerType);\n    const rhsType = getType(rhsScalarType, rhsContainerType);\n\n    const code = `\n      [[stage(vertex)]]\n      fn main() -> void {\n        ${variableOrConstant} a : ${lhsType} = ${rhsType}();\n      }\n    `;\n\n    const expectation =\n      (lhsScalarType === rhsScalarType && lhsContainerType === rhsContainerType) || 'v-0033';\n    t.expectCompileResult(expectation, code);\n  });\n\ng.test('v_0038')\n  .desc(\n    `Tests for validation rule v-0038:\n  The following types are IO-shareable:\n  - numeric scalar types\n  - numeric vector types\n  - Matrix Types\n  - Array Types if its element type is IO-shareable, and the array is not runtime-sized\n  - Structure Types if all its members are IO-shareable\n\n  As a result these are not IO-shareable:\n  - boolean\n  - vector of booleans\n  - array of booleans\n  - matrix of booleans\n  - array runtime sized -> cannot be used outside of a struct, so no cts for this\n  - struct with bool component\n  - struct with runtime array\n\n  Control case: 'private' is used to make sure when only the storage class changes, the shader\n  becomes invalid and nothing else is wrong.\n  TODO: add test for: struct - struct with bool component - struct with runtime array`\n  )\n  .params(\n    params()\n      .combine(poptions('storageClass', ['in', 'out', 'private']))\n      .combine(poptions('containerType', kContainerTypes))\n      .combine(poptions('scalarType', kScalarType))\n  )\n  .fn(t => {\n    const { storageClass, containerType, scalarType } = t.params;\n    const type = containerType ? `${containerType}<${scalarType}>` : scalarType;\n\n    const code = `\n      [[location(0)]] var<${storageClass}> a : ${type} = ${type}();\n        [[stage(vertex)]]\n        fn main() -> void {\n        }\n      `;\n\n    const expectation = storageClass === 'private' || scalarType !== 'bool' || 'v-0038';\n    t.expectCompileResult(expectation, code);\n  });\n"],"file":"variable_and_const.spec.js"}