{"version":3,"sources":["../../../../src/webgpu/web_platform/canvas/context_creation.spec.ts"],"names":["description","Fixture","pbool","poptions","makeTestGroup","g","test","desc","cases","subcases","undefined","fn","t","canvas","params","offscreen","OffscreenCanvas","skip","document","createElement","attributes","width","height","ctx","getContext","expect","GPUCanvasContext"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA,CALO,CAOP,SAASC,OAAT,QAAwB,sCAAxB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,6CAAhC;AACA,SAASC,aAAT,QAA8B,yCAA9B;;AAEA,OAAO,MAAMC,CAAC,GAAGD,aAAa,CAACH,OAAD,CAAvB;;AAEPI,CAAC,CAACC,IAAF,CAAO,aAAP;AACGC,IADH;AAEK;AACL;AACA,qEAJA;;AAMGC,KANH,CAMSN,KAAK,CAAC,WAAD,CANd;AAOGO,QAPH,CAOY,MAAMN,QAAQ,CAAC,YAAD,EAAe,CAACO,SAAD,EAAY,EAAZ,CAAf,CAP1B;AAQGC,EARH,CAQM,MAAMC,CAAN,IAAW;AACb,MAAIC,MAAJ;AACA,MAAID,CAAC,CAACE,MAAF,CAASC,SAAb,EAAwB;AACtB,QAAI,OAAOC,eAAP,KAA2B,WAA/B,EAA4C;AAC1C;AACAJ,MAAAA,CAAC,CAACK,IAAF,CAAO,kDAAP;AACD;;AAEDJ,IAAAA,MAAM,GAAG,IAAIG,eAAJ,CAAoB,EAApB,EAAwB,EAAxB,CAAT;AACD,GAPD,MAOO;AACL,QAAI,OAAOE,QAAP,KAAoB,WAAxB,EAAqC;AACnC;AACAN,MAAAA,CAAC,CAACK,IAAF,CAAO,+CAAP;AACD;;AAEDJ,IAAAA,MAAM,GAAGK,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiCP,CAAC,CAACE,MAAF,CAASM,UAA1C,CAAT;AACAP,IAAAA,MAAM,CAACQ,KAAP,GAAe,EAAf;AACAR,IAAAA,MAAM,CAACS,MAAP,GAAgB,EAAhB;AACD;;AAED,QAAMC,GAAG,GAAGV,MAAM,CAACW,UAAP,CAAkB,YAAlB,CAAZ;AACAZ,EAAAA,CAAC,CAACa,MAAF,CAASF,GAAG,YAAYG,gBAAxB;AACD,CA9BH","sourcesContent":["export const description = `\nTests for canvas context creation.\n\nNote there are no context creation attributes for WebGPU (as of this writing).\nOptions are configured in configureSwapChain instead.\n`;\n\nimport { Fixture } from '../../../common/framework/fixture.js';\nimport { pbool, poptions } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\n\nexport const g = makeTestGroup(Fixture);\n\ng.test('return_type')\n  .desc(\n    `Test the return type of getContext for WebGPU.\n\n    TODO: Test OffscreenCanvas made from transferControlToOffscreen.`\n  )\n  .cases(pbool('offscreen'))\n  .subcases(() => poptions('attributes', [undefined, {}]))\n  .fn(async t => {\n    let canvas: HTMLCanvasElement | OffscreenCanvas;\n    if (t.params.offscreen) {\n      if (typeof OffscreenCanvas === 'undefined') {\n        // Skip if the current context doesn't have OffscreenCanvas (e.g. Node).\n        t.skip('OffscreenCanvas is not available in this context');\n      }\n\n      canvas = new OffscreenCanvas(10, 10);\n    } else {\n      if (typeof document === 'undefined') {\n        // Skip if there is no document (Workers, Node)\n        t.skip('DOM is not available to create canvas element');\n      }\n\n      canvas = document.createElement('canvas', t.params.attributes);\n      canvas.width = 10;\n      canvas.height = 10;\n    }\n\n    const ctx = canvas.getContext('gpupresent');\n    t.expect(ctx instanceof GPUCanvasContext);\n  });\n"],"file":"context_creation.spec.js"}