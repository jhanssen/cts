{"version":3,"sources":["../../../src/common/tools/checklist.ts"],"names":["fs","process","DefaultTestFileLoader","Ordering","compareQueries","parseQuery","TestQueryMultiFile","loadTreeForQuery","assert","StacklessError","usage","rc","console","error","exit","argv","length","loadQueryListFromTextFile","filename","lines","promises","readFile","split","allQueries","filter","l","map","trim","queriesBySuite","Map","query","suiteQueries","get","suite","undefined","set","push","checkForOverlappingQueries","queries","q1","q2","Unordered","checkForUnmatchedSubtrees","tree","matchQueries","subtreeCount","unmatchedSubtrees","overbroadMatches","collapsedSubtree","iterateCollapsedQueries","subtreeMatched","q","comparison","StrictSubset","StrictSuperset","log","join","Array","from","keys","loader","queriesInSuite","entries","suiteQuery","catch","ex","stack","toString"],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as process from 'process';\n\nimport { DefaultTestFileLoader } from '../framework/file_loader.js';\nimport { Ordering, compareQueries } from '../framework/query/compare.js';\nimport { parseQuery } from '../framework/query/parseQuery.js';\nimport { TestQuery, TestQueryMultiFile } from '../framework/query/query.js';\nimport { loadTreeForQuery, TestTree } from '../framework/tree.js';\nimport { assert, StacklessError } from '../framework/util/util.js';\n\nfunction usage(rc: number): void {\n  console.error('Usage:');\n  console.error('  tools/checklist FILE');\n  console.error('  tools/checklist my/list.txt');\n  process.exit(rc);\n}\n\nif (process.argv.length === 2) usage(0);\nif (process.argv.length !== 3) usage(1);\n\ntype QueriesBySuite = Map<string, TestQuery[]>;\nasync function loadQueryListFromTextFile(filename: string): Promise<QueriesBySuite> {\n  const lines = (await fs.promises.readFile(filename, 'utf8')).split(/\\r?\\n/);\n  const allQueries = lines.filter(l => l).map(l => parseQuery(l.trim()));\n\n  const queriesBySuite: QueriesBySuite = new Map();\n  for (const query of allQueries) {\n    let suiteQueries = queriesBySuite.get(query.suite);\n    if (suiteQueries === undefined) {\n      suiteQueries = [];\n      queriesBySuite.set(query.suite, suiteQueries);\n    }\n\n    suiteQueries.push(query);\n  }\n\n  return queriesBySuite;\n}\n\nfunction checkForOverlappingQueries(queries: TestQuery[]): void {\n  for (const q1 of queries) {\n    for (const q2 of queries) {\n      if (q1 !== q2 && compareQueries(q1, q2) !== Ordering.Unordered) {\n        throw new StacklessError(`The following checklist items overlap:\\n    ${q1}\\n    ${q2}`);\n      }\n    }\n  }\n}\n\nfunction checkForUnmatchedSubtrees(tree: TestTree, matchQueries: TestQuery[]): number {\n  let subtreeCount = 0;\n  const unmatchedSubtrees: TestQuery[] = [];\n  const overbroadMatches: [TestQuery, TestQuery][] = [];\n  for (const collapsedSubtree of tree.iterateCollapsedQueries(true)) {\n    subtreeCount++;\n    let subtreeMatched = false;\n    for (const q of matchQueries) {\n      const comparison = compareQueries(q, collapsedSubtree);\n      assert(comparison !== Ordering.StrictSubset); // shouldn't happen, due to subqueriesToExpand\n      if (comparison === Ordering.StrictSuperset) overbroadMatches.push([q, collapsedSubtree]);\n      if (comparison !== Ordering.Unordered) subtreeMatched = true;\n    }\n    if (!subtreeMatched) unmatchedSubtrees.push(collapsedSubtree);\n  }\n\n  if (overbroadMatches.length) {\n    // (note, this doesn't show ALL multi-test queries - just ones that actually match any .spec.ts)\n    console.log(`  FYI, the following checklist items were broader than one file:`);\n    for (const [q, collapsedSubtree] of overbroadMatches) {\n      console.log(`    ${q}  >  ${collapsedSubtree}`);\n    }\n  }\n\n  if (unmatchedSubtrees.length) {\n    throw new StacklessError(`Found unmatched tests:\\n    ${unmatchedSubtrees.join('\\n    ')}`);\n  }\n  return subtreeCount;\n}\n\n(async () => {\n  console.log('Loading queries...');\n  const queriesBySuite = await loadQueryListFromTextFile(process.argv[2]);\n  console.log('  Found suites: ' + Array.from(queriesBySuite.keys()).join(' '));\n\n  const loader = new DefaultTestFileLoader();\n  for (const [suite, queriesInSuite] of queriesBySuite.entries()) {\n    console.log(`Suite \"${suite}\":`);\n    console.log(`  Checking overlaps between ${queriesInSuite.length} checklist items...`);\n    checkForOverlappingQueries(queriesInSuite);\n    const suiteQuery = new TestQueryMultiFile(suite, []);\n    console.log(`  Loading tree ${suiteQuery}...`);\n    const tree = await loadTreeForQuery(loader, suiteQuery, queriesInSuite);\n    console.log('  Found no invalid queries in the checklist. Checking for unmatched tests...');\n    const subtreeCount = checkForUnmatchedSubtrees(tree, queriesInSuite);\n    console.log(`  No unmatched tests among ${subtreeCount} subtrees!`);\n  }\n  console.log(`Checklist looks good!`);\n})().catch(ex => {\n  console.log(ex.stack ?? ex.toString());\n  process.exit(1);\n});\n"],"file":"checklist.js"}