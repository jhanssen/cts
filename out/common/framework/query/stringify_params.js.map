{"version":3,"sources":["../../../../src/common/framework/query/stringify_params.ts"],"names":["badParamValueChars","paramKeyIsPublic","assert","stringifyParamValue","stringifyParamValueUniquely","kParamKVSeparator","kParamSeparator","kWildcard","stringifyPublicParams","p","addWildcard","parts","Object","keys","filter","k","map","stringifySingleParam","push","join","stringifyPublicParamsUniquely","sort","stringifySingleParamUniquely","v","stringifySingleParamValue","s","test"],"mappings":";AAAA;AACA,GADA;AAGEA,kBAHF;AAIEC,gBAJF;AAKO,oBALP;AAMA,SAASC,MAAT,QAAuB,iBAAvB;;AAEA,SAASC,mBAAT,EAA8BC,2BAA9B,QAAiE,uBAAjE;AACA,SAASC,iBAAT,EAA4BC,eAA5B,EAA6CC,SAA7C,QAA8D,iBAA9D;;AAEA,OAAO,SAASC,qBAAT,CAA+BC,CAA/B,EAA8CC,WAAW,GAAG,KAA5D,EAA2E;AAChF,QAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYJ,CAAZ;AACXK,EAAAA,MADW,CACJC,CAAC,IAAId,gBAAgB,CAACc,CAAD,CADjB;AAEXC,EAAAA,GAFW,CAEPD,CAAC,IAAIE,oBAAoB,CAACF,CAAD,EAAIN,CAAC,CAACM,CAAD,CAAL,CAFlB,CAAd;;AAIA,MAAIL,WAAJ,EAAiBC,KAAK,CAACO,IAAN,CAAWX,SAAX;;AAEjB,SAAOI,KAAK,CAACQ,IAAN,CAAWb,eAAX,CAAP;AACD;;AAED;AACA;AACA;AACA,OAAO,SAASc,6BAAT,CAAuCX,CAAvC,EAA8D;AACnE,QAAMI,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYJ,CAAZ,EAAeY,IAAf,EAAb;AACA,SAAOR,IAAI;AACRC,EAAAA,MADI,CACGC,CAAC,IAAId,gBAAgB,CAACc,CAAD,CADxB;AAEJC,EAAAA,GAFI,CAEAD,CAAC,IAAIO,4BAA4B,CAACP,CAAD,EAAIN,CAAC,CAACM,CAAD,CAAL,CAFjC;AAGJI,EAAAA,IAHI,CAGCb,eAHD,CAAP;AAID;;AAED,OAAO,SAASW,oBAAT,CAA8BF,CAA9B,EAAyCQ,CAAzC,EAA2D;AAChE,SAAQ,GAAER,CAAE,GAAEV,iBAAkB,GAAEmB,yBAAyB,CAACD,CAAD,CAAI,EAA/D;AACD;;AAED,SAASD,4BAAT,CAAsCP,CAAtC,EAAiDQ,CAAjD,EAAmE;AACjE,SAAQ,GAAER,CAAE,GAAEV,iBAAkB,GAAED,2BAA2B,CAACmB,CAAD,CAAI,EAAjE;AACD;;AAED,SAASC,yBAAT,CAAmCD,CAAnC,EAA6D;AAC3D,QAAME,CAAC,GAAGtB,mBAAmB,CAACoB,CAAD,CAA7B;AACArB,EAAAA,MAAM;AACJ,GAACF,kBAAkB,CAAC0B,IAAnB,CAAwBD,CAAxB,CADG;AAEH,iDAA8CzB,kBAAmB,UAASyB,CAAE,EAFzE,CAAN;;AAIA,SAAOA,CAAP;AACD","sourcesContent":["import {\n  CaseParams,\n  ParamArgument,\n  badParamValueChars,\n  paramKeyIsPublic,\n} from '../params_utils.js';\nimport { assert } from '../util/util.js';\n\nimport { stringifyParamValue, stringifyParamValueUniquely } from './json_param_value.js';\nimport { kParamKVSeparator, kParamSeparator, kWildcard } from './separators.js';\n\nexport function stringifyPublicParams(p: CaseParams, addWildcard = false): string {\n  const parts = Object.keys(p)\n    .filter(k => paramKeyIsPublic(k))\n    .map(k => stringifySingleParam(k, p[k]));\n\n  if (addWildcard) parts.push(kWildcard);\n\n  return parts.join(kParamSeparator);\n}\n\n/**\n * An _approximately_ unique string representing a CaseParams value.\n */\nexport function stringifyPublicParamsUniquely(p: CaseParams): string {\n  const keys = Object.keys(p).sort();\n  return keys\n    .filter(k => paramKeyIsPublic(k))\n    .map(k => stringifySingleParamUniquely(k, p[k]))\n    .join(kParamSeparator);\n}\n\nexport function stringifySingleParam(k: string, v: ParamArgument) {\n  return `${k}${kParamKVSeparator}${stringifySingleParamValue(v)}`;\n}\n\nfunction stringifySingleParamUniquely(k: string, v: ParamArgument) {\n  return `${k}${kParamKVSeparator}${stringifyParamValueUniquely(v)}`;\n}\n\nfunction stringifySingleParamValue(v: ParamArgument): string {\n  const s = stringifyParamValue(v);\n  assert(\n    !badParamValueChars.test(s),\n    `JSON.stringified param value must not match ${badParamValueChars} - was ${s}`\n  );\n  return s;\n}\n"],"file":"stringify_params.js"}