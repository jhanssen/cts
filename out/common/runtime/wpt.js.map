{"version":3,"sources":["../../../src/common/runtime/wpt.ts"],"names":["DefaultTestFileLoader","Logger","parseQuery","parseExpectationsForTestQuery","assert","optionEnabled","TestWorker","setup","explicit_done","workerEnabled","worker","undefined","loader","qs","URLSearchParams","window","location","search","getAll","length","filterQuery","testcases","loadCases","expectations","loadWebGPUExpectations","URL","href","log","testcase","name","query","toString","wpt_fn","rec","res","record","run","status","logs","map","s","toJSON","join","promise_test","done"],"mappings":";AAAA;AACA,G,CADA;AAEA,SAASA,qBAAT,QAAsC,6BAAtC,CACA,SAASC,MAAT,QAAuB,gCAAvB;AACA,SAASC,UAAT,QAA2B,kCAA3B;AACA,SAASC,6BAAT,QAA8C,6BAA9C;AACA,SAASC,MAAT,QAAuB,2BAAvB;;AAEA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,UAAT,QAA2B,yBAA3B;;AAEA;;;;;;;;;;;AAWAC,KAAK,CAAC;AACJ;AACA;AACAC,EAAAA,aAAa,EAAE,IAHX,EAAD,CAAL;;;AAMA,CAAC,YAAY;AACX,QAAMC,aAAa,GAAGJ,aAAa,CAAC,QAAD,CAAnC;AACA,QAAMK,MAAM,GAAGD,aAAa,GAAG,IAAIH,UAAJ,CAAe,KAAf,CAAH,GAA2BK,SAAvD;;AAEA,QAAMC,MAAM,GAAG,IAAIZ,qBAAJ,EAAf;AACA,QAAMa,EAAE,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,EAA4CC,MAA5C,CAAmD,GAAnD,CAAX;AACAd,EAAAA,MAAM,CAACS,EAAE,CAACM,MAAH,KAAc,CAAf,EAAkB,0CAAlB,CAAN;AACA,QAAMC,WAAW,GAAGlB,UAAU,CAACW,EAAE,CAAC,CAAD,CAAH,CAA9B;AACA,QAAMQ,SAAS,GAAG,MAAMT,MAAM,CAACU,SAAP,CAAiBF,WAAjB,CAAxB;;AAEA,QAAMG,YAAY;AAChB,SAAOC,sBAAP,KAAkC,WAAlC;AACIrB,EAAAA,6BAA6B;AAC3B,QAAMqB,sBADqB;AAE3BJ,EAAAA,WAF2B;AAG3B,MAAIK,GAAJ,CAAQV,MAAM,CAACC,QAAP,CAAgBU,IAAxB,CAH2B,CADjC;;AAMI,IAPN;;AASA,QAAMC,GAAG,GAAG,IAAI1B,MAAJ,CAAW,KAAX,CAAZ;;AAEA,OAAK,MAAM2B,QAAX,IAAuBP,SAAvB,EAAkC;AAChC,UAAMQ,IAAI,GAAGD,QAAQ,CAACE,KAAT,CAAeC,QAAf,EAAb;AACA,UAAMC,MAAM,GAAG,YAAY;AACzB,YAAM,CAACC,GAAD,EAAMC,GAAN,IAAaP,GAAG,CAACQ,MAAJ,CAAWN,IAAX,CAAnB;AACA,UAAInB,MAAJ,EAAY;AACV,cAAMA,MAAM,CAAC0B,GAAP,CAAWH,GAAX,EAAgBJ,IAAhB,EAAsBN,YAAtB,CAAN;AACD,OAFD,MAEO;AACL,cAAMK,QAAQ,CAACQ,GAAT,CAAaH,GAAb,EAAkBV,YAAlB,CAAN;AACD;;AAED;AACA,UAAIW,GAAG,CAACG,MAAJ,KAAe,MAAnB,EAA2B;AACzB,cAAM,CAACH,GAAG,CAACI,IAAJ,IAAY,EAAb,EAAiBC,GAAjB,CAAqBC,CAAC,IAAIA,CAAC,CAACC,MAAF,EAA1B,EAAsCC,IAAtC,CAA2C,MAA3C,CAAN;AACD;AACF,KAZD;;AAcAC,IAAAA,YAAY,CAACX,MAAD,EAASH,IAAT,CAAZ;AACD;;AAEDe,EAAAA,IAAI;AACL,CAzCD","sourcesContent":["// Implements the wpt-embedded test runner (see also: wpt/cts.html).\n\nimport { DefaultTestFileLoader } from '../framework/file_loader.js';\nimport { Logger } from '../framework/logging/logger.js';\nimport { parseQuery } from '../framework/query/parseQuery.js';\nimport { parseExpectationsForTestQuery } from '../framework/query/query.js';\nimport { assert } from '../framework/util/util.js';\n\nimport { optionEnabled } from './helper/options.js';\nimport { TestWorker } from './helper/test_worker.js';\n\n// testharness.js API (https://web-platform-tests.org/writing-tests/testharness-api.html)\ndeclare interface WptTestObject {\n  step(f: () => void): void;\n  done(): void;\n}\ndeclare function setup(properties: { explicit_done?: boolean }): void;\ndeclare function promise_test(f: (t: WptTestObject) => Promise<void>, name: string): void;\ndeclare function done(): void;\n\ndeclare const loadWebGPUExpectations: Promise<unknown> | undefined;\n\nsetup({\n  // It's convenient for us to asynchronously add tests to the page. Prevent done() from being\n  // called implicitly when the page is finished loading.\n  explicit_done: true,\n});\n\n(async () => {\n  const workerEnabled = optionEnabled('worker');\n  const worker = workerEnabled ? new TestWorker(false) : undefined;\n\n  const loader = new DefaultTestFileLoader();\n  const qs = new URLSearchParams(window.location.search).getAll('q');\n  assert(qs.length === 1, 'currently, there must be exactly one ?q=');\n  const filterQuery = parseQuery(qs[0]);\n  const testcases = await loader.loadCases(filterQuery);\n\n  const expectations =\n    typeof loadWebGPUExpectations !== 'undefined'\n      ? parseExpectationsForTestQuery(\n          await loadWebGPUExpectations,\n          filterQuery,\n          new URL(window.location.href)\n        )\n      : [];\n\n  const log = new Logger(false);\n\n  for (const testcase of testcases) {\n    const name = testcase.query.toString();\n    const wpt_fn = async () => {\n      const [rec, res] = log.record(name);\n      if (worker) {\n        await worker.run(rec, name, expectations);\n      } else {\n        await testcase.run(rec, expectations);\n      }\n\n      // Unfortunately, it seems not possible to surface any logs for warn/skip.\n      if (res.status === 'fail') {\n        throw (res.logs || []).map(s => s.toJSON()).join('\\n\\n');\n      }\n    };\n\n    promise_test(wpt_fn, name);\n  }\n\n  done();\n})();\n"],"file":"wpt.js"}